{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    function({ addUtilities }) {\n      const newUtilities = {\n        '.scrollbar-thin': {\n          'scrollbar-width': 'thin',\n        },\n        '.scrollbar-thumb-rounded-full': {\n          'scrollbar-color': 'rgba(156, 163, 175, 0.5) transparent',\n        },\n        '.scrollbar-track-transparent': {\n          'scrollbar-width': 'thin',\n        },\n        '.scrollbar-thumb-gray-300': {\n          'scrollbar-color': 'rgba(209, 213, 219, 0.5) transparent',\n        },\n        '.dark .scrollbar-thumb-gray-600': {\n          'scrollbar-color': 'rgba(75, 85, 99, 0.5) transparent',\n        },\n      }\n      addUtilities(newUtilities)\n    }\n  ],\n} satisfies Config;\n","size_bytes":3441},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1008},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertPlantConfigSchema, insertNotificationSettingsSchema, insertSensorDataSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Plant configuration routes\n  app.get('/api/plant-config/:userId', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const config = await storage.getPlantConfig(userId);\n      \n      if (!config) {\n        return res.status(404).json({ message: 'Plant configuration not found' });\n      }\n      \n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get plant configuration' });\n    }\n  });\n  \n  app.post('/api/plant-config', async (req, res) => {\n    try {\n      const validatedData = insertPlantConfigSchema.parse(req.body);\n      const config = await storage.createPlantConfig(validatedData);\n      res.status(201).json(config);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid plant configuration data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create plant configuration' });\n    }\n  });\n  \n  app.patch('/api/plant-config/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertPlantConfigSchema.partial().parse(req.body);\n      const config = await storage.updatePlantConfig(id, validatedData);\n      \n      if (!config) {\n        return res.status(404).json({ message: 'Plant configuration not found' });\n      }\n      \n      res.json(config);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid plant configuration data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to update plant configuration' });\n    }\n  });\n  \n  // Notification settings routes\n  app.get('/api/notification-settings/:userId', async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const settings = await storage.getNotificationSettings(userId);\n      \n      if (!settings) {\n        return res.status(404).json({ message: 'Notification settings not found' });\n      }\n      \n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get notification settings' });\n    }\n  });\n  \n  app.post('/api/notification-settings', async (req, res) => {\n    try {\n      const validatedData = insertNotificationSettingsSchema.parse(req.body);\n      const settings = await storage.createNotificationSettings(validatedData);\n      res.status(201).json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid notification settings data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create notification settings' });\n    }\n  });\n  \n  app.patch('/api/notification-settings/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertNotificationSettingsSchema.partial().parse(req.body);\n      const settings = await storage.updateNotificationSettings(id, validatedData);\n      \n      if (!settings) {\n        return res.status(404).json({ message: 'Notification settings not found' });\n      }\n      \n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid notification settings data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to update notification settings' });\n    }\n  });\n  \n  // Sensor data routes\n  app.get('/api/sensor-data', async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const data = await storage.getSensorData(limit);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to get sensor data' });\n    }\n  });\n  \n  app.post('/api/sensor-data', async (req, res) => {\n    try {\n      const validatedData = insertSensorDataSchema.parse(req.body);\n      const data = await storage.createSensorData(validatedData);\n      res.status(201).json(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: 'Invalid sensor data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create sensor data' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4696},"server/storage.ts":{"content":"import { users, User, InsertUser, plantConfigs, PlantConfig, InsertPlantConfig, notificationSettings, NotificationSettings, InsertNotificationSettings, sensorData, SensorData, InsertSensorData } from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods (from original storage)\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Plant configuration methods\n  getPlantConfig(userId: number): Promise<PlantConfig | undefined>;\n  createPlantConfig(config: InsertPlantConfig): Promise<PlantConfig>;\n  updatePlantConfig(id: number, config: Partial<InsertPlantConfig>): Promise<PlantConfig | undefined>;\n  \n  // Notification settings methods\n  getNotificationSettings(userId: number): Promise<NotificationSettings | undefined>;\n  createNotificationSettings(settings: InsertNotificationSettings): Promise<NotificationSettings>;\n  updateNotificationSettings(id: number, settings: Partial<InsertNotificationSettings>): Promise<NotificationSettings | undefined>;\n  \n  // Sensor data methods\n  getSensorData(limit: number): Promise<SensorData[]>;\n  createSensorData(data: InsertSensorData): Promise<SensorData>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private plantConfigsMap: Map<number, PlantConfig>;\n  private notificationSettingsMap: Map<number, NotificationSettings>;\n  private sensorDataArray: SensorData[];\n  \n  private currentUserId: number;\n  private currentPlantConfigId: number;\n  private currentNotificationSettingsId: number;\n  private currentSensorDataId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.plantConfigsMap = new Map();\n    this.notificationSettingsMap = new Map();\n    this.sensorDataArray = [];\n    \n    this.currentUserId = 1;\n    this.currentPlantConfigId = 1;\n    this.currentNotificationSettingsId = 1;\n    this.currentSensorDataId = 1;\n  }\n\n  // User methods (from original storage)\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  // Plant configuration methods\n  async getPlantConfig(userId: number): Promise<PlantConfig | undefined> {\n    return Array.from(this.plantConfigsMap.values()).find(\n      config => config.userId === userId\n    );\n  }\n  \n  async createPlantConfig(insertConfig: InsertPlantConfig): Promise<PlantConfig> {\n    const id = this.currentPlantConfigId++;\n    const now = new Date();\n    const config: PlantConfig = { ...insertConfig, id, createdAt: now };\n    this.plantConfigsMap.set(id, config);\n    return config;\n  }\n  \n  async updatePlantConfig(id: number, updateData: Partial<InsertPlantConfig>): Promise<PlantConfig | undefined> {\n    const existingConfig = this.plantConfigsMap.get(id);\n    if (!existingConfig) return undefined;\n    \n    const updatedConfig: PlantConfig = {\n      ...existingConfig,\n      ...updateData\n    };\n    \n    this.plantConfigsMap.set(id, updatedConfig);\n    return updatedConfig;\n  }\n  \n  // Notification settings methods\n  async getNotificationSettings(userId: number): Promise<NotificationSettings | undefined> {\n    return Array.from(this.notificationSettingsMap.values()).find(\n      settings => settings.userId === userId\n    );\n  }\n  \n  async createNotificationSettings(insertSettings: InsertNotificationSettings): Promise<NotificationSettings> {\n    const id = this.currentNotificationSettingsId++;\n    const now = new Date();\n    const settings: NotificationSettings = { ...insertSettings, id, createdAt: now };\n    this.notificationSettingsMap.set(id, settings);\n    return settings;\n  }\n  \n  async updateNotificationSettings(id: number, updateData: Partial<InsertNotificationSettings>): Promise<NotificationSettings | undefined> {\n    const existingSettings = this.notificationSettingsMap.get(id);\n    if (!existingSettings) return undefined;\n    \n    const updatedSettings: NotificationSettings = {\n      ...existingSettings,\n      ...updateData\n    };\n    \n    this.notificationSettingsMap.set(id, updatedSettings);\n    return updatedSettings;\n  }\n  \n  // Sensor data methods\n  async getSensorData(limit: number): Promise<SensorData[]> {\n    return this.sensorDataArray\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n  \n  async createSensorData(insertData: InsertSensorData): Promise<SensorData> {\n    const id = this.currentSensorDataId++;\n    const now = new Date();\n    const data: SensorData = { ...insertData, id, timestamp: now };\n    this.sensorDataArray.push(data);\n    return data;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4999},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User table for authentication (from original schema)\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Plant configurations table\nexport const plantConfigs = pgTable(\"plant_configs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  plantType: text(\"plant_type\").notNull(),\n  tempMin: real(\"temp_min\").notNull(),\n  tempMax: real(\"temp_max\").notNull(),\n  humidityMin: integer(\"humidity_min\").notNull(),\n  humidityMax: integer(\"humidity_max\").notNull(),\n  soilMoistureMin: integer(\"soil_moisture_min\").notNull(),\n  soilMoistureMax: integer(\"soil_moisture_max\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertPlantConfigSchema = createInsertSchema(plantConfigs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertPlantConfig = z.infer<typeof insertPlantConfigSchema>;\nexport type PlantConfig = typeof plantConfigs.$inferSelect;\n\n// Notification settings table\nexport const notificationSettings = pgTable(\"notification_settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  enableNotifications: boolean(\"enable_notifications\").notNull().default(true),\n  lowMoistureAlerts: boolean(\"low_moisture_alerts\").notNull().default(true),\n  temperatureAlerts: boolean(\"temperature_alerts\").notNull().default(false),\n  humidityAlerts: boolean(\"humidity_alerts\").notNull().default(false),\n  email: text(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertNotificationSettingsSchema = createInsertSchema(notificationSettings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertNotificationSettings = z.infer<typeof insertNotificationSettingsSchema>;\nexport type NotificationSettings = typeof notificationSettings.$inferSelect;\n\n// Sensor data table for storing historical readings\nexport const sensorData = pgTable(\"sensor_data\", {\n  id: serial(\"id\").primaryKey(),\n  temperature: real(\"temperature\").notNull(),\n  humidity: integer(\"humidity\").notNull(),\n  soilMoisture: integer(\"soil_moisture\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertSensorDataSchema = createInsertSchema(sensorData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertSensorData = z.infer<typeof insertSensorDataSchema>;\nexport type SensorData = typeof sensorData.$inferSelect;\n","size_bytes":2897},"temp/MyPlants.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { Header } from '@/components/Header';\nimport { useAuth } from '@/lib/AuthProvider';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { addUserPlant, UserPlant } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\nimport { Leaf, Plus, Droplet, Calendar, AlertCircle, Check, Loader2, Camera, Upload, Image as ImageIcon, X, Trash2 } from 'lucide-react';\nimport { \n  uploadPlantPhoto, \n  updatePlantData, \n  subscribeSensorData, \n  setWateringActive,\n  SensorData \n} from '@/lib/firebase';\nimport { getDatabase, ref, set } from 'firebase/database';\nimport { analyzePlantPhoto, PlantAnalysisResult, fetchPlantImage } from '@/lib/gemini';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { PlantTypeSelector } from '@/components/PlantTypeSelector';\nimport { PlantTypeInfo } from '@/lib/plantDatabase';\n\nexport default function MyPlants() {\n  const { user, profile, loading, refreshProfile } = useAuth();\n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const [showAddPlant, setShowAddPlant] = useState(false);\n  const [showPlantTypeSelector, setShowPlantTypeSelector] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [photoDialogOpen, setPhotoDialogOpen] = useState(false);\n  const [plantDetailsOpen, setPlantDetailsOpen] = useState(false);\n  const [selectedPlant, setSelectedPlant] = useState<UserPlant | null>(null);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const [uploadingPhoto, setUploadingPhoto] = useState(false);\n  const [analyzingPhoto, setAnalyzingPhoto] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<PlantAnalysisResult | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const newPlantPhotoRef = useRef<HTMLInputElement>(null);\n  \n  // Add plant form state\n  const [newPlant, setNewPlant] = useState({\n    name: '',\n    species: '',\n    notes: ''\n  });\n  \n  // New plant photo state\n  const [newPlantPhoto, setNewPlantPhoto] = useState<File | null>(null);\n  const [newPlantPhotoPreview, setNewPlantPhotoPreview] = useState<string | null>(null);\n  const [newPlantAnalysisResult, setNewPlantAnalysisResult] = useState<PlantAnalysisResult | null>(null);\n  const [analyzingNewPlantPhoto, setAnalyzingNewPlantPhoto] = useState(false);\n  const [fetchingPlantImage, setFetchingPlantImage] = useState(false);\n  const [autoPlantImageUrl, setAutoPlantImageUrl] = useState<string | null>(null);\n  \n  // Selected plant type from selector\n  const [selectedPlantType, setSelectedPlantType] = useState<PlantTypeInfo | null>(null);\n  const [speciesReferenceImages, setSpeciesReferenceImages] = useState<Record<string, string>>({});\n  \n  // Sensor data from Firebase\n  const [sensorData, setSensorData] = useState<SensorData | null>(null);\n  const [wateringDisabled, setWateringDisabled] = useState(false);\n\n  // Handle authentication state\n  useEffect(() => {\n    // Don't redirect immediately, let the component render the login prompt\n    // This is intentional to provide a better user experience with a message\n  }, [user, loading, setLocation]);\n  \n  // Subscribe to sensor data from Firebase\n  useEffect(() => {\n    const unsubscribe = subscribeSensorData((data) => {\n      setSensorData(data);\n    });\n    \n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  \n  // Load reference images for plants when profile is loaded\n  useEffect(() => {\n    if (profile?.plants && typeof profile.plants === 'object') {\n      const loadSpeciesImages = async () => {\n        // Create array of unique species names from profile.plants (which is an object of plants)\n        const uniqueSpecies: string[] = [];\n        \n        // Safe access to plants with a separate if check to satisfy TypeScript\n        const plantsObj = profile.plants;\n        if (plantsObj) {\n          const plantsList = Object.values(plantsObj);\n          plantsList.forEach((plant: UserPlant) => {\n            if (plant.species && !uniqueSpecies.includes(plant.species)) {\n              uniqueSpecies.push(plant.species);\n            }\n          });\n        }\n        \n        const newReferenceImages: Record<string, string> = {};\n        \n        for (const species of uniqueSpecies) {\n          if (!speciesReferenceImages[species]) {\n            try {\n              const imageUrl = await fetchPlantImage(species);\n              if (imageUrl) {\n                newReferenceImages[species] = imageUrl;\n              }\n            } catch (error) {\n              console.warn(`Could not fetch image for ${species}:`, error);\n            }\n          }\n        }\n        \n        if (Object.keys(newReferenceImages).length > 0) {\n          setSpeciesReferenceImages(prev => ({\n            ...prev,\n            ...newReferenceImages\n          }));\n        }\n      };\n      \n      loadSpeciesImages();\n    }\n  }, [profile?.plants]);\n  \n  // Open plant details dialog\n  const openPlantDetails = (plant: UserPlant) => {\n    setSelectedPlant(plant);\n    setPlantDetailsOpen(true);\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setNewPlant(prev => ({ ...prev, [name]: value }));\n  };\n  \n  // Handle plant type selection\n  const handlePlantTypeSelect = (plantType: PlantTypeInfo) => {\n    setSelectedPlantType(plantType);\n    setNewPlant(prev => ({\n      ...prev,\n      species: `${plantType.name} (${plantType.scientificName})`,\n      notes: prev.notes ? prev.notes : `Care instructions:\\n- Light: ${plantType.light} light\\n- Water: ${plantType.water} water needs\\n- Temperature: ${plantType.tempMin}°C to ${plantType.tempMax}°C\\n- Humidity: ${plantType.humidityMin}% to ${plantType.humidityMax}%\\n\\n${plantType.description}`\n    }));\n    \n    // Set auto plant image URL if available from plant type\n    if (plantType.imageUrl) {\n      setAutoPlantImageUrl(plantType.imageUrl);\n    }\n    \n    setShowPlantTypeSelector(false);\n  };\n\n  // Handle add plant\n  const handleAddPlant = async () => {\n    if (!user || !newPlant.name || !newPlant.species) return;\n    \n    setSaving(true);\n    try {\n      const plantId = `plant_${Date.now()}`;\n      const plant: UserPlant = {\n        id: plantId,\n        name: newPlant.name,\n        species: newPlant.species,\n        addedAt: Date.now(),\n        notes: newPlant.notes || undefined,\n        health: 'good'\n      };\n      \n      // First add the plant to the database\n      const success = await addUserPlant(user.uid, plant);\n      \n      if (success) {\n        // If we have a user-provided photo, upload it\n        if (newPlantPhoto) {\n          try {\n            const downloadUrl = await uploadPlantPhoto(user.uid, plantId, newPlantPhoto);\n            \n            // Update the plant with the image URL\n            await updatePlantData(user.uid, plantId, {\n              imageUrl: downloadUrl\n            });\n          } catch (uploadError) {\n            console.error('Error uploading plant photo:', uploadError);\n            // We don't fail the whole operation if just the photo upload fails\n            toast({\n              title: \"Photo upload failed\",\n              description: \"Your plant was added, but we couldn't upload the photo.\",\n              variant: \"destructive\"\n            });\n          }\n        } \n        // If we have an auto-generated image from the API, use that\n        else if (autoPlantImageUrl) {\n          try {\n            // Update the plant with the auto-fetched image URL\n            await updatePlantData(user.uid, plantId, {\n              imageUrl: autoPlantImageUrl\n            });\n          } catch (updateError) {\n            console.error('Error setting auto image URL:', updateError);\n            // We don't fail the operation if just the image setting fails\n          }\n        }\n        \n        await refreshProfile();\n        toast({\n          title: \"Plant added\",\n          description: `${newPlant.name} has been added to your collection`,\n        });\n        \n        // Reset everything\n        setNewPlant({ name: '', species: '', notes: '' });\n        setNewPlantPhoto(null);\n        setNewPlantPhotoPreview(null);\n        setNewPlantAnalysisResult(null);\n        setAutoPlantImageUrl(null);\n        setSelectedPlantType(null);\n        setShowAddPlant(false);\n      } else {\n        toast({\n          title: \"Failed to add plant\",\n          description: \"Please try again later\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error adding plant:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add plant\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n  // Open the photo upload dialog for a specific plant\n  const openPhotoDialog = (plant: UserPlant) => {\n    setSelectedPlant(plant);\n    setPhotoPreview(null);\n    setPhotoFile(null);\n    setAnalysisResult(null);\n    setPhotoDialogOpen(true);\n  };\n  \n  // Handle photo file selection\n  const handlePhotoSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    setPhotoFile(file);\n    \n    // Create a preview URL\n    const previewUrl = URL.createObjectURL(file);\n    setPhotoPreview(previewUrl);\n    \n    // Check if this was a direct capture/upload from the plant card\n    // If we have a selectedPlant, we should automatically process the photo\n    if (selectedPlant && !photoDialogOpen) {\n      try {\n        setUploadingPhoto(true);\n        \n        // Show a toast to indicate the upload is in progress\n        toast({\n          title: \"Uploading photo\",\n          description: \"Please wait while we upload and analyze your plant photo...\",\n        });\n        \n        // Upload the photo to Firebase Storage\n        const downloadUrl = await uploadPlantPhoto(user?.uid as string, selectedPlant.id, file);\n        \n        // Update the plant data with the image URL\n        await updatePlantData(user?.uid as string, selectedPlant.id, {\n          imageUrl: downloadUrl\n        });\n        \n        // Now analyze the photo with Gemini\n        setAnalyzingPhoto(true);\n        \n        // Convert the file to a base64 data URL for Gemini API\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = async () => {\n          try {\n            if (typeof reader.result === 'string') {\n              const analysis = await analyzePlantPhoto(reader.result);\n              \n              // If the confidence is medium or high, update the plant species\n              if (analysis.confidence !== 'low') {\n                await updatePlantData(user?.uid as string, selectedPlant.id, {\n                  species: analysis.species,\n                  notes: selectedPlant.notes \n                    ? `${selectedPlant.notes}\\n\\nAI Analysis: ${analysis.careInstructions}`\n                    : `AI Analysis: ${analysis.careInstructions}`,\n                  health: analysis.healthAssessment.toLowerCase().includes('good') \n                    ? 'good' \n                    : analysis.healthAssessment.toLowerCase().includes('excellent') \n                      ? 'excellent'\n                      : analysis.healthAssessment.toLowerCase().includes('poor')\n                        ? 'poor'\n                        : 'fair'\n                });\n                \n                toast({\n                  title: \"Plant identified\",\n                  description: `Your plant was identified as ${analysis.commonName} (${analysis.species})`,\n                });\n              } else {\n                toast({\n                  title: \"Plant analyzed\",\n                  description: \"We uploaded your photo but couldn't identify the plant with high confidence.\",\n                });\n              }\n              \n              // Refresh the profile to show updated data\n              await refreshProfile();\n            }\n          } catch (error) {\n            console.error('Error analyzing plant photo:', error);\n            toast({\n              title: \"Analysis failed\",\n              description: \"We uploaded your photo but couldn't analyze it. You can try again later.\",\n              variant: \"destructive\"\n            });\n          } finally {\n            setAnalyzingPhoto(false);\n            \n            // Reset file input so user can select the same file again if needed\n            if (fileInputRef.current) {\n              fileInputRef.current.value = '';\n            }\n          }\n        };\n        \n        reader.onerror = () => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to process the image for analysis\",\n            variant: \"destructive\"\n          });\n          setAnalyzingPhoto(false);\n        };\n        \n      } catch (error) {\n        console.error('Error uploading plant photo:', error);\n        toast({\n          title: \"Upload failed\",\n          description: \"Failed to upload your plant photo. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setUploadingPhoto(false);\n      }\n    }\n  };\n  \n  // Handle new plant photo selection during add plant flow\n  const handleNewPlantPhotoSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    setNewPlantPhoto(file);\n    \n    // Create a preview URL\n    const previewUrl = URL.createObjectURL(file);\n    setNewPlantPhotoPreview(previewUrl);\n    \n    // Analyze the photo to identify the plant\n    setAnalyzingNewPlantPhoto(true);\n    \n    try {\n      // Convert the file to a base64 data URL for Gemini API\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = async () => {\n        try {\n          if (typeof reader.result === 'string') {\n            const analysis = await analyzePlantPhoto(reader.result);\n            setNewPlantAnalysisResult(analysis);\n            \n            // If confidence is medium or high, suggest the species\n            if (analysis.confidence !== 'low') {\n              setNewPlant(prev => ({\n                ...prev,\n                species: analysis.species,\n                notes: prev.notes ? \n                  `${prev.notes}\\n\\nAI Analysis: ${analysis.careInstructions}` \n                  : `AI Analysis: ${analysis.careInstructions}`\n              }));\n              \n              // Try to fetch a real image of the identified plant\n              setFetchingPlantImage(true);\n              const imageUrl = await fetchPlantImage(analysis.commonName);\n              setFetchingPlantImage(false);\n              \n              if (imageUrl) {\n                setAutoPlantImageUrl(imageUrl);\n              }\n              \n              toast({\n                title: \"Plant identified\",\n                description: `Plant identified as ${analysis.commonName}`,\n              });\n            }\n          }\n        } catch (error) {\n          console.error('Error analyzing new plant photo:', error);\n          toast({\n            title: \"Analysis failed\",\n            description: \"We couldn't analyze your plant photo. Please try again.\",\n            variant: \"destructive\"\n          });\n        } finally {\n          setAnalyzingNewPlantPhoto(false);\n        }\n      };\n      \n      reader.onerror = () => {\n        setAnalyzingNewPlantPhoto(false);\n        toast({\n          title: \"Error\",\n          description: \"Failed to process the image for analysis\",\n          variant: \"destructive\"\n        });\n      };\n    } catch (error) {\n      console.error('Error processing plant photo:', error);\n      setAnalyzingNewPlantPhoto(false);\n    }\n  };\n  \n  // Handle plant deletion\n  const handleDeletePlant = async (plantId: string) => {\n    if (!user) return;\n    \n    if (!confirm(\"Are you sure you want to delete this plant?\")) return;\n    \n    try {\n      // Create an updated plants object without the deleted plant\n      if (profile && profile.plants) {\n        // Create a new object without the deleted plant\n        const updatedPlants: Record<string, UserPlant> = {};\n        \n        // Copy all plants except the one to delete\n        Object.entries(profile.plants).forEach(([id, plant]) => {\n          if (id !== plantId) {\n            updatedPlants[id] = plant;\n          }\n        });\n        \n        // Update Firebase with the new plants object\n        const userRef = ref(getDatabase(), `users/${user.uid}/plants`);\n        await set(userRef, updatedPlants);\n        \n        // Refresh the profile\n        await refreshProfile();\n        \n        toast({\n          title: \"Plant deleted\",\n          description: \"The plant has been removed from your collection\",\n        });\n      }\n    } catch (error) {\n      console.error('Error deleting plant:', error);\n      toast({\n        title: \"Delete failed\",\n        description: \"Failed to delete the plant. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n  \n  // Handle photo upload and analysis\n  const handlePhotoUpload = async () => {\n    if (!user || !selectedPlant || !photoFile) return;\n    \n    try {\n      setUploadingPhoto(true);\n      \n      // Upload the photo to Firebase Storage\n      const downloadUrl = await uploadPlantPhoto(user.uid, selectedPlant.id, photoFile);\n      \n      // Update the plant data with the image URL\n      await updatePlantData(user.uid, selectedPlant.id, {\n        imageUrl: downloadUrl\n      });\n      \n      toast({\n        title: \"Photo uploaded\",\n        description: \"Your plant photo has been successfully uploaded.\",\n      });\n      \n      // Now analyze the photo with Gemini\n      setAnalyzingPhoto(true);\n      \n      // Convert the file to a base64 data URL for Gemini API\n      const reader = new FileReader();\n      reader.readAsDataURL(photoFile);\n      reader.onload = async () => {\n        try {\n          if (typeof reader.result === 'string') {\n            const analysis = await analyzePlantPhoto(reader.result);\n            setAnalysisResult(analysis);\n            \n            // If the confidence is medium or high, update the plant species\n            if (analysis.confidence !== 'low') {\n              await updatePlantData(user.uid, selectedPlant.id, {\n                species: analysis.species,\n                notes: selectedPlant.notes \n                  ? `${selectedPlant.notes}\\n\\nAI Analysis: ${analysis.careInstructions}`\n                  : `AI Analysis: ${analysis.careInstructions}`,\n                health: analysis.healthAssessment.toLowerCase().includes('good') \n                  ? 'good' \n                  : analysis.healthAssessment.toLowerCase().includes('excellent') \n                    ? 'excellent'\n                    : analysis.healthAssessment.toLowerCase().includes('poor')\n                      ? 'poor'\n                      : 'fair'\n              });\n              \n              toast({\n                title: \"Plant identified\",\n                description: `Your plant was identified as ${analysis.commonName} (${analysis.species})`,\n              });\n              \n              // Refresh the profile to show updated data\n              await refreshProfile();\n            }\n          }\n        } catch (error) {\n          console.error('Error analyzing plant photo:', error);\n          toast({\n            title: \"Analysis failed\",\n            description: \"We couldn't analyze your plant photo. Please try again.\",\n            variant: \"destructive\"\n          });\n        } finally {\n          setAnalyzingPhoto(false);\n        }\n      };\n      \n      reader.onerror = () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to process the image for analysis\",\n          variant: \"destructive\"\n        });\n        setAnalyzingPhoto(false);\n      };\n      \n    } catch (error) {\n      console.error('Error uploading plant photo:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload your plant photo. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploadingPhoto(false);\n    }\n  };\n\n  // Calculate days since last watered\n  const getDaysSinceWatered = (lastWatered?: number) => {\n    if (!lastWatered) return 'Never';\n    const days = Math.floor((Date.now() - lastWatered) / (1000 * 60 * 60 * 24));\n    return days === 0 ? 'Today' : `${days} days ago`;\n  };\n\n  // Get health badge color based on plant health\n  const getHealthColor = (health?: string) => {\n    switch (health) {\n      case 'excellent':\n        return 'bg-green-500';\n      case 'good':\n        return 'bg-green-400';\n      case 'fair':\n        return 'bg-yellow-500';\n      case 'poor':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen font-sans transition-colors duration-300 ease-out bg-gradient-to-br from-slate-50 to-white text-slate-900 dark:from-slate-900 dark:to-slate-800 dark:text-white\">\n        <Header />\n        <div className=\"container mx-auto p-4 flex items-center justify-center h-[80vh]\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-10 w-10 animate-spin mx-auto text-green-500\" />\n            <h3 className=\"mt-4 text-xl\">Loading your plants...</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  // Show a login prompt if user is not authenticated\n  if (!user) {\n    return (\n      <div className=\"min-h-screen font-sans transition-colors duration-300 ease-out bg-gradient-to-br from-slate-50 to-white text-slate-900 dark:from-slate-900 dark:to-slate-800 dark:text-white\">\n        <Header />\n        <div className=\"container mx-auto p-4 flex items-center justify-center h-[80vh]\">\n          <div className=\"max-w-md bg-white dark:bg-slate-800 rounded-xl shadow-lg overflow-hidden md:max-w-2xl p-8 text-center\">\n            <div className=\"mb-6\">\n              <Leaf className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h1 className=\"text-2xl font-bold mb-3\">Please Log In</h1>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                You need to log in to check your plants' health and manage your collection.\n              </p>\n            </div>\n            <Button \n              onClick={() => setLocation('/login')}\n              className=\"bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-lg\"\n            >\n              Go to Login\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const userPlants = profile?.plants ? Object.values(profile.plants) : [];\n\n  return (\n    <div className=\"min-h-screen font-sans transition-colors duration-300 ease-out bg-gradient-to-br from-slate-50 to-white text-slate-900 dark:from-slate-900 dark:to-slate-800 dark:text-white\">\n      {/* Hidden file input for direct photo upload from plant cards */}\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        className=\"hidden\"\n        accept=\"image/*\"\n        capture=\"environment\"\n        onChange={handlePhotoSelect}\n      />\n      \n      <main className=\"container mx-auto px-4 py-6 md:py-10 pb-24\">\n        <motion.div\n          initial={{ opacity: 0, y: 15 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex flex-col justify-center items-center gap-4 mb-6\">\n            <motion.div \n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5 }}\n              className=\"text-center\"\n            >\n              <h1 className=\"text-3xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-green-600 to-emerald-500 dark:from-green-400 dark:to-emerald-300\">My Plants</h1>\n              <div className=\"h-1 w-16 bg-gradient-to-r from-green-500 to-emerald-400 rounded-full mx-auto mt-2 mb-4\"></div>\n            </motion.div>\n            \n            <Dialog open={showAddPlant} onOpenChange={setShowAddPlant}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-green-600 hover:bg-green-700\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Plant\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[425px]\">\n                <DialogHeader>\n                  <DialogTitle>Add a new plant</DialogTitle>\n                  <DialogDescription>\n                    Enter the details of your plant to add it to your collection\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"name\">Plant Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"E.g., Living Room Fern\"\n                      value={newPlant.name}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"species\">Plant Species</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"species\"\n                        name=\"species\"\n                        placeholder=\"E.g., Boston Fern\"\n                        value={newPlant.species}\n                        onChange={handleInputChange}\n                        className=\"flex-1\"\n                      />\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setShowPlantTypeSelector(true)}\n                        className=\"whitespace-nowrap\"\n                      >\n                        Choose Type\n                      </Button>\n                    </div>\n                    {selectedPlantType && (\n                      <div className=\"text-sm text-gray-500 mt-1 flex items-center\">\n                        <Leaf className=\"h-3 w-3 mr-1 text-green-500\" />\n                        Selected: {selectedPlantType.name} ({selectedPlantType.scientificName})\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"photo\">Plant Photo</Label>\n                    {newPlantPhotoPreview ? (\n                      <div className=\"relative w-full h-48 rounded-md overflow-hidden\">\n                        <img \n                          src={newPlantPhotoPreview} \n                          alt=\"Plant preview\" \n                          className=\"w-full h-full object-cover\"\n                        />\n                        {newPlantAnalysisResult && (\n                          <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white p-2 text-sm\">\n                            <p>Detected: {newPlantAnalysisResult.commonName}</p>\n                          </div>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"absolute top-2 right-2 bg-white dark:bg-black bg-opacity-70 dark:bg-opacity-70\"\n                          onClick={() => {\n                            setNewPlantPhotoPreview(null);\n                            setNewPlantPhoto(null);\n                            setNewPlantAnalysisResult(null);\n                            if (newPlantPhotoRef.current) {\n                              newPlantPhotoRef.current.value = '';\n                            }\n                          }}\n                        >\n                          Change\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-4 text-center hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\">\n                        <div className=\"flex flex-col items-center justify-center space-y-2\">\n                          <div className=\"flex space-x-4\">\n                            <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => newPlantPhotoRef.current?.click()}>\n                              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-1\">\n                                <Upload className=\"h-6 w-6 text-green-500\" />\n                              </div>\n                              <span className=\"text-xs font-medium\">Upload</span>\n                            </div>\n                            \n                            <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => {\n                              if (newPlantPhotoRef.current) {\n                                newPlantPhotoRef.current.capture = \"environment\";\n                                newPlantPhotoRef.current.click();\n                              }\n                            }}>\n                              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-1\">\n                                <Camera className=\"h-6 w-6 text-blue-500\" />\n                              </div>\n                              <span className=\"text-xs font-medium\">Camera</span>\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                            Upload or take a photo for AI identification\n                          </p>\n                        </div>\n                        <input\n                          type=\"file\"\n                          ref={newPlantPhotoRef}\n                          className=\"hidden\"\n                          accept=\"image/*\"\n                          capture=\"environment\"\n                          onChange={handleNewPlantPhotoSelect}\n                        />\n                      </div>\n                    )}\n                    {analyzingNewPlantPhoto && (\n                      <div className=\"flex items-center justify-center py-2 text-sm text-gray-500\">\n                        <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                        Analyzing photo...\n                      </div>\n                    )}\n                    {autoPlantImageUrl && (\n                      <div className=\"flex items-center justify-between mt-1 bg-green-50 dark:bg-green-900/20 px-2 py-1 rounded-md\">\n                        <span className=\"text-xs text-green-700 dark:text-green-400\">Reference image added from plant database</span>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\" \n                          onClick={() => setAutoPlantImageUrl(null)}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                    <Input\n                      id=\"notes\"\n                      name=\"notes\"\n                      placeholder=\"Any special care instructions?\"\n                      value={newPlant.notes}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowAddPlant(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleAddPlant}\n                    disabled={!newPlant.name || !newPlant.species || saving}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    {saving ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                    {saving ? \"Saving...\" : \"Add Plant\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n          \n          {userPlants.length === 0 ? (\n            <Card className=\"border border-dashed border-gray-300 dark:border-gray-600 bg-transparent\">\n              <CardContent className=\"p-8 flex flex-col items-center justify-center text-center\">\n                <div className=\"h-16 w-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-4\">\n                  <Leaf className=\"h-8 w-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-medium mb-2\">No plants yet</h3>\n                <p className=\"text-gray-500 dark:text-gray-400 mb-4 max-w-md\">\n                  Add your first plant to start monitoring its health and get personalized care recommendations\n                </p>\n                <Button\n                  onClick={() => setShowAddPlant(true)}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Your First Plant\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"flex justify-center\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n                {userPlants.map((plant) => (\n                  <motion.div\n                    key={plant.id}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    whileHover={{ y: -5, scale: 1.02 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <Card \n                      className=\"overflow-hidden border-0 rounded-xl shadow-lg bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm cursor-pointer group aspect-square\"\n                      onClick={() => openPlantDetails(plant)}\n                      style={{\n                        boxShadow: \"0 10px 25px -5px rgba(0, 0, 0, 0.05), 0 8px 10px -6px rgba(0, 0, 0, 0.05)\"\n                      }}\n                    >\n                      <div className=\"h-2 bg-gradient-to-r from-green-400 to-emerald-500 dark:from-green-500 dark:to-emerald-400\" />\n                      {plant.imageUrl ? (\n                        <div className=\"w-full h-3/5 overflow-hidden relative\">\n                          <img \n                            src={plant.imageUrl} \n                            alt={plant.name} \n                            className=\"w-full h-full object-cover transition-transform group-hover:scale-105\" \n                          />\n                          <div className=\"absolute top-2 right-2 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm px-2 py-1 rounded-full text-xs font-medium\">\n                            {plant.health === 'excellent' ? '⭐ Excellent' : \n                             plant.health === 'good' ? '✓ Good' : \n                             plant.health === 'fair' ? '⚠️ Fair' : '⚠️ Poor'}\n                          </div>\n                        {/* Quick camera/upload buttons - shown on hover */}\n                        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100\">\n                          <div className=\"flex gap-2\">\n                            <Button \n                              size=\"sm\"\n                              variant=\"secondary\"\n                              className=\"bg-white text-black dark:bg-slate-800 dark:text-white h-10 w-10 rounded-full p-0 shadow-lg\"\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent opening details modal\n                                if (fileInputRef.current) {\n                                  setSelectedPlant(plant);\n                                  fileInputRef.current.removeAttribute('capture');\n                                  fileInputRef.current.click();\n                                }\n                              }}\n                            >\n                              <Upload className=\"h-5 w-5\" />\n                            </Button>\n                            <Button \n                              size=\"sm\"\n                              variant=\"secondary\" \n                              className=\"bg-white text-black dark:bg-slate-800 dark:text-white h-10 w-10 rounded-full p-0 shadow-lg\"\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent opening details modal\n                                if (fileInputRef.current) {\n                                  setSelectedPlant(plant);\n                                  fileInputRef.current.setAttribute('capture', 'environment');\n                                  fileInputRef.current.click();\n                                }\n                              }}\n                            >\n                              <Camera className=\"h-5 w-5\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"h-40 w-full bg-gray-100 dark:bg-gray-800 flex flex-col items-center justify-center relative\">\n                        {speciesReferenceImages[plant.species] ? (\n                          <div className=\"relative w-full h-full\">\n                            <img \n                              src={speciesReferenceImages[plant.species]} \n                              alt={plant.species} \n                              className=\"w-full h-full object-cover opacity-60\"\n                            />\n                            <div className=\"absolute inset-0 bg-black bg-opacity-30 flex flex-col items-center justify-center\">\n                              <p className=\"text-white text-sm font-medium mb-1 bg-black/50 px-2 py-1 rounded-md\">Reference Image</p>\n                              <p className=\"text-white text-xs bg-black/50 px-2 py-1 rounded-md\">Upload your own photo</p>\n                            </div>\n                          </div>\n                        ) : (\n                          <>\n                            <Camera className=\"h-8 w-8 text-gray-400 mb-2\" />\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">No image yet</p>\n                          </>\n                        )}\n                        \n                        <div className=\"absolute bottom-3 left-0 right-0 flex justify-center gap-3\">\n                          <Button \n                            size=\"sm\"\n                            variant=\"outline\" \n                            className=\"bg-white/90 dark:bg-slate-800/90\"\n                            onClick={(e) => {\n                              e.stopPropagation(); // Prevent opening details\n                              if (fileInputRef.current) {\n                                setSelectedPlant(plant);\n                                fileInputRef.current.removeAttribute('capture');\n                                fileInputRef.current.click();\n                              }\n                            }}\n                          >\n                            <Upload className=\"h-3.5 w-3.5 mr-1\" />\n                            Gallery\n                          </Button>\n                          <Button \n                            size=\"sm\"\n                            variant=\"outline\" \n                            className=\"bg-white/90 dark:bg-slate-800/90\"\n                            onClick={(e) => {\n                              e.stopPropagation(); // Prevent opening details\n                              if (fileInputRef.current) {\n                                setSelectedPlant(plant);\n                                fileInputRef.current.setAttribute('capture', 'environment');\n                                fileInputRef.current.click();\n                              }\n                            }}\n                          >\n                            <Camera className=\"h-3.5 w-3.5 mr-1\" />\n                            Camera\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                    <CardHeader className=\"pb-2\">\n                      <div className=\"flex justify-between items-start\">\n                        <CardTitle className=\"text-xl\">{plant.name}</CardTitle>\n                        <Badge className={getHealthColor(plant.health)}>\n                          {plant.health || 'Unknown'}\n                        </Badge>\n                      </div>\n                      <CardDescription>{plant.species}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center text-sm\">\n                          <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                          <span>Added {new Date(plant.addedAt).toLocaleDateString()}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center text-sm\">\n                          <Droplet className=\"h-4 w-4 mr-2 text-blue-500\" />\n                          <span>Last watered: {getDaysSinceWatered(plant.lastWatered)}</span>\n                        </div>\n                        \n                        {plant.notes && (\n                          <div \n                            className=\"bg-gray-50 dark:bg-gray-700/50 p-3 rounded-md text-sm mt-3 cursor-pointer relative overflow-hidden\" \n                            style={{ maxHeight: '60px' }}\n                            onClick={(e) => {\n                              const target = e.currentTarget;\n                              if (target.style.maxHeight === '60px') {\n                                target.style.maxHeight = '1000px';\n                              } else {\n                                target.style.maxHeight = '60px';\n                              }\n                            }}\n                          >\n                            <div className=\"relative\">\n                              {plant.notes}\n                              <div className=\"absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-gray-50 to-transparent dark:from-gray-700/50\"></div>\n                            </div>\n                            <div className=\"flex justify-center mt-1\">\n                              <span className=\"text-xs text-gray-500 dark:text-gray-400\">Click to expand</span>\n                            </div>\n                          </div>\n                        )}\n                        \n                        <div className=\"pt-2 flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"flex-1 text-blue-600 border-blue-200 hover:bg-blue-50 dark:text-blue-400 dark:border-blue-900 dark:hover:bg-blue-900/20\"\n                            disabled={wateringDisabled}\n                            onClick={(e) => {\n                              e.stopPropagation(); // Prevent opening details modal\n                              \n                              // First, activate the watering system in Firebase\n                              if (user && plant) {\n                                setWateringDisabled(true);\n                                \n                                // Activate the watering system\n                                setWateringActive(true)\n                                  .then(() => {\n                                    toast({\n                                      title: \"Watering...\",\n                                      description: `Watering system activated for ${plant.name}.`\n                                    });\n                                    \n                                    // After 3 seconds, turn off the watering system\n                                    setTimeout(() => {\n                                      setWateringActive(false)\n                                        .then(() => {\n                                          console.log('Watering system deactivated');\n                                          \n                                          // Now update the plant's last watered timestamp\n                                          return updatePlantData(user.uid, plant.id, {\n                                            lastWatered: Date.now()\n                                          });\n                                        })\n                                        .then(() => {\n                                          refreshProfile();\n                                          toast({\n                                            title: \"Plant watered\",\n                                            description: `${plant.name} has been marked as watered.`\n                                          });\n                                          \n                                          // Add a cooldown to prevent button spamming\n                                          setTimeout(() => {\n                                            setWateringDisabled(false);\n                                          }, 5000);\n                                        })\n                                        .catch(error => {\n                                          console.error('Error during watering process:', error);\n                                          setWateringDisabled(false);\n                                          toast({\n                                            title: \"Watering failed\",\n                                            description: \"There was an error with the watering system.\",\n                                            variant: \"destructive\"\n                                          });\n                                        });\n                                    }, 3000);\n                                  })\n                                  .catch(error => {\n                                    console.error('Failed to activate watering system:', error);\n                                    setWateringDisabled(false);\n                                    toast({\n                                      title: \"Watering failed\",\n                                      description: \"Could not activate the watering system.\",\n                                      variant: \"destructive\"\n                                    });\n                                  });\n                              }\n                            }}\n                          >\n                            <Droplet className=\"h-3.5 w-3.5 mr-1\" />\n                            Water\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"flex-1 dark:text-gray-300\"\n                            onClick={(e) => {\n                              e.stopPropagation(); // Prevent opening details modal\n                              openPhotoDialog(plant);\n                            }}\n                          >\n                            <Camera className=\"h-3.5 w-3.5 mr-1\" />\n                            Photo\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"text-red-600 border-red-200 hover:bg-red-50 dark:text-red-400 dark:border-red-900/30 dark:hover:bg-red-900/20 px-1\"\n                            onClick={(e) => {\n                              e.stopPropagation(); // Prevent opening details modal\n                              handleDeletePlant(plant.id);\n                            }}\n                          >\n                            <Trash2 className=\"h-3.5 w-3.5\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          )}\n          </div>\n        </motion.div>\n      </main>\n      \n      {/* Plant Type Selector Dialog */}\n      <Dialog open={showPlantTypeSelector} onOpenChange={setShowPlantTypeSelector}>\n        <DialogContent className=\"sm:max-w-[80vw] md:max-w-[700px] p-0\">\n          <PlantTypeSelector \n            onSelect={handlePlantTypeSelect}\n            onClose={() => setShowPlantTypeSelector(false)}\n          />\n        </DialogContent>\n      </Dialog>\n      \n      {/* Plant Photo Upload Dialog */}\n      <Dialog open={photoDialogOpen} onOpenChange={setPhotoDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Upload Plant Photo</DialogTitle>\n            <DialogDescription>\n              Upload a photo of your plant for identification and care advice\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Tabs defaultValue=\"upload\" className=\"mt-4\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"upload\">Upload Photo</TabsTrigger>\n              <TabsTrigger value=\"result\" disabled={!analysisResult}>Analysis Result</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"upload\" className=\"mt-4 space-y-4\">\n              {photoPreview ? (\n                <div className=\"relative w-full h-64 rounded-md overflow-hidden\">\n                  <img \n                    src={photoPreview} \n                    alt=\"Plant preview\" \n                    className=\"w-full h-full object-cover\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2 bg-white dark:bg-black bg-opacity-70 dark:bg-opacity-70\"\n                    onClick={() => {\n                      setPhotoPreview(null);\n                      setPhotoFile(null);\n                      if (fileInputRef.current) {\n                        fileInputRef.current.value = '';\n                      }\n                    }}\n                  >\n                    Change\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\">\n                  <div className=\"flex flex-col items-center justify-center space-y-3\">\n                    <div className=\"flex space-x-4\">\n                      <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => fileInputRef.current?.click()}>\n                        <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-2\">\n                          <Upload className=\"h-8 w-8 text-green-500\" />\n                        </div>\n                        <span className=\"text-sm font-medium\">Upload</span>\n                      </div>\n                      \n                      <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => {\n                        if (fileInputRef.current) {\n                          fileInputRef.current.capture = \"environment\";\n                          fileInputRef.current.click();\n                        }\n                      }}>\n                        <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-2\">\n                          <Camera className=\"h-8 w-8 text-blue-500\" />\n                        </div>\n                        <span className=\"text-sm font-medium\">Camera</span>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-4\">\n                      Upload or take a photo of your plant for AI analysis\n                    </p>\n                  </div>\n                  {/* File input is now located in the main component */}\n                </div>\n              )}\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setPhotoDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handlePhotoUpload}\n                  disabled={!photoFile || uploadingPhoto || analyzingPhoto}\n                  className=\"bg-green-600 hover:bg-green-700 relative\"\n                >\n                  {(uploadingPhoto || analyzingPhoto) && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  {uploadingPhoto \n                    ? \"Uploading...\" \n                    : analyzingPhoto \n                      ? \"Analyzing...\" \n                      : \"Upload & Analyze\"\n                  }\n                </Button>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"result\" className=\"mt-4 space-y-4\">\n              {analysisResult && (\n                <div className=\"space-y-4\">\n                  <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-md\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Badge className={\n                        analysisResult.confidence === 'high' \n                          ? 'bg-green-500' \n                          : analysisResult.confidence === 'medium' \n                            ? 'bg-yellow-500' \n                            : 'bg-red-500'\n                      }>\n                        {analysisResult.confidence.charAt(0).toUpperCase() + analysisResult.confidence.slice(1)} confidence\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid gap-3\">\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Species</h4>\n                        <p className=\"text-lg font-medium\">{analysisResult.species}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Common Name</h4>\n                        <p className=\"text-lg font-medium\">{analysisResult.commonName}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Health Assessment</h4>\n                        <p className=\"text-lg font-medium\">{analysisResult.healthAssessment}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Care Instructions</h4>\n                        <p className=\"text-md\">{analysisResult.careInstructions}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setPhotoDialogOpen(false)}\n                    >\n                      Close\n                    </Button>\n                    {analysisResult.confidence !== 'low' && selectedPlant && (\n                      <Button\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        onClick={async () => {\n                          if (!user || !selectedPlant) return;\n                          \n                          try {\n                            await updatePlantData(user.uid, selectedPlant.id, {\n                              species: analysisResult.species,\n                              notes: selectedPlant.notes \n                                ? `${selectedPlant.notes}\\n\\nAI Analysis: ${analysisResult.careInstructions}` \n                                : `AI Analysis: ${analysisResult.careInstructions}`\n                            });\n                            \n                            toast({\n                              title: \"Plant updated\",\n                              description: \"Your plant information has been updated with the analysis results.\"\n                            });\n                            \n                            await refreshProfile();\n                            setPhotoDialogOpen(false);\n                          } catch (error) {\n                            console.error('Error updating plant:', error);\n                            toast({\n                              title: \"Update failed\",\n                              description: \"Failed to update plant information.\",\n                              variant: \"destructive\"\n                            });\n                          }\n                        }}\n                      >\n                        <Check className=\"mr-2 h-4 w-4\" />\n                        Apply Changes\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Plant Details Dialog with Metrics */}\n      <Dialog open={plantDetailsOpen} onOpenChange={setPlantDetailsOpen}>\n        <DialogContent className=\"sm:max-w-[700px]\">\n          {selectedPlant && (\n            <>\n              <DialogHeader>\n                <div className=\"flex items-center justify-between\">\n                  <DialogTitle className=\"text-2xl font-bold\">{selectedPlant.name}</DialogTitle>\n                  <Badge className={getHealthColor(selectedPlant.health)}>\n                    {selectedPlant.health || 'Unknown'}\n                  </Badge>\n                </div>\n                <DialogDescription className=\"text-lg\">{selectedPlant.species}</DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <div className=\"aspect-square overflow-hidden rounded-lg\">\n                  {selectedPlant.imageUrl ? (\n                    <img \n                      src={selectedPlant.imageUrl} \n                      alt={selectedPlant.name} \n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center\">\n                      <Leaf className=\"h-20 w-20 text-gray-300 dark:text-gray-600\" />\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n                    <h3 className=\"text-lg font-medium mb-3\">Current Metrics</h3>\n                    \n                    {sensorData ? (\n                      <div className=\"space-y-3\">\n                        {/* Temperature */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"h-10 w-10 rounded-full bg-red-100 dark:bg-red-900/30 flex items-center justify-center mr-3\">\n                              <svg className=\"h-5 w-5 text-red-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                <path d=\"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z\" />\n                              </svg>\n                            </div>\n                            <div>\n                              <div className=\"text-sm text-gray-500 dark:text-gray-400\">Temperature</div>\n                              <div className=\"font-medium\">{sensorData.temperature}°C</div>\n                            </div>\n                          </div>\n                          <Badge \n                            className={\n                              sensorData.temperature > 30 ? \"bg-red-500\" : \n                              sensorData.temperature < 10 ? \"bg-blue-500\" : \n                              \"bg-green-500\"\n                            }\n                          >\n                            {sensorData.temperature > 30 ? \"High\" : \n                             sensorData.temperature < 10 ? \"Low\" : \n                             \"Optimal\"}\n                          </Badge>\n                        </div>\n                        \n                        {/* Humidity */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mr-3\">\n                              <svg className=\"h-5 w-5 text-blue-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                <path d=\"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z\" />\n                              </svg>\n                            </div>\n                            <div>\n                              <div className=\"text-sm text-gray-500 dark:text-gray-400\">Humidity</div>\n                              <div className=\"font-medium\">{sensorData.humidity}%</div>\n                            </div>\n                          </div>\n                          <Badge \n                            className={\n                              sensorData.humidity > 70 ? \"bg-blue-500\" : \n                              sensorData.humidity < 30 ? \"bg-yellow-500\" : \n                              \"bg-green-500\"\n                            }\n                          >\n                            {sensorData.humidity > 70 ? \"High\" : \n                             sensorData.humidity < 30 ? \"Low\" : \n                             \"Optimal\"}\n                          </Badge>\n                        </div>\n                        \n                        {/* Light */}\n                        {sensorData.light !== undefined && (\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center\">\n                              <div className=\"h-10 w-10 rounded-full bg-yellow-100 dark:bg-yellow-900/30 flex items-center justify-center mr-3\">\n                                <svg className=\"h-5 w-5 text-yellow-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                  <circle cx=\"12\" cy=\"12\" r=\"5\" />\n                                  <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\n                                  <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\n                                  <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\n                                  <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\n                                  <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\n                                  <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\n                                  <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\n                                  <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\n                                </svg>\n                              </div>\n                              <div>\n                                <div className=\"text-sm text-gray-500 dark:text-gray-400\">Light</div>\n                                <div className=\"font-medium\">{sensorData.light}%</div>\n                              </div>\n                            </div>\n                            <Badge \n                              className={\n                                sensorData.light > 80 ? \"bg-orange-500\" : \n                                sensorData.light < 30 ? \"bg-indigo-500\" : \n                                \"bg-green-500\"\n                              }\n                            >\n                              {sensorData.light > 80 ? \"Bright\" : \n                               sensorData.light < 30 ? \"Low\" : \n                               \"Good\"}\n                            </Badge>\n                          </div>\n                        )}\n                        \n                        {/* Water Status */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center mr-3\">\n                              <Droplet className=\"h-5 w-5 text-blue-500\" />\n                            </div>\n                            <div>\n                              <div className=\"text-sm text-gray-500 dark:text-gray-400\">Last Watered</div>\n                              <div className=\"font-medium\">{getDaysSinceWatered(selectedPlant.lastWatered)}</div>\n                            </div>\n                          </div>\n                          <Badge \n                            className={\n                              !selectedPlant.lastWatered ? \"bg-red-500\" :\n                              (Date.now() - selectedPlant.lastWatered) > (1000 * 60 * 60 * 24 * 5) ? \"bg-yellow-500\" : \n                              \"bg-green-500\"\n                            }\n                          >\n                            {!selectedPlant.lastWatered ? \"Never Watered\" :\n                             (Date.now() - selectedPlant.lastWatered) > (1000 * 60 * 60 * 24 * 5) ? \"Needs Water\" : \n                             \"Good\"}\n                          </Badge>\n                        </div>\n                        \n                        {/* NPK Levels (simulated for demo) */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"h-10 w-10 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center mr-3\">\n                              <Leaf className=\"h-5 w-5 text-green-500\" />\n                            </div>\n                            <div>\n                              <div className=\"text-sm text-gray-500 dark:text-gray-400\">Nutrient Levels</div>\n                              <div className=\"font-medium\">N: Medium, P: High, K: Low</div>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-yellow-500\">\n                            Needs Potassium\n                          </Badge>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex justify-center items-center h-40\">\n                        <Loader2 className=\"h-8 w-8 animate-spin text-gray-400\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Health Assessment */}\n                  <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n                    <h3 className=\"text-lg font-medium mb-1\">AI Health Assessment</h3>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 mb-2\">\n                      Based on current environmental conditions\n                    </p>\n                    \n                    <div className=\"text-sm mt-2\">\n                      {sensorData ? (\n                        <div>\n                          {sensorData.temperature > 30 && (\n                            <div className=\"flex items-start mb-2\">\n                              <AlertCircle className=\"h-4 w-4 text-red-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>Temperature is too high, consider moving to a cooler location.</p>\n                            </div>\n                          )}\n                          {sensorData.temperature < 10 && (\n                            <div className=\"flex items-start mb-2\">\n                              <AlertCircle className=\"h-4 w-4 text-blue-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>Temperature is too low, consider moving to a warmer location.</p>\n                            </div>\n                          )}\n                          {sensorData.humidity < 30 && (\n                            <div className=\"flex items-start mb-2\">\n                              <AlertCircle className=\"h-4 w-4 text-yellow-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>Humidity is too low, consider misting the plant or using a humidifier.</p>\n                            </div>\n                          )}\n                          {sensorData.humidity > 70 && (\n                            <div className=\"flex items-start mb-2\">\n                              <AlertCircle className=\"h-4 w-4 text-blue-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>Humidity is high, ensure good air circulation to prevent fungal issues.</p>\n                            </div>\n                          )}\n                          {sensorData.light !== undefined && sensorData.light < 30 && (\n                            <div className=\"flex items-start mb-2\">\n                              <AlertCircle className=\"h-4 w-4 text-indigo-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>Light levels are low, consider moving to a brighter location.</p>\n                            </div>\n                          )}\n                          {selectedPlant.lastWatered && (Date.now() - selectedPlant.lastWatered) > (1000 * 60 * 60 * 24 * 5) && (\n                            <div className=\"flex items-start mb-2\">\n                              <AlertCircle className=\"h-4 w-4 text-yellow-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>Plant hasn't been watered in over 5 days, consider watering soon.</p>\n                            </div>\n                          )}\n                          \n                          {/* If everything is optimal */}\n                          {sensorData.temperature >= 10 && sensorData.temperature <= 30 &&\n                           sensorData.humidity >= 30 && sensorData.humidity <= 70 &&\n                           (sensorData.light === undefined || sensorData.light >= 30) &&\n                           (selectedPlant.lastWatered && (Date.now() - selectedPlant.lastWatered) <= (1000 * 60 * 60 * 24 * 5)) && (\n                            <div className=\"flex items-start mb-2\">\n                              <Check className=\"h-4 w-4 text-green-500 mt-0.5 mr-2 flex-shrink-0\" />\n                              <p>All metrics are within optimal ranges. Your plant is healthy!</p>\n                            </div>\n                          )}\n                        </div>\n                      ) : (\n                        <div className=\"flex justify-center items-center h-20\">\n                          <Loader2 className=\"h-6 w-6 animate-spin text-gray-400\" />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <DialogFooter className=\"mt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setPlantDetailsOpen(false)}\n                >\n                  Close\n                </Button>\n                <Button\n                  className=\"bg-green-600 hover:bg-green-700\"\n                  onClick={() => {\n                    // Mark as watered\n                    if (user && selectedPlant) {\n                      updatePlantData(user.uid, selectedPlant.id, {\n                        lastWatered: Date.now()\n                      }).then(() => {\n                        refreshProfile();\n                        toast({\n                          title: \"Plant watered\",\n                          description: `${selectedPlant.name} has been marked as watered.`\n                        });\n                      });\n                    }\n                  }}\n                >\n                  <Droplet className=\"mr-2 h-4 w-4\" />\n                  Mark as Watered\n                </Button>\n              </DialogFooter>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":73925},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport PlantChat from \"@/pages/PlantChat\";\nimport Login from \"@/pages/Login\";\nimport MyPlants from \"@/pages/MyPlants\";\nimport Settings from \"@/pages/Settings\";\nimport { ThemeProvider } from \"./lib/ThemeProvider\";\nimport { AuthProvider } from \"./lib/AuthProvider\";\nimport { ChatBubble } from \"@/components/ChatBubble\";\nimport { FloatingNavigation } from \"@/components/FloatingNavigation\";\nimport { DataCollector } from \"@/components/DataCollector\";\nimport { TimestampDataCollector } from \"@/components/TimestampDataCollector\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/chat\" component={PlantChat} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/my-plants\" component={MyPlants} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <div className=\"fitness-app-bg min-h-screen pb-24\">\n            {/* The fitness-app-bg class now handles both light and dark modes properly */}\n            <Router />\n            <ChatBubble />\n            <FloatingNavigation />\n            <Toaster />\n            {/* Data collectors run in the background with no UI */}\n            <DataCollector />\n            <TimestampDataCollector />\n          </div>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1811},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Light mode - soft pastel beige colors */\n    --background: 40 30% 96%;\n    --foreground: 20 10% 20%;\n    \n    --card: 40 30% 98%;\n    --card-foreground: 20 10% 20%;\n    \n    --popover: 40 30% 98%;\n    --popover-foreground: 20 10% 20%;\n    \n    --primary: 142 50% 45%;\n    --primary-foreground: 40 30% 98%;\n    \n    --secondary: 40 30% 94%;\n    --secondary-foreground: 20 10% 20%;\n    \n    --muted: 40 20% 92%;\n    --muted-foreground: 20 10% 40%;\n    \n    --accent: 142 40% 45%;\n    --accent-foreground: 40 30% 98%;\n    \n    --destructive: 0 70% 60%;\n    --destructive-foreground: 40 30% 98%;\n    \n    --border: 40 20% 85%;\n    --input: 40 20% 85%;\n    --ring: 142 50% 45%;\n    \n    --radius: 1.0rem;\n  }\n  \n  .dark {\n    /* Dark mode - modern Apple-like dark theme */\n    --background: 224 71% 2%;\n    --foreground: 210 40% 98%;\n    \n    --card: 222 47% 5%;\n    --card-foreground: 210 40% 98%;\n    \n    --popover: 222 47% 5%;\n    --popover-foreground: 210 40% 98%;\n    \n    --primary: 142 71% 45%;\n    --primary-foreground: 210 40% 98%;\n    \n    --secondary: 217 33% 12%;\n    --secondary-foreground: 210 40% 98%;\n    \n    --muted: 217 33% 10%;\n    --muted-foreground: 215 20% 70%;\n    \n    --accent: 142 71% 45%;\n    --accent-foreground: 210 40% 98%;\n    \n    --destructive: 0 63% 35%;\n    --destructive-foreground: 210 40% 98%;\n    \n    --border: 217 33% 15%;\n    --input: 217 33% 15%;\n    --ring: 142 71% 45%;\n  }\n}\n\n/* Apple-inspired UI Classes */\n.glassmorphic {\n  @apply backdrop-blur-md bg-white/80 dark:bg-slate-900/80 border border-white/20 dark:border-slate-700/30;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(255, 255, 255, 0.15);\n}\n\n.glassmorphic-card {\n  @apply glassmorphic rounded-2xl transition-all duration-300;\n  transform-style: preserve-3d;\n}\n\n.glassmorphic-card:hover {\n  transform: translateY(-2px) scale(1.005);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.15);\n}\n\n/* Apple SF Pro Display Font-like Styling */\n.sf-pro-display {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji';\n  font-feature-settings: 'kern', 'liga', 'calt';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  letter-spacing: -0.015em;\n}\n\n/* Apple Fitness Card Styling */\n.ios-card {\n  @apply rounded-2xl bg-black/90 dark:bg-black backdrop-blur-md p-4 border border-gray-800 transition-all duration-300;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2), 0 1px 4px rgba(0, 0, 0, 0.1);\n}\n\n.ios-card:hover {\n  @apply transform scale-[1.02];\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25), 0 2px 8px rgba(0, 0, 0, 0.15);\n}\n\n/* Apple Fitness Activity Card */\n.fitness-card {\n  @apply rounded-2xl bg-black backdrop-blur-md border border-neutral-700 overflow-hidden;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);\n}\n\n.fitness-card-header {\n  @apply text-gray-400 text-sm font-medium mb-2;\n  letter-spacing: -0.01em;\n}\n\n.fitness-card .card-header {\n  @apply p-4 pb-2;\n}\n\n.fitness-card .card-content {\n  @apply p-4 pt-0;\n}\n\n/* Apple-style Buttons */\n.ios-button {\n  @apply rounded-full font-medium text-sm py-2 px-5 transition-all duration-200 transform;\n  letter-spacing: -0.01em;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);\n}\n\n.ios-button:active {\n  @apply scale-95;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);\n}\n\n.ios-button-primary {\n  @apply ios-button bg-primary text-primary-foreground hover:bg-primary/90;\n}\n\n.ios-button-secondary {\n  @apply ios-button bg-white/80 dark:bg-gray-800/80 text-gray-800 dark:text-white hover:bg-white dark:hover:bg-gray-700;\n  backdrop-filter: blur(8px);\n}\n\n.apple-scroll {\n  @apply scrollbar-thin scrollbar-thumb-rounded-full scrollbar-track-transparent scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600;\n  overscroll-behavior: contain;\n  -webkit-overflow-scrolling: touch;\n}\n\n.apple-button {\n  @apply relative overflow-hidden rounded-full bg-gradient-to-br from-primary to-primary/80 text-primary-foreground font-medium \n  transition-all duration-300 ease-out hover:shadow-lg active:scale-[0.98] text-sm py-2 px-4;\n  box-shadow: 0 2px 10px rgba(0, 128, 0, 0.15);\n}\n\n.apple-button:active {\n  transform: scale(0.98);\n  box-shadow: 0 1px 5px rgba(0, 128, 0, 0.1);\n}\n\n.apple-input {\n  @apply glassmorphic rounded-xl h-10 px-3 text-sm border-0 focus:ring-2 focus:ring-primary/50 transition-all duration-300;\n}\n\n.subtle-card-shine {\n  position: relative;\n  overflow: hidden;\n}\n\n.subtle-card-shine::before {\n  content: '';\n  position: absolute;\n  top: -100%;\n  left: -100%;\n  width: 300%;\n  height: 300%;\n  background: linear-gradient(\n    115deg,\n    transparent 0%,\n    transparent 40%,\n    rgba(255, 255, 255, 0.15) 45%,\n    rgba(255, 255, 255, 0.05) 50%,\n    transparent 55%,\n    transparent 100%\n  );\n  transition: all 450ms ease;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.subtle-card-shine:hover::before {\n  animation: shine 1.5s ease forwards;\n}\n\n@keyframes shine {\n  to {\n    top: -30%;\n    left: -30%;\n  }\n}\n\n/* Toggle Checkbox Styling */\n.toggle-checkbox {\n  transform: translateX(0);\n  border-color: #cbd5e0;\n}\n\n.toggle-checkbox:checked {\n  transform: translateX(100%);\n  border-color: #68d391;\n}\n\n.toggle-label {\n  transition: background-color 0.2s ease;\n}\n\n/* Material Icons */\n@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialicons/v139/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2) format('woff2');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-feature-settings: 'liga';\n  -webkit-font-smoothing: antialiased;\n}\n\n/* Apple-like glass effect */\n.glass-effect {\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  background-color: rgba(255, 255, 255, 0.5);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n}\n\n.dark .glass-effect {\n  background-color: rgba(17, 25, 40, 0.75);\n  border: 1px solid rgba(255, 255, 255, 0.09);\n}\n\n/* Apple Fitness specific styles - Light and Dark Mode */\n.fitness-app-bg {\n  /* Light mode - soft gradient with pastel beige tones */\n  @apply bg-gradient-to-b from-[#f7f3e9] to-[#f2efe6] text-gray-800;\n  /* Dark mode - deep gradient with subtle green hue */\n  @apply dark:bg-gradient-to-b dark:from-[#0c0f12] dark:to-[#101714] dark:text-white;\n  background-attachment: fixed;\n}\n\n.fitness-card-grid {\n  @apply grid grid-cols-2 gap-3;\n}\n\n.fitness-metric-card {\n  @apply flex flex-col p-4 rounded-2xl overflow-hidden;\n  /* Light mode - glassy effect with pastel beige tones */\n  @apply bg-white/60 backdrop-blur-xl border border-amber-100/40 text-gray-800; \n  @apply shadow-[0_8px_20px_rgba(180,150,100,0.07)];\n  /* Dark mode - subtle dark card with glassy effect */\n  @apply dark:bg-[#151918]/70 dark:backdrop-blur-xl dark:border-[#273229]/50 dark:text-white;\n  @apply dark:shadow-[0_8px_20px_rgba(0,0,0,0.15)];\n  transition: all 0.3s ease;\n  \n  /* Glass effect enhancement */\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n/* Add subtle shine effect to cards */\n.fitness-metric-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgba(255, 255, 255, 0.2),\n    transparent\n  );\n  z-index: -1;\n  transition: 0.5s;\n}\n\n.fitness-metric-card:hover::before {\n  left: 100%;\n}\n\n.fitness-metric-title {\n  @apply text-xs font-medium mb-1;\n  @apply text-gray-600 dark:text-gray-500;\n  letter-spacing: -0.01em;\n}\n\n.fitness-metric-value {\n  @apply text-2xl font-semibold;\n  @apply text-gray-900 dark:text-white;\n  letter-spacing: -0.02em;\n}\n\n.fitness-metric-chart {\n  @apply flex items-end h-12 mt-2 gap-[2px];\n}\n\n.fitness-chart-bar {\n  @apply rounded-sm w-full h-full flex-1;\n  background-color: rgba(150, 150, 150, 0.3);\n  transition: height 0.3s ease;\n}\n\n.fitness-chart-bar-active {\n  @apply bg-primary;\n}\n\n.fitness-chart-day {\n  @apply text-[8px] text-center text-gray-500 mt-1;\n}\n\n.fitness-ring-container {\n  @apply relative flex items-center justify-center;\n  width: 70px;\n  height: 70px;\n}\n\n.fitness-ring {\n  @apply absolute rounded-full border-[6px] border-opacity-20;\n  width: 100%;\n  height: 100%;\n}\n\n/* Animations */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 0.8;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n.animate-pulse-slow {\n  animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Apple-style animations */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-8px);\n  }\n}\n\n.animate-float {\n  animation: float 5s ease-in-out infinite;\n}\n\n@keyframes bounce-subtle {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-4px);\n  }\n}\n\n.animate-bounce-subtle {\n  animation: bounce-subtle 2s ease-in-out infinite;\n}\n\n@keyframes scale-pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n.animate-scale-pulse {\n  animation: scale-pulse 2s ease-in-out infinite;\n}\n\n/* Apple-style micro interactions */\n.micro-bounce {\n  transition: transform 0.2s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.micro-bounce:hover {\n  transform: scale(1.05);\n}\n\n.micro-bounce:active {\n  transform: scale(0.98);\n}\n\n/* Modern hover effect for cards */\n.hover-lift {\n  transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1), \n              box-shadow 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.hover-lift:hover {\n  transform: translateY(-6px);\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1), 0 2px 8px rgba(0, 0, 0, 0.06);\n}\n\n/* Draggable widget styles */\n.draggable-widget {\n  cursor: grab;\n  user-select: none;\n  transition: transform 0.15s ease, box-shadow 0.15s ease;\n}\n\n.draggable-widget:active {\n  cursor: grabbing;\n  z-index: 10;\n}\n\n.draggable-widget.dragging {\n  opacity: 0.8;\n  transform: scale(1.02);\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);\n}\n\n.widget-container {\n  position: relative;\n  min-height: 100px;\n}\n\n.widget-placeholder {\n  border: 2px dashed rgba(100, 100, 100, 0.3);\n  border-radius: 1rem;\n  background-color: rgba(200, 200, 200, 0.1);\n  @apply dark:border-[#273229]/70 dark:bg-[#273229]/10;\n  margin: 0.5rem;\n}\n\n.widget-drop-indicator {\n  position: absolute;\n  border: 2px dashed rgba(34, 197, 94, 0.5);\n  border-radius: 1rem;\n  background-color: rgba(34, 197, 94, 0.1);\n  @apply dark:border-[#22c55e]/50 dark:bg-[#22c55e]/10;\n  z-index: 5;\n}\n\n/* Apple Fitness Inspired UI Components */\n.fitness-card-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 1rem;\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.fitness-card {\n  border-radius: 18px;\n  overflow: hidden;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  aspect-ratio: 1 / 1;\n  /* Light mode */\n  background-color: rgba(255, 255, 255, 0.7);\n  border: 1px solid rgba(209, 250, 229, 0.3);\n  box-shadow: 0 4px 12px rgba(34, 197, 94, 0.1);\n  /* Dark mode */\n  @apply dark:bg-[#151918]/80 dark:border-[#273229]/50;\n  @apply dark:shadow-[0_4px_12px_rgba(0,0,0,0.2)];\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.fitness-card:hover {\n  transform: translateY(-4px);\n  /* Light mode */\n  box-shadow: 0 8px 20px rgba(34, 197, 94, 0.15);\n  /* Dark mode */\n  @apply dark:shadow-[0_8px_20px_rgba(34,197,94,0.1)];\n}\n\n.fitness-metric {\n  position: relative;\n  border-radius: 12px; \n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  /* Light mode */\n  background-color: rgba(243, 235, 219, 0.4);\n  border: 1px solid rgba(240, 230, 210, 0.5);\n  /* Dark mode */\n  @apply dark:bg-[#1E2520] dark:border-[#273229];\n}\n\n.fitness-chart-bar {\n  height: 8px;\n  border-radius: 4px;\n  overflow: hidden;\n  position: relative;\n  /* Light mode */\n  background-color: rgba(150, 150, 150, 0.2);\n  /* Dark mode */\n  @apply dark:bg-[#273229];\n}\n\n.fitness-chart-progress {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  border-radius: 4px;\n  transition: width 1s ease-out;\n}\n\n/* Progress Rings - Light and Dark Mode */\n.fitness-progress-ring {\n  position: relative;\n  display: inline-block;\n}\n\n.fitness-progress-ring-background {\n  fill: none;\n  stroke-width: 12;\n  /* Light mode */\n  stroke: rgba(240, 230, 210, 0.4);\n  /* Dark mode */\n  @apply dark:stroke-[#273229];\n}\n\n.fitness-progress-ring-progress {\n  fill: none;\n  stroke-width: 12;\n  stroke-linecap: round;\n  transform: rotate(-90deg);\n  transform-origin: 50% 50%;\n  transition: stroke-dashoffset 1s ease-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    /* Light mode - soft pastel beige background */\n    @apply bg-gradient-to-b from-[#f7f3e9] to-[#f2efe6] text-gray-800;\n    /* Dark mode - deep background with subtle green hue */\n    @apply dark:bg-gradient-to-b dark:from-[#0c0f12] dark:to-[#101714] dark:text-white;\n    font-family: -apple-system, BlinkMacSystemFont, \"SF Pro Display\", \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    letter-spacing: -0.015em;\n    background-attachment: fixed;\n  }\n}","size_bytes":13459},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { initializeFirebase } from \"./lib/firebase\";\n\n// Initialize Firebase before rendering the app\ninitializeFirebase();\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":281},"client/src/components/AddGrowthEventForm.tsx":{"content":"import { useState, useRef } from 'react';\nimport { z } from 'zod';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { UserPlant } from '@/lib/auth';\nimport { GrowthEventType } from './PlantGrowthTimeline';\nimport { Camera, Upload, X } from 'lucide-react';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Slider } from '@/components/ui/slider';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AddGrowthEventFormProps {\n  plant: UserPlant;\n  eventType: GrowthEventType;\n  onSubmit: (data: GrowthEventFormValues, imageFile?: File) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport type GrowthEventFormValues = {\n  notes?: string;\n  height?: number;\n  width?: number;\n  leafCount?: number;\n  healthRating?: 1 | 2 | 3 | 4 | 5;\n};\n\nexport function AddGrowthEventForm({ plant, eventType, onSubmit, onCancel }: AddGrowthEventFormProps) {\n  const { toast } = useToast();\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Create a dynamic form schema based on the event type\n  const getFormSchema = () => {\n    const baseSchema = z.object({\n      notes: z.string().optional(),\n    });\n\n    switch (eventType) {\n      case 'photo':\n        return baseSchema.extend({\n          notes: z.string().optional(),\n        });\n      case 'measurement':\n        return baseSchema.extend({\n          height: z.coerce.number().min(0.1).optional(),\n          width: z.coerce.number().min(0.1).optional(),\n          leafCount: z.coerce.number().min(1).optional(),\n        });\n      case 'watering':\n      case 'fertilizing':\n      case 'repotting':\n      case 'pruning':\n        return baseSchema.extend({\n          notes: z.string().optional(),\n          healthRating: z.number().min(1).max(5).optional(),\n        });\n      default:\n        return baseSchema;\n    }\n  };\n\n  // Create the form\n  const form = useForm<GrowthEventFormValues>({\n    resolver: zodResolver(getFormSchema()),\n    defaultValues: {\n      notes: '',\n      height: undefined,\n      width: undefined,\n      leafCount: undefined,\n      healthRating: 3,\n    },\n  });\n\n  // Handle photo selection\n  const handlePhotoSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    setPhotoFile(file);\n    \n    // Create a preview URL\n    const previewUrl = URL.createObjectURL(file);\n    setPhotoPreview(previewUrl);\n  };\n\n  // Remove photo\n  const removePhoto = () => {\n    setPhotoFile(null);\n    setPhotoPreview(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  // Handle form submission\n  const handleFormSubmit = async (data: GrowthEventFormValues) => {\n    try {\n      setIsSubmitting(true);\n      \n      await onSubmit(data, photoFile || undefined);\n      \n      toast({\n        title: \"Event added\",\n        description: `${eventType.charAt(0).toUpperCase() + eventType.slice(1)} event has been added to your plant's timeline`,\n      });\n    } catch (error) {\n      console.error('Error adding growth event:', error);\n      toast({\n        title: \"Failed to add event\",\n        description: \"There was a problem adding your event. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Get form title based on event type\n  const getFormTitle = () => {\n    switch (eventType) {\n      case 'photo':\n        return 'Add Plant Photo';\n      case 'measurement':\n        return 'Add Growth Measurements';\n      case 'watering':\n        return 'Record Watering';\n      case 'fertilizing':\n        return 'Record Fertilizing';\n      case 'repotting':\n        return 'Record Repotting';\n      case 'pruning':\n        return 'Record Pruning';\n      case 'note':\n        return 'Add Note';\n      default:\n        return 'Add Event';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-xl font-semibold text-gray-800 dark:text-white\">\n        {getFormTitle()}: {plant.name}\n      </div>\n      \n      {/* Photo Upload Section (Only for photo event or optional for others) */}\n      {(eventType === 'photo' || eventType === 'measurement') && (\n        <div className=\"mb-6\">\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            ref={fileInputRef}\n            onChange={handlePhotoSelect}\n            className=\"hidden\"\n          />\n          \n          {photoPreview ? (\n            <div className=\"relative rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700\">\n              <img\n                src={photoPreview}\n                alt=\"Plant preview\"\n                className=\"w-full h-64 object-cover\"\n              />\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2 bg-white dark:bg-gray-900 bg-opacity-80 dark:bg-opacity-80 h-8 w-8 p-1.5\"\n                onClick={removePhoto}\n              >\n                <X className=\"h-full w-full\" />\n              </Button>\n            </div>\n          ) : (\n            <div\n              className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\"\n              onClick={() => fileInputRef.current?.click()}\n            >\n              <div className=\"flex flex-col items-center justify-center space-y-3\">\n                <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center\">\n                  <Camera className=\"h-8 w-8 text-green-500\" />\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-base font-medium\">\n                    {eventType === 'photo' ? 'Upload a photo of your plant' : 'Add an optional photo'}\n                  </p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                    Click to browse or drag and drop\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {eventType === 'photo' && !photoFile && (\n            <div className=\"mt-2 text-sm text-amber-600 dark:text-amber-500\">\n              *Photo is required for this event type\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Form */}\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n          {/* Measurements (for measurement events) */}\n          {eventType === 'measurement' && (\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"height\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Height (cm)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.1\" placeholder=\"Plant height in cm\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Record the current height of your plant in centimeters\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"width\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Width (cm)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.1\" placeholder=\"Plant width in cm\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Record the current width or spread of your plant in centimeters\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"leafCount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Number of Leaves</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"Number of leaves\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Count the number of leaves on your plant\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          )}\n          \n          {/* Health Rating (for care events) */}\n          {['watering', 'fertilizing', 'repotting', 'pruning'].includes(eventType) && (\n            <FormField\n              control={form.control}\n              name=\"healthRating\"\n              render={({ field: { value, onChange, ...field } }) => (\n                <FormItem>\n                  <FormLabel>Plant Health Rating</FormLabel>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 px-1\">\n                      <span>Poor</span>\n                      <span>Fair</span>\n                      <span>Good</span>\n                      <span>Great</span>\n                      <span>Excellent</span>\n                    </div>\n                    <FormControl>\n                      <Slider\n                        min={1}\n                        max={5}\n                        step={1}\n                        value={[value || 3]}\n                        onValueChange={([newValue]) => onChange(newValue)}\n                        {...field}\n                        className=\"py-4\"\n                      />\n                    </FormControl>\n                  </div>\n                  <FormDescription>\n                    Rate the overall health of your plant after this {eventType}\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n          \n          {/* Notes (for all events) */}\n          <FormField\n            control={form.control}\n            name=\"notes\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Notes</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder={`Add details about this ${eventType} event...`}\n                    className=\"min-h-24 resize-y\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormDescription>\n                  Add any observations or details about your plant's condition\n                </FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={onCancel} disabled={isSubmitting}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting || (eventType === 'photo' && !photoFile)}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              {isSubmitting ? 'Saving...' : 'Save Event'}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":11877},"client/src/components/AlertBanner.tsx":{"content":"import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\ninterface AlertBannerProps {\n  message: string;\n  title: string;\n  type: \"critical\" | \"warning\" | \"info\";\n}\n\nexport function AlertBanner({ message, title, type }: AlertBannerProps) {\n  const getAlertStyles = () => {\n    switch (type) {\n      case \"critical\":\n        return \"bg-danger-50 border-danger-500 dark:bg-opacity-10 text-danger-600 dark:text-danger-500 animate-pulse-slow\";\n      case \"warning\":\n        return \"bg-warning-50 border-warning-500 dark:bg-opacity-10 text-warning-600 dark:text-warning-500\";\n      case \"info\":\n        return \"bg-primary-50 border-primary-500 dark:bg-opacity-10 text-primary-600 dark:text-primary-500\";\n    }\n  };\n  \n  const getIcon = () => {\n    switch (type) {\n      case \"critical\":\n        return \"warning\";\n      case \"warning\":\n        return \"warning\";\n      case \"info\":\n        return \"info\";\n    }\n  };\n  \n  return (\n    <Alert className={`mb-8 border-l-4 p-4 rounded-md shadow-sm ${getAlertStyles()}`}>\n      <div className=\"flex items-center\">\n        <span className={`material-icons mr-2`}>{getIcon()}</span>\n        <div>\n          <AlertTitle className=\"font-medium\">{title}</AlertTitle>\n          <AlertDescription className=\"text-sm text-gray-600 dark:text-gray-300\">\n            {message}\n          </AlertDescription>\n        </div>\n      </div>\n    </Alert>\n  );\n}\n","size_bytes":1403},"client/src/components/AnimatedPlantGraph.tsx":{"content":"import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  Legend\n} from 'recharts';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { format } from 'date-fns';\n\n// Interface for the component props\ninterface AnimatedPlantGraphProps {\n  data: Array<{\n    timestamp: number;\n    temperature?: number;\n    humidity?: number;\n    light?: number;\n    soilMoisture?: number;\n  }>;\n  dataType?: 'temperature' | 'humidity' | 'light' | 'soilMoisture';\n  dataTypes?: ('temperature' | 'humidity' | 'light' | 'soilMoisture')[];\n  combinedView?: boolean;\n  timeRange?: string;\n  title?: string;\n  height?: number;\n}\n\n// Mapping for the data types with colors for dark and light mode\nconst typeConfig = {\n  temperature: {\n    color: '#FF5C5C',\n    darkColor: '#FF7878',\n    gradient: ['#FF6666', '#FFCCCC'],\n    darkGradient: ['#FF6666', '#AA4444'],\n    unit: '°C',\n    name: 'Temperature'\n  },\n  humidity: {\n    color: '#5C9CFF',\n    darkColor: '#7CAFFF',\n    gradient: ['#66A3FF', '#CCE0FF'],\n    darkGradient: ['#66A3FF', '#3067B3'],\n    unit: '%',\n    name: 'Humidity'\n  },\n  light: {\n    color: '#FFD15C',\n    darkColor: '#FFDC7D',\n    gradient: ['#FFD966', '#FFECC4'],\n    darkGradient: ['#FFD966', '#BD9C3F'],\n    unit: '%',\n    name: 'Light'\n  },\n  soilMoisture: {\n    color: '#5CBF6A',\n    darkColor: '#6BDF7A',\n    gradient: ['#66CC72', '#CCE8D0'],\n    darkGradient: ['#66CC72', '#3D7F45'],\n    unit: '%',\n    name: 'Soil Moisture'\n  }\n};\n\nexport function AnimatedPlantGraph({\n  data,\n  dataType,\n  dataTypes = ['temperature', 'humidity', 'light', 'soilMoisture'],\n  combinedView = false,\n  timeRange = '24h',\n  title,\n  height = 350 // Increased height for better visibility\n}: AnimatedPlantGraphProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  \n  // Use combined view if explicitly set or if dataTypes is provided\n  const useCombinedView = combinedView || (!dataType && dataTypes && dataTypes.length > 0);\n  \n  // If not in combined view but no dataType is specified, default to temperature\n  const singleDataType = dataType || 'temperature';\n  \n  // Detect dark mode\n  useEffect(() => {\n    // Check if dark mode is already set via media query\n    const isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setIsDarkMode(isDark);\n    \n    // Listen for changes in color scheme\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      setIsDarkMode(e.matches);\n    };\n    \n    // Add event listener\n    mediaQuery.addEventListener('change', handleChange);\n    \n    // Also check for dark class on html element for theme toggle support\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.attributeName === 'class') {\n          const htmlElement = document.documentElement;\n          if (htmlElement.classList.contains('dark')) {\n            setIsDarkMode(true);\n          } else {\n            setIsDarkMode(false);\n          }\n        }\n      });\n    });\n    \n    observer.observe(document.documentElement, { attributes: true });\n    \n    // Clean up\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n      observer.disconnect();\n    };\n  }, []);\n  \n  // Format the data for the chart\n  const formattedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    // Sort data by timestamp\n    const sortedData = [...data].sort((a, b) => a.timestamp - b.timestamp);\n    \n    // For combined view, we want to store data by 5-second intervals\n    // For single data type view, we group by 5-minute intervals\n    const intervals: Record<string, any> = {};\n    const intervalMs = useCombinedView ? 5000 : 300000; // 5 seconds or 5 minutes\n    \n    sortedData.forEach(item => {\n      const timestamp = new Date(item.timestamp);\n      \n      if (useCombinedView) {\n        // For 5-second intervals\n        const seconds = timestamp.getSeconds();\n        const roundedSeconds = Math.floor(seconds / 5) * 5;\n        timestamp.setSeconds(roundedSeconds);\n        timestamp.setMilliseconds(0);\n      } else {\n        // For 5-minute intervals\n        const minutes = timestamp.getMinutes();\n        const roundedMinutes = Math.floor(minutes / 5) * 5;\n        timestamp.setMinutes(roundedMinutes);\n        timestamp.setSeconds(0);\n        timestamp.setMilliseconds(0);\n      }\n      \n      const key = timestamp.getTime().toString();\n      \n      if (!intervals[key] || item.timestamp > intervals[key].timestamp) {\n        intervals[key] = {\n          ...item,\n          roundedTimestamp: timestamp\n        };\n      }\n    });\n    \n    // Convert back to array and format based on view type\n    if (useCombinedView) {\n      return Object.values(intervals).map(item => ({\n        time: format(item.roundedTimestamp, 'HH:mm:ss'),\n        fullTime: item.roundedTimestamp,\n        ...dataTypes.reduce((acc, type) => {\n          acc[type] = item[type] !== undefined ? item[type] : null;\n          return acc;\n        }, {})\n      }));\n    } else {\n      return Object.values(intervals).map(item => ({\n        time: format(item.roundedTimestamp, 'HH:mm'),\n        fullTime: item.roundedTimestamp,\n        value: item[singleDataType] || 0\n      }));\n    }\n  }, [data, singleDataType, dataTypes, useCombinedView]);\n  \n  // Animation effect to reveal the graph\n  useEffect(() => {\n    // Small delay to ensure the component has mounted\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  // Get configuration for the current data type (used in single-view mode)\n  const config = typeConfig[singleDataType];\n  \n  // Custom tooltip component with Apple-inspired design\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const time = payload[0].payload.fullTime;\n      \n      return (\n        <div className=\"backdrop-blur-xl bg-white/90 dark:bg-gray-800/90 p-4 rounded-xl shadow-lg border-0 sf-pro-display animate-scale-pulse\"\n          style={{ \n            boxShadow: isDarkMode \n              ? '0 10px 25px rgba(0, 0, 0, 0.4), 0 5px 10px rgba(0, 0, 0, 0.3)'\n              : '0 10px 25px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.04)',\n          }}>\n          <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1\">\n            {format(time, useCombinedView ? 'MMM d, yyyy HH:mm:ss' : 'MMM d, yyyy HH:mm')}\n          </p>\n          \n          {useCombinedView ? (\n            // Show all data types in the tooltip for combined view\n            <div className=\"space-y-1.5\">\n              {payload.map((entry: any, index: number) => {\n                if (!entry.dataKey || \n                    !(['temperature', 'humidity', 'light', 'soilMoisture'] as const).includes(entry.dataKey as any)) {\n                  return null;  \n                }\n                \n                const dataTypeKey = entry.dataKey as keyof typeof typeConfig;\n                const cfg = typeConfig[dataTypeKey];\n                \n                if (entry.value === null || entry.value === undefined) return null;\n                \n                return (\n                  <p key={index} className=\"text-base font-semibold flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <span className=\"h-3 w-3 mr-1.5 rounded-sm\" \n                        style={{ backgroundColor: isDarkMode ? cfg.darkColor : cfg.color }}>\n                      </span>\n                      {cfg.name}:\n                    </span>\n                    <span style={{ color: isDarkMode ? cfg.darkColor : cfg.color }}>\n                      {entry.value}{cfg.unit}\n                    </span>\n                  </p>\n                );\n              })}\n            </div>\n          ) : (\n            // Show single data type for single view\n            <p className=\"text-xl font-bold tracking-tight\" \n              style={{ color: isDarkMode ? config.darkColor : config.color }}>\n              {payload[0].value}{config.unit}\n            </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Define motion variants for the animation\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        staggerChildren: 0.1\n      }\n    }\n  };\n  \n  const chartVariants = {\n    hidden: { opacity: 0, scale: 0.95 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n  \n  return (\n    <AnimatePresence>\n      {formattedData.length > 0 && (\n        <motion.div\n          className=\"w-full ios-card overflow-hidden sf-pro-display dark:text-white\"\n          style={{\n            borderRadius: '20px',\n            backdropFilter: 'blur(20px)',\n            background: isDarkMode \n              ? 'rgba(30, 41, 59, 0.85)' \n              : 'rgba(255, 255, 255, 0.85)',\n            boxShadow: isDarkMode\n              ? '0 10px 30px rgba(0, 0, 0, 0.2), 0 1px 8px rgba(0, 0, 0, 0.3)'\n              : '0 10px 30px rgba(31, 38, 135, 0.1), 0 1px 8px rgba(0, 0, 0, 0.06)'\n          }}\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={isVisible ? \"visible\" : \"hidden\"}\n        >\n          <motion.div className=\"flex justify-between items-center mb-6 px-5 pt-5\" variants={chartVariants}>\n            <div>\n              <h3 className=\"text-xl font-bold text-gray-800 dark:text-white tracking-tight sf-pro-display\">\n                {title || `${config.name}`}\n              </h3>\n              <p className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mt-1\">\n                Historical data tracking\n              </p>\n            </div>\n            <div className=\"px-3 py-1 rounded-full bg-gray-100/80 dark:bg-gray-700/50 text-xs font-semibold text-gray-600 dark:text-gray-300 flex items-center\">\n              <span className=\"w-2 h-2 rounded-full mr-1.5\" style={{ \n                backgroundColor: isDarkMode ? config.darkColor : config.color, \n                boxShadow: `0 0 3px ${isDarkMode ? config.darkColor : config.color}` \n              }}></span>\n              Last {timeRange}\n            </div>\n          </motion.div>\n          \n          <motion.div\n            variants={chartVariants}\n            style={{ height: `${height}px` }}\n            className=\"w-full\"\n          >\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                data={formattedData}\n                margin={{ top: 5, right: 5, left: 0, bottom: 20 }}\n              >\n                <defs>\n                  {/* Create gradients for each data type */}\n                  {Object.entries(typeConfig).map(([key, cfg]) => [\n                    <linearGradient key={`${key}-light`} id={`gradient-${key}-light`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={cfg.gradient[0]} stopOpacity={0.8} />\n                      <stop offset=\"95%\" stopColor={cfg.gradient[1]} stopOpacity={0.2} />\n                    </linearGradient>,\n                    <linearGradient key={`${key}-dark`} id={`gradient-${key}-dark`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={cfg.darkGradient[0]} stopOpacity={0.8} />\n                      <stop offset=\"95%\" stopColor={cfg.darkGradient[1]} stopOpacity={0.3} />\n                    </linearGradient>\n                  ]).flat()}\n                </defs>\n                <CartesianGrid \n                  strokeDasharray=\"3 3\" \n                  stroke={isDarkMode ? \"rgba(100,100,100,0.15)\" : \"rgba(200,200,200,0.15)\"} \n                  vertical={false}\n                />\n                <XAxis\n                  dataKey=\"time\"\n                  tick={{ \n                    fontSize: 11, \n                    fontWeight: 500, \n                    fill: isDarkMode ? 'rgba(200,200,200,0.8)' : 'rgba(100,100,100,0.8)',\n                    fontFamily: \"SF Pro Display, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif\"\n                  }}\n                  tickLine={false}\n                  axisLine={{ stroke: isDarkMode ? 'rgba(100,100,100,0.3)' : 'rgba(200,200,200,0.3)', strokeWidth: 1 }}\n                  dy={8}\n                />\n                <YAxis\n                  tick={{ \n                    fontSize: 11, \n                    fontWeight: 500, \n                    fill: isDarkMode ? 'rgba(200,200,200,0.8)' : 'rgba(100,100,100,0.8)',\n                    fontFamily: \"SF Pro Display, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif\"\n                  }}\n                  tickLine={false}\n                  axisLine={{ stroke: isDarkMode ? 'rgba(100,100,100,0.3)' : 'rgba(200,200,200,0.3)', strokeWidth: 1 }}\n                  domain={['dataMin - 5', 'dataMax + 5']}\n                  dx={-5}\n                  width={30}\n                />\n                <Tooltip \n                  content={<CustomTooltip />} \n                  cursor={{ \n                    stroke: isDarkMode ? 'rgba(255,255,255,0.15)' : 'rgba(0,0,0,0.1)', \n                    strokeWidth: 1, \n                    strokeDasharray: '3 3' \n                  }}\n                />\n                \n                {/* Render multiple lines for combined view or single line for single view */}\n                {useCombinedView ? (\n                  // Multiple lines for combined view\n                  dataTypes.map((type) => {\n                    const cfg = typeConfig[type];\n                    return (\n                      <Line\n                        key={type}\n                        type=\"monotone\"\n                        connectNulls={true}\n                        dataKey={type}\n                        stroke={isDarkMode ? cfg.darkColor : cfg.color}\n                        strokeWidth={2.5}\n                        dot={{ \n                          r: 3.5, \n                          strokeWidth: 2, \n                          fill: isDarkMode ? '#1e293b' : 'white', \n                          stroke: isDarkMode ? cfg.darkColor : cfg.color \n                        }}\n                        activeDot={{ \n                          r: 5, \n                          strokeWidth: 2.5, \n                          fill: isDarkMode ? '#1e293b' : 'white', \n                          stroke: isDarkMode ? cfg.darkColor : cfg.color,\n                          strokeOpacity: 0.9,\n                          className: \"animate-pulse-slow\"\n                        }}\n                        isAnimationActive={true}\n                        animationDuration={1800 + Math.random() * 400}\n                        animationEasing=\"ease-in-out\"\n                        name={cfg.name}\n                      />\n                    );\n                  })\n                ) : (\n                  // Single line for single data type view\n                  <Line\n                    type=\"monotone\"\n                    connectNulls={true}\n                    dataKey=\"value\"\n                    stroke={isDarkMode ? config.darkColor : config.color}\n                    strokeWidth={3}\n                    dot={{ \n                      r: 4, \n                      strokeWidth: 2, \n                      fill: isDarkMode ? '#1e293b' : 'white', \n                      stroke: isDarkMode ? config.darkColor : config.color \n                    }}\n                    activeDot={{ \n                      r: 6, \n                      strokeWidth: 3, \n                      fill: isDarkMode ? '#1e293b' : 'white', \n                      stroke: isDarkMode ? config.darkColor : config.color,\n                      strokeOpacity: 0.9,\n                      className: \"animate-pulse-slow\"\n                    }}\n                    isAnimationActive={true}\n                    animationDuration={2000}\n                    animationEasing=\"ease-in-out\"\n                    name={config.name}\n                    fill={`url(#gradient-${singleDataType}-${isDarkMode ? 'dark' : 'light'})`}\n                  />\n                )}\n              </LineChart>\n            </ResponsiveContainer>\n          </motion.div>\n          \n          <motion.div\n            className={`px-5 pb-5 mt-4 ${useCombinedView ? 'flex flex-col space-y-2' : 'flex justify-between items-center'}`}\n            variants={chartVariants}\n          >\n            <span className=\"text-xs font-medium bg-gray-100/70 dark:bg-gray-700/40 px-3 py-1 rounded-full text-gray-500 dark:text-gray-400 self-start\">\n              {`${formattedData.length} data points`}\n            </span>\n            \n            {useCombinedView ? (\n              <div className=\"flex flex-wrap gap-2 mt-1\">\n                {dataTypes.map((type) => {\n                  const cfg = typeConfig[type as keyof typeof typeConfig];\n                  return (\n                    <span key={type} className=\"text-xs font-medium text-gray-500 dark:text-gray-400 flex items-center\">\n                      <span \n                        className=\"h-3 w-3 mr-1.5 rounded-sm\" \n                        style={{ backgroundColor: isDarkMode ? cfg.darkColor : cfg.color }}\n                      ></span>\n                      {cfg.name}\n                    </span>\n                  );\n                })}\n              </div>\n            ) : (\n              <span className=\"text-xs font-medium text-gray-500 dark:text-gray-400 flex items-center\">\n                <span \n                  className=\"h-3 w-3 mr-1.5 rounded-sm\" \n                  style={{ backgroundColor: isDarkMode ? config.darkColor : config.color }}\n                ></span>\n                Values in {config.unit}\n              </span>\n            )}\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":18090},"client/src/components/ChatBubble.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MessageSquare, X, Send, Leaf, ImagePlus, Camera, ChevronDown } from 'lucide-react';\nimport { useTheme } from '@/lib/ThemeProvider';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { PlantChatMessage } from '@/components/PlantChatMessage';\nimport { ChatMessage, sendMessage, startChatSession, analyzePlantPhoto } from '@/lib/gemini';\nimport { useDevice } from '@/hooks/use-device';\n\nexport function ChatBubble() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState<{ messages: ChatMessage[] }>({ messages: [] });\n  const [isSending, setIsSending] = useState(false);\n  const [isPhotoMode, setIsPhotoMode] = useState(false);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const { theme } = useTheme();\n  const { isMobile, deviceType, isMobileDevice } = useDevice();\n  \n  // Initialize chat when first opened\n  useEffect(() => {\n    if (isOpen && chatHistory.messages.length === 0) {\n      initializeChat();\n    }\n  }, [isOpen]);\n  \n  // Scroll to bottom when messages are added\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatHistory.messages]);\n  \n  const initializeChat = async () => {\n    try {\n      const initialSession = await startChatSession();\n      setChatHistory(initialSession);\n    } catch (error) {\n      console.error(\"Error initializing chat:\", error);\n    }\n  };\n  \n  const handleSubmit = async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    if (!message.trim() || isSending) return;\n    \n    const userMessage: ChatMessage = { role: 'user', content: message };\n    setChatHistory(prev => ({\n      messages: [...prev.messages, userMessage]\n    }));\n    setMessage('');\n    setIsSending(true);\n    \n    try {\n      const response = await sendMessage(chatHistory, message);\n      const botMessage: ChatMessage = { role: 'model', content: response };\n      setChatHistory(prev => ({\n        messages: [...prev.messages, botMessage]\n      }));\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setIsSending(false);\n    }\n  };\n  \n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setPhotoFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPhotoPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  const handlePhotoUpload = async () => {\n    if (!photoFile || isAnalyzing) return;\n    \n    setIsAnalyzing(true);\n    const userImageMessage: ChatMessage = { \n      role: 'user', \n      content: `I'm uploading a photo of my plant for analysis.` \n    };\n    \n    setChatHistory(prev => ({\n      messages: [...prev.messages, userImageMessage]\n    }));\n    \n    try {\n      // Upload photo and get URL (using preview for demo)\n      const imageUrl = photoPreview as string;\n      \n      // Analyze the photo\n      const analysis = await analyzePlantPhoto(imageUrl);\n      \n      // Format response\n      const responseContent = `\n**Plant Analysis Results**\n\n**Species**: ${analysis.species}\n**Common Name**: ${analysis.commonName}\n**Health Assessment**: ${analysis.healthAssessment}\n\n**Care Instructions**:\n${analysis.careInstructions}\n\n(Confidence: ${analysis.confidence})\n      `;\n      \n      const botMessage: ChatMessage = { role: 'model', content: responseContent };\n      setChatHistory(prev => ({\n        messages: [...prev.messages, botMessage]\n      }));\n      \n      // Reset photo state\n      setPhotoPreview(null);\n      setPhotoFile(null);\n      setIsPhotoMode(false);\n      \n    } catch (error) {\n      console.error(\"Error analyzing photo:\", error);\n      // Add error message to chat\n      const errorMessage: ChatMessage = { \n        role: 'model', \n        content: \"I'm sorry, there was an error analyzing your plant photo. Please try again.\" \n      };\n      setChatHistory(prev => ({\n        messages: [...prev.messages, errorMessage]\n      }));\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  \n  return (\n    <>\n      {/* Chat Bubble Button */}\n      <motion.div\n        className=\"fixed bottom-6 right-6 z-50\"\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ type: 'spring', stiffness: 260, damping: 20 }}\n      >\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          className={`w-16 h-16 rounded-full shadow-lg flex items-center justify-center ${\n            isOpen ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'\n          }`}\n        >\n          {isOpen ? (\n            <X className=\"h-6 w-6 text-white\" />\n          ) : (\n            <MessageSquare className=\"h-6 w-6 text-white\" />\n          )}\n        </Button>\n      </motion.div>\n      \n      {/* Chat Window */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            className={`fixed z-40 rounded-lg shadow-xl overflow-hidden ${\n              isMobileDevice \n                ? 'bottom-0 left-0 right-0 w-full max-h-[90vh]' \n                : 'bottom-24 right-6 w-[350px] max-w-[calc(100vw-2rem)]'\n            }`}\n            initial={isMobileDevice \n              ? { opacity: 0, y: 100 } \n              : { opacity: 0, y: 20, scale: 0.95 }\n            }\n            animate={isMobileDevice \n              ? { opacity: 1, y: 0 } \n              : { opacity: 1, y: 0, scale: 1 }\n            }\n            exit={isMobileDevice \n              ? { opacity: 0, y: 100 } \n              : { opacity: 0, y: 20, scale: 0.95 }\n            }\n            transition={{ duration: 0.3 }}\n          >\n            <div className={`flex flex-col ${\n              isMobileDevice \n                ? 'h-[500px] max-h-[80vh] min-h-[300px]' \n                : 'h-[500px] max-h-[70vh]'\n            } ${theme === 'dark' ? 'bg-slate-900' : 'bg-white'}`}>\n              {/* Chat Header */}\n              <div className=\"bg-green-500 p-3 flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Leaf className=\"h-5 w-5 text-white\" />\n                  <h3 className=\"font-medium text-white\">Plant Assistant</h3>\n                </div>\n                <div className=\"flex items-center\">\n                  {isMobileDevice && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-8 w-8 text-white hover:bg-green-600 rounded-full mr-1\"\n                      onClick={() => setIsMinimized(!isMinimized)}\n                    >\n                      <ChevronDown className={`h-4 w-4 transition-transform ${isMinimized ? 'rotate-180' : ''}`} />\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 text-white hover:bg-green-600 rounded-full\"\n                    onClick={() => setIsOpen(false)}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Chat Messages */}\n              {(!isMinimized || !isMobileDevice) && (\n                <ScrollArea className=\"flex-1 p-4\">\n                  <div ref={chatContainerRef} className=\"space-y-4\">\n                    {chatHistory.messages.map((msg, index) => (\n                      <PlantChatMessage\n                        key={index}\n                        message={msg}\n                        isLoading={isSending && index === chatHistory.messages.length - 1 && msg.role === 'user'}\n                      />\n                    ))}\n                    {isSending && chatHistory.messages.length > 0 && chatHistory.messages[chatHistory.messages.length - 1].role === 'user' && (\n                      <PlantChatMessage\n                        message={{ role: 'model', content: '' }}\n                        isLoading={true}\n                      />\n                    )}\n                  </div>\n                </ScrollArea>\n              )}\n              \n              {/* Photo Upload UI - Only show when not minimized */}\n              {isPhotoMode && (!isMinimized || !isMobileDevice) && (\n                <div className=\"p-3 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <h4 className=\"text-sm font-medium\">{isMobileDevice ? \"Take Plant Photo\" : \"Upload Plant Photo\"}</h4>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-8 w-8 rounded-full\"\n                      onClick={() => {\n                        setIsPhotoMode(false);\n                        setPhotoPreview(null);\n                        setPhotoFile(null);\n                      }}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  {photoPreview ? (\n                    <div className=\"relative w-full h-32 mb-2\">\n                      <img\n                        src={photoPreview}\n                        alt=\"Plant preview\"\n                        className=\"w-full h-full object-cover rounded-md\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"absolute top-1 right-1 bg-white dark:bg-black bg-opacity-70 dark:bg-opacity-70\"\n                        onClick={() => {\n                          setPhotoPreview(null);\n                          setPhotoFile(null);\n                          if (fileInputRef.current) {\n                            fileInputRef.current.value = '';\n                          }\n                        }}\n                      >\n                        Change\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"flex gap-2 mb-2\">\n                      <Button\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => fileInputRef.current?.click()}\n                      >\n                        <ImagePlus className=\"h-4 w-4 mr-2\" /> Gallery\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => {\n                          if (fileInputRef.current) {\n                            fileInputRef.current.capture = \"environment\";\n                            fileInputRef.current.click();\n                          }\n                        }}\n                      >\n                        <Camera className=\"h-4 w-4 mr-2\" /> Camera\n                      </Button>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        ref={fileInputRef}\n                        onChange={handleFileChange}\n                      />\n                    </div>\n                  )}\n                  \n                  <Button\n                    className=\"w-full bg-green-500 hover:bg-green-600\"\n                    disabled={!photoFile || isAnalyzing}\n                    onClick={handlePhotoUpload}\n                  >\n                    {isAnalyzing ? 'Analyzing...' : 'Analyze Plant'}\n                  </Button>\n                </div>\n              )}\n              \n              {/* Chat Input - Show even when minimized on mobile for quick access */}\n              {!isPhotoMode && (\n                <form onSubmit={handleSubmit} className=\"p-3 border-t border-gray-200 dark:border-gray-700 flex gap-2\">\n                  <div className=\"flex-1 relative\">\n                    <Input\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      placeholder={isMinimized && isMobileDevice ? \"Type quick question...\" : \"Ask about your plant...\"}\n                      className=\"w-full\"\n                      disabled={isSending}\n                      onFocus={() => {\n                        // When focusing input on mobile, expand the chat\n                        if (isMobileDevice && isMinimized) {\n                          setIsMinimized(false);\n                        }\n                      }}\n                    />\n                    {(!isMinimized || !isMobileDevice) && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 rounded-full\"\n                        onClick={() => setIsPhotoMode(true)}\n                      >\n                        <ImagePlus className=\"h-4 w-4 text-gray-500\" />\n                      </Button>\n                    )}\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-green-500 hover:bg-green-600\"\n                    size=\"icon\"\n                    disabled={!message.trim() || isSending}\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </form>\n              )}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","size_bytes":14224},"client/src/components/DataCollector.tsx":{"content":"import { useEffect } from 'react';\nimport { DataLogger } from '@/lib/dataLogger';\nimport { initializeFirebase } from '@/lib/firebase';\n\n/**\n * This component is responsible for collecting sensor data at regular intervals\n * It doesn't render any UI - it just starts and manages the data collection process\n */\nexport function DataCollector() {\n  useEffect(() => {\n    // Make sure Firebase is initialized\n    const isInitialized = initializeFirebase();\n    \n    if (isInitialized) {\n      // Get singleton instance of DataLogger\n      const dataLogger = DataLogger.getInstance();\n      \n      // Configure to collect data every 5 seconds (5000ms) for high resolution graph\n      dataLogger.startLogging('default', 5000);\n      \n      // Log initial data point\n      dataLogger.logOnce('default');\n      \n      console.log('Data collector started - logging data every 5 seconds');\n      \n      // Clean up on unmount\n      return () => {\n        dataLogger.stopLogging();\n        console.log('Data collector stopped');\n      };\n    } else {\n      console.error('Firebase could not be initialized - data collection disabled');\n    }\n  }, []);\n  \n  // This component doesn't render anything\n  return null;\n}","size_bytes":1204},"client/src/components/DataVisualization.tsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { AnimatedPlantGraph } from './AnimatedPlantGraph';\nimport { SensorHistory, PlantHistoryData } from '../lib/firebase';\nimport { motion } from 'framer-motion';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface DataVisualizationProps {\n  historyData: SensorHistory;\n  currentData?: {\n    temperature: number;\n    humidity: number;\n    light?: number;\n    soilMoisture?: number;\n  };\n}\n\ntype TimeFrame = '1h' | '6h' | '12h' | '24h' | 'custom';\n\nexport function DataVisualization({ historyData, currentData }: DataVisualizationProps) {\n  const [activeMetric, setActiveMetric] = useState<'temperature' | 'humidity' | 'light' | 'soilMoisture' | 'combined'>('combined');\n  const [timeFrame, setTimeFrame] = useState<TimeFrame>('24h');\n  \n  // Convert history data object to array\n  const historyArray = useMemo(() => {\n    const result: PlantHistoryData[] = [];\n    \n    // Convert timestamp keys to numbers and sort\n    const sortedTimestamps = Object.keys(historyData)\n      .map(ts => parseInt(ts))\n      .sort((a, b) => a - b);\n    \n    // Filter based on selected time frame\n    const now = Date.now();\n    let timeLimit: number;\n    \n    switch(timeFrame) {\n      case '1h':\n        timeLimit = now - (60 * 60 * 1000);\n        break;\n      case '6h':\n        timeLimit = now - (6 * 60 * 60 * 1000);\n        break;\n      case '12h':\n        timeLimit = now - (12 * 60 * 60 * 1000);\n        break;\n      case '24h':\n      default:\n        timeLimit = now - (24 * 60 * 60 * 1000);\n    }\n    \n    // Create data points from filtered timestamps\n    sortedTimestamps.forEach(ts => {\n      if (ts >= timeLimit) {\n        const dataPoint = historyData[ts];\n        result.push({\n          timestamp: ts,\n          temperature: dataPoint.temperature,\n          humidity: dataPoint.humidity,\n          light: dataPoint.light,\n          soilMoisture: dataPoint.soilMoisture\n        });\n      }\n    });\n    \n    // Add current data point if available\n    if (currentData) {\n      result.push({\n        timestamp: now,\n        ...currentData\n      });\n    }\n    \n    return result;\n  }, [historyData, currentData, timeFrame]);\n  \n  // Generate time range display text\n  const timeRangeText = useMemo(() => {\n    switch(timeFrame) {\n      case '1h': return '1 Hour';\n      case '6h': return '6 Hours';\n      case '12h': return '12 Hours';\n      case '24h': return '24 Hours';\n      default: return 'Custom';\n    }\n  }, [timeFrame]);\n  \n  // Define animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        delayChildren: 0.3,\n        staggerChildren: 0.2\n      }\n    }\n  };\n  \n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100\n      }\n    }\n  };\n  \n  return (\n    <motion.div\n      className=\"w-full p-5 sm:p-6 rounded-2xl bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl shadow-xl border border-white/20 dark:border-gray-700/30\"\n      style={{\n        boxShadow: \"0 15px 40px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.05), 0 1px 3px rgba(255, 255, 255, 0.1) inset\",\n        backdropFilter: \"blur(20px)\",\n        WebkitBackdropFilter: \"blur(20px)\"\n      }}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      transition={{ duration: 0.6, ease: \"easeOut\" }}\n    >\n      <motion.div\n        className=\"flex flex-col space-y-5\"\n        variants={itemVariants}\n      >\n        <div className=\"flex flex-col space-y-2 mb-6\">\n          <motion.h2 \n            className=\"text-3xl font-bold text-gray-800 dark:text-white tracking-tight sf-pro-display\"\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2, duration: 0.5 }}\n          >\n            Plant Health\n          </motion.h2>\n          <motion.p \n            className=\"text-gray-500 dark:text-gray-400 sf-pro-display text-sm\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.3, duration: 0.5 }}\n          >\n            Monitor and track your plant's environmental patterns over time\n          </motion.p>\n        </div>\n        \n        <Tabs defaultValue=\"combined\" className=\"w-full\" onValueChange={(value) => setActiveMetric(value as any)}>\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-5\">\n            <TabsList className=\"grid grid-cols-5 bg-gray-100/60 dark:bg-gray-800/40 p-1.5 rounded-xl backdrop-blur-md border border-white/30 dark:border-gray-700/30 shadow-sm\">\n              <TabsTrigger \n                value=\"combined\" \n                className=\"rounded-lg sf-pro-display text-xs sm:text-sm font-medium data-[state=active]:bg-white/90 dark:data-[state=active]:bg-gray-700/90 data-[state=active]:shadow-sm data-[state=active]:backdrop-blur-md transition-all duration-300\"\n              >\n                All Sensors\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"temperature\" \n                className=\"rounded-lg sf-pro-display text-xs sm:text-sm font-medium data-[state=active]:bg-white/90 dark:data-[state=active]:bg-gray-700/90 data-[state=active]:shadow-sm data-[state=active]:backdrop-blur-md transition-all duration-300\"\n              >\n                Temperature\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"humidity\" \n                className=\"rounded-lg sf-pro-display text-xs sm:text-sm font-medium data-[state=active]:bg-white/90 dark:data-[state=active]:bg-gray-700/90 data-[state=active]:shadow-sm data-[state=active]:backdrop-blur-md transition-all duration-300\"\n              >\n                Humidity\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"light\" \n                className=\"rounded-lg sf-pro-display text-xs sm:text-sm font-medium data-[state=active]:bg-white/90 dark:data-[state=active]:bg-gray-700/90 data-[state=active]:shadow-sm data-[state=active]:backdrop-blur-md transition-all duration-300\"\n              >\n                Light\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"soilMoisture\" \n                className=\"rounded-lg sf-pro-display text-xs sm:text-sm font-medium data-[state=active]:bg-white/90 dark:data-[state=active]:bg-gray-700/90 data-[state=active]:shadow-sm data-[state=active]:backdrop-blur-md transition-all duration-300\"\n              >\n                Soil\n              </TabsTrigger>\n            </TabsList>\n            \n            <motion.div \n              className=\"flex justify-end space-x-2 border border-white/20 dark:border-gray-700/30 bg-gray-50/40 dark:bg-gray-800/30 p-1.5 rounded-xl backdrop-blur-sm shadow-sm\"\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.5 }}\n            >\n              {['1h', '6h', '12h', '24h'].map((tf, index) => (\n                <motion.button\n                  key={tf}\n                  onClick={() => setTimeFrame(tf as TimeFrame)}\n                  className={`px-3 py-1.5 text-xs font-medium sf-pro-display rounded-lg transition-all ${\n                    timeFrame === tf \n                      ? 'bg-gradient-to-br from-primary to-primary-dark text-white shadow-md border border-white/10' \n                      : 'bg-gray-100/70 dark:bg-gray-700/50 text-gray-600 dark:text-gray-300 hover:bg-gray-200/80 dark:hover:bg-gray-600/60'\n                  }`}\n                  whileTap={{ scale: 0.92 }}\n                  whileHover={timeFrame !== tf ? { \n                    scale: 1.05,\n                    y: -1,\n                    transition: { duration: 0.2 }\n                  } : {}}\n                  initial={{ opacity: 0, x: 10 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 0.4 + (index * 0.05), duration: 0.3 }}\n                >\n                  {tf}\n                </motion.button>\n              ))}\n            </motion.div>\n          </div>\n          \n          <TabsContent value=\"temperature\">\n            <AnimatedPlantGraph\n              data={historyArray}\n              dataType=\"temperature\"\n              timeRange={timeRangeText}\n              title=\"Temperature History\"\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"humidity\">\n            <AnimatedPlantGraph\n              data={historyArray}\n              dataType=\"humidity\"\n              timeRange={timeRangeText}\n              title=\"Humidity History\"\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"light\">\n            <AnimatedPlantGraph\n              data={historyArray}\n              dataType=\"light\"\n              timeRange={timeRangeText}\n              title=\"Light Exposure History\"\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"soilMoisture\">\n            <AnimatedPlantGraph\n              data={historyArray}\n              dataType=\"soilMoisture\"\n              timeRange={timeRangeText}\n              title=\"Soil Moisture History\"\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"combined\">\n            <AnimatedPlantGraph\n              data={historyArray}\n              dataTypes={['temperature', 'humidity', 'light', 'soilMoisture']}\n              combinedView={true}\n              timeRange={timeRangeText}\n              title=\"All Sensor Data\"\n            />\n          </TabsContent>\n        </Tabs>\n        \n        <motion.div \n          className=\"flex flex-wrap justify-center items-center gap-3 mt-5 mb-2\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5, duration: 0.4 }}\n        >\n          <motion.div \n            className=\"px-4 py-1.5 bg-gray-100/60 dark:bg-gray-800/40 rounded-full border border-white/20 dark:border-gray-700/30 shadow-sm backdrop-blur-sm\"\n            whileHover={{ scale: 1.05, y: -1 }}\n          >\n            <span className=\"text-xs font-medium text-gray-600 dark:text-gray-300 sf-pro-display\">\n              {historyArray.length} data points collected\n            </span>\n          </motion.div>\n          \n          <div className=\"w-1.5 h-1.5 rounded-full bg-gray-300 dark:bg-gray-600 hidden sm:block\"></div>\n          \n          <motion.div \n            className=\"flex items-center px-4 py-1.5 bg-gray-100/60 dark:bg-gray-800/40 rounded-full border border-white/20 dark:border-gray-700/30 shadow-sm backdrop-blur-sm\"\n            whileHover={{ scale: 1.05, y: -1 }}\n          >\n            <motion.span \n              className=\"w-2.5 h-2.5 rounded-full bg-green-500 mr-2\"\n              animate={{ \n                scale: [1, 1.2, 1],\n                opacity: [1, 0.7, 1],\n                boxShadow: [\n                  '0 0 0 0 rgba(52, 211, 153, 0.7)', \n                  '0 0 0 4px rgba(52, 211, 153, 0.3)', \n                  '0 0 0 0 rgba(52, 211, 153, 0.7)'\n                ]\n              }}\n              transition={{\n                duration: 2,\n                repeat: Infinity,\n                repeatType: \"loop\"\n              }}\n            />\n            <span className=\"text-xs font-medium text-gray-600 dark:text-gray-300 sf-pro-display\">\n              Last updated {new Date().toLocaleTimeString()}\n            </span>\n          </motion.div>\n          \n          <motion.button\n            className=\"flex items-center px-4 py-1.5 bg-gradient-to-br from-primary/90 to-primary-dark text-white rounded-full text-xs font-medium sf-pro-display shadow-md border border-white/10\"\n            whileHover={{ scale: 1.05, y: -1 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <svg className=\"w-3.5 h-3.5 mr-1.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n            Refresh data\n          </motion.button>\n        </motion.div>\n      </motion.div>\n    </motion.div>\n  );\n}","size_bytes":12317},"client/src/components/DraggableWidget.tsx":{"content":"import { ReactNode } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nexport interface DraggableWidgetProps {\n  id: string;\n  index: number;\n  children: ReactNode;\n  className?: string;\n}\n\nexport function DraggableWidget({ id, index, children, className = '' }: DraggableWidgetProps) {\n  return (\n    <Draggable draggableId={id} index={index}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          className={`draggable-widget ${snapshot.isDragging ? 'dragging' : ''} ${className}`}\n          style={{\n            ...provided.draggableProps.style,\n          }}\n        >\n          <div className=\"relative group\">\n            <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n              <div className=\"flex gap-1\">\n                <div className=\"h-5 w-5 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <svg \n                    xmlns=\"http://www.w3.org/2000/svg\" \n                    width=\"14\" \n                    height=\"14\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"2\" \n                    className=\"text-primary\"\n                  >\n                    <path d=\"M9 18v-6H5l7-7 7 7h-4v6H9z\"></path>\n                  </svg>\n                </div>\n              </div>\n            </div>\n            {children}\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}","size_bytes":1612},"client/src/components/DraggableWidgetList.tsx":{"content":"import { useState, ReactNode } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { DraggableWidget } from './DraggableWidget';\n\nexport interface Widget {\n  id: string;\n  content: ReactNode;\n  type: string;\n}\n\ninterface DraggableWidgetListProps {\n  widgets: Widget[];\n  onReorder?: (widgets: Widget[]) => void;\n  className?: string;\n}\n\nexport function DraggableWidgetList({ widgets: initialWidgets, onReorder, className = '' }: DraggableWidgetListProps) {\n  const [widgets, setWidgets] = useState<Widget[]>(initialWidgets);\n\n  const handleDragEnd = (result: DropResult) => {\n    if (!result.destination) return;\n    \n    const items = Array.from(widgets);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    \n    setWidgets(items);\n    onReorder?.(items);\n    \n    // Could save the new order to localStorage here\n    localStorage.setItem('dashboardWidgets', JSON.stringify(items.map(w => ({ id: w.id, type: w.type }))));\n  };\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"dashboard-widgets\">\n        {(provided) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className={`widget-container ${className}`}\n          >\n            {widgets.map((widget, index) => (\n              <DraggableWidget \n                key={widget.id} \n                id={widget.id}\n                index={index}\n              >\n                {widget.content}\n              </DraggableWidget>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}","size_bytes":1731},"client/src/components/FloatingNavigation.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useLocation, Link } from 'wouter';\nimport { \n  Home, \n  Leaf, \n  BarChart2, \n  MessageCircle, \n  Settings,\n  Camera,\n  Upload,\n  Plus\n} from 'lucide-react';\n\nexport function FloatingNavigation() {\n  const [location] = useLocation();\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [lastScrollY, setLastScrollY] = useState(0);\n  \n  // Handle scroll effect with improved behavior for Apple-inspired UX\n  useEffect(() => {\n    const controlNavbar = () => {\n      if (typeof window !== 'undefined') {\n        // Hide navbar only when scrolling down actively and past a threshold\n        // This creates a more fluid experience similar to iOS apps\n        if (window.scrollY > lastScrollY && window.scrollY > 150) {\n          // Scrolling down & past threshold - hide navbar\n          setIsVisible(false);\n        } else if (window.scrollY < lastScrollY || window.scrollY < 50) {\n          // Scrolling up or near the top - show navbar\n          setIsVisible(true);\n        }\n        \n        // Add small delay for smoother appearance\n        const timeoutId = setTimeout(() => {\n          // Update last scroll position with a slight delay to create a more natural feel\n          setLastScrollY(window.scrollY);\n        }, 50);\n        \n        return () => clearTimeout(timeoutId);\n      }\n    };\n\n    // Add scroll event listener with passive option for better performance\n    window.addEventListener('scroll', controlNavbar, { passive: true });\n\n    // Touch events for better mobile interaction: show navbar on touch start (like tapping)\n    const handleTouchStart = () => {\n      if (!isVisible && window.scrollY > 0) {\n        setIsVisible(true);\n      }\n    };\n    \n    window.addEventListener('touchstart', handleTouchStart, { passive: true });\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('scroll', controlNavbar);\n      window.removeEventListener('touchstart', handleTouchStart);\n    };\n  }, [lastScrollY, isVisible]);\n  \n  // Define animation variants\n  const containerVariants = {\n    hidden: { opacity: 0, y: 100 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 30,\n        staggerChildren: 0.1\n      }\n    },\n    exit: {\n      opacity: 0,\n      y: 100,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 30\n      }\n    }\n  };\n  \n  const iconVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 500\n      }\n    },\n    tap: { \n      scale: 0.92,\n      y: 2\n    },\n    bounce: (delay: number) => ({\n      y: [0, -10, 0],\n      transition: {\n        delay: delay,\n        duration: 0.5,\n        times: [0, 0.5, 1],\n        type: \"spring\",\n        stiffness: 300\n      }\n    })\n  };\n  \n  const panelVariants = {\n    hidden: { opacity: 0, scale: 0.9, y: 20 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      y: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 20\n      }\n    }\n  };\n  \n  // Determine if a route is active\n  const isActive = (path: string) => location === path;\n  \n  // Navigation items\n  const navItems = [\n    { path: '/', icon: Home, label: 'Home' },\n    { path: '/my-plants', icon: Leaf, label: 'My Plants' },\n    { path: '/chat', icon: MessageCircle, label: 'Chat' },\n    { path: '/settings', icon: Settings, label: 'Settings' }\n  ];\n  \n  // Quick actions for the popup panel\n  const quickActions = [\n    { icon: Camera, label: 'Take Photo', action: () => console.log('Take photo') },\n    { icon: Upload, label: 'Upload Image', action: () => console.log('Upload image') }\n  ];\n  \n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          className=\"fixed bottom-0 left-0 right-0 z-50 flex flex-col items-center pb-6 pointer-events-none\"\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          variants={containerVariants}\n        >\n          {/* Ultra-premium quick actions panel with Apple-inspired design */}\n          <AnimatePresence>\n            {isPanelOpen && (\n              <motion.div\n                className=\"mb-6 dark:bg-gray-800/70 bg-white/80 backdrop-blur-xl rounded-3xl shadow-xl mx-4 pointer-events-auto\"\n                variants={panelVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"hidden\"\n                style={{\n                  boxShadow: '0 20px 40px rgba(0, 0, 0, 0.18), 0 10px 20px rgba(0, 0, 0, 0.1), 0 0 0 0.5px rgba(255, 255, 255, 0.3), 0 1px 3px rgba(255, 255, 255, 0.15) inset',\n                  backdropFilter: 'blur(30px)',\n                  WebkitBackdropFilter: 'blur(30px)'\n                }}\n              >\n                {/* Subtle top highlight */}\n                <div className=\"h-[1px] w-full bg-gradient-to-r from-transparent via-white/50 to-transparent opacity-50\"></div>\n                \n                <div className=\"p-6\">\n                  <h3 className=\"text-base font-semibold text-gray-800 dark:text-gray-200 mb-4 flex items-center sf-pro-display tracking-tight\">\n                    <motion.span \n                      className=\"inline-block mr-2\"\n                      animate={{\n                        rotate: [0, -10, 0, 10, 0],\n                        transition: { duration: 1.5, repeat: Infinity, repeatDelay: 3 }\n                      }}\n                    >✨</motion.span>\n                    Quick Actions\n                  </h3>\n                  \n                  <div className=\"grid grid-cols-2 gap-5 w-full\">\n                    {quickActions.map((action, index) => (\n                      <motion.button\n                        key={action.label}\n                        className=\"flex flex-col items-center space-y-3 p-5 rounded-2xl backdrop-blur-lg\"\n                        onClick={() => {\n                          action.action();\n                          setIsPanelOpen(false);\n                        }}\n                        whileTap={{ scale: 0.92 }}\n                        whileHover={{ \n                          scale: 1.05, \n                          y: -5,\n                          boxShadow: '0 15px 30px rgba(0, 0, 0, 0.15), 0 5px 15px rgba(0, 0, 0, 0.08), 0 0 0 0.5px rgba(255, 255, 255, 0.5), 0 1px 3px rgba(255, 255, 255, 0.2) inset' \n                        }}\n                        variants={iconVariants}\n                        style={{\n                          background: 'linear-gradient(135deg, rgba(255,255,255,0.24) 0%, rgba(255,255,255,0.06) 100%)',\n                          boxShadow: '0 10px 20px rgba(0, 0, 0, 0.08), 0 5px 12px rgba(0, 0, 0, 0.06), 0 0 0 0.5px rgba(255, 255, 255, 0.4), 0 1px 3px rgba(255, 255, 255, 0.15) inset'\n                        }}\n                      >\n                        {/* Animated icon container */}\n                        <motion.div\n                          className=\"bg-gradient-to-br from-primary-light/20 to-primary/10 p-3.5 rounded-xl\"\n                          animate={{\n                            boxShadow: [\n                              '0 8px 20px rgba(0, 0, 0, 0.08), 0 3px 8px rgba(0, 0, 0, 0.06), 0 0 0 0.5px rgba(255, 255, 255, 0.5)',\n                              '0 10px 25px rgba(0, 0, 0, 0.1), 0 5px 10px rgba(0, 0, 0, 0.08), 0 0 0 0.5px rgba(255, 255, 255, 0.6)',\n                              '0 8px 20px rgba(0, 0, 0, 0.08), 0 3px 8px rgba(0, 0, 0, 0.06), 0 0 0 0.5px rgba(255, 255, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{\n                            duration: 3,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                          style={{\n                            boxShadow: '0 8px 20px rgba(0, 0, 0, 0.08), 0 3px 8px rgba(0, 0, 0, 0.06), 0 0 0 0.5px rgba(255, 255, 255, 0.5)'\n                          }}\n                        >\n                          <action.icon className=\"h-8 w-8 text-primary drop-shadow-md\" />\n                        </motion.div>\n                        \n                        <div className=\"text-center\">\n                          <span className=\"text-sm font-medium text-gray-800 dark:text-gray-200 sf-pro-display tracking-tight\">\n                            {action.label}\n                          </span>\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 sf-pro-display\">\n                            {index === 0 ? 'Use camera' : 'From gallery'}\n                          </p>\n                        </div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n          \n          {/* Apple Fitness navigation bar with support for both light and dark mode */}\n          <motion.div\n            className=\"bg-white dark:bg-black border border-gray-200 dark:border-gray-800 backdrop-blur-2xl rounded-full shadow-xl mx-4 pointer-events-auto\"\n            style={{\n              boxShadow: '0 10px 30px rgba(0, 0, 0, 0.15)',\n              backdropFilter: 'blur(20px)',\n              WebkitBackdropFilter: 'blur(20px)',\n              width: 'calc(100% - 2rem)',\n              maxWidth: '500px'\n            }}\n            animate={{\n              boxShadow: [\n                '0 10px 30px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.05) inset, 0 0 0 0.5px rgba(0, 0, 0, 0.05)',\n                '0 10px 30px rgba(0, 0, 0, 0.15), 0 1px 3px rgba(0, 0, 0, 0.1) inset, 0 0 0 0.5px rgba(0, 0, 0, 0.1)',\n                '0 10px 30px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.05) inset, 0 0 0 0.5px rgba(0, 0, 0, 0.05)'\n              ]\n            }}\n            transition={{\n              duration: 5,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          >\n            <div className=\"flex items-center justify-around p-2\">\n              {navItems.map((item, index) => {\n                const active = isActive(item.path);\n                \n                return (\n                  <Link key={item.path} href={item.path}>\n                    <motion.div\n                      className={`flex flex-col items-center justify-center py-2 px-2.5 rounded-full ${\n                        active \n                          ? 'bg-gray-100/90 dark:bg-gray-800/90 shadow-lg' \n                          : 'text-gray-600 dark:text-gray-500 hover:bg-gray-100/50 dark:hover:bg-gray-800/50 transition-all'\n                      } cursor-pointer`}\n                      whileTap=\"tap\"\n                      variants={iconVariants}\n                      custom={index * 0.15}\n                      animate={active ? [\"visible\", \"bounce\"] : \"visible\"}\n                      style={{\n                        boxShadow: active ? '0 5px 15px rgba(0, 0, 0, 0.08), 0 0 0 0.5px rgba(255, 255, 255, 0.5), 0 1px 2px rgba(255, 255, 255, 0.2) inset' : 'none',\n                        backdropFilter: active ? 'blur(10px)' : 'none',\n                        WebkitBackdropFilter: active ? 'blur(10px)' : 'none'\n                      }}\n                      whileHover={!active ? {\n                        y: -3,\n                        scale: 1.05,\n                        boxShadow: '0 5px 10px rgba(0, 0, 0, 0.05)',\n                        transition: { duration: 0.2, type: \"spring\", stiffness: 300 }\n                      } : {}}\n                    >\n                      <motion.div\n                        className={`flex items-center justify-center p-2 rounded-full ${\n                          active \n                            ? 'text-primary' \n                            : 'text-gray-600 dark:text-gray-400'\n                        }`}\n                        animate={active ? {\n                          scale: [1, 1.03, 1],\n                          transition: { \n                            duration: 2,\n                            repeat: Infinity,\n                            repeatType: \"reverse\" \n                          }\n                        } : {}}\n                      >\n                        <item.icon\n                          className={`h-6 w-6 transition-transform ${active ? 'drop-shadow-md' : ''}`}\n                        />\n                      </motion.div>\n                      \n                      <span className={`text-xs mt-1.5 font-medium sf-pro-display tracking-tight ${\n                        active ? 'text-primary' : 'text-gray-600 dark:text-gray-400'\n                      }`}>\n                        {item.label}\n                      </span>\n                    </motion.div>\n                  </Link>\n                );\n              })}\n              \n              {/* Center Action Button with premium Apple-like design */}\n              <motion.button\n                className=\"flex items-center justify-center rounded-full shadow-xl\"\n                onClick={() => setIsPanelOpen(!isPanelOpen)}\n                whileTap={{ scale: 0.85 }}\n                whileHover={{ \n                  scale: 1.08, \n                  boxShadow: '0 12px 30px rgba(0, 0, 0, 0.25), 0 6px 10px rgba(0, 0, 0, 0.15), 0 0 0 0.5px rgba(255, 255, 255, 0.5), 0 1px 3px rgba(255, 255, 255, 0.15) inset', \n                  y: -3 \n                }}\n                variants={iconVariants}\n                style={{\n                  background: 'linear-gradient(145deg, #4caf50, #2e7d32)',\n                  boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2), 0 0 0 0.5px rgba(255, 255, 255, 0.3), 0 1px 3px rgba(255, 255, 255, 0.15) inset'\n                }}\n              >\n                <motion.div\n                  animate={{ \n                    rotate: isPanelOpen ? 45 : 0,\n                    scale: isPanelOpen ? 1.1 : 1\n                  }}\n                  className=\"flex items-center justify-center p-3.5\"\n                  style={{ originX: 0.5, originY: 0.5 }}\n                  transition={{ duration: 0.3, ease: \"easeInOut\", type: \"spring\", stiffness: 500 }}\n                >\n                  <Plus className=\"h-6 w-6 text-white drop-shadow-md\" />\n                </motion.div>\n              </motion.button>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":14543},"client/src/components/GrowthVisualization.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2 } from 'lucide-react';\n\ninterface GrowthVisualizationProps {\n  userId: string;\n  plantId: string;\n  plantName: string;\n  growthData: {\n    heights: Array<{ timestamp: number; value: number }>;\n    widths: Array<{ timestamp: number; value: number }>;\n    leafCounts: Array<{ timestamp: number; value: number }>;\n  };\n  isLoading?: boolean;\n}\n\nexport function GrowthVisualization({ \n  userId, \n  plantId, \n  plantName, \n  growthData, \n  isLoading = false \n}: GrowthVisualizationProps) {\n  const [activeTab, setActiveTab] = useState<string>('height');\n  \n  // Format data for recharts\n  const formatChartData = (\n    data: Array<{ timestamp: number; value: number }>,\n    valueLabel: string\n  ) => {\n    return data.map(item => ({\n      date: new Date(item.timestamp).toLocaleDateString(),\n      timestamp: item.timestamp,\n      [valueLabel]: item.value\n    }));\n  };\n  \n  const heightData = formatChartData(growthData.heights, 'height');\n  const widthData = formatChartData(growthData.widths, 'width');\n  const leafCountData = formatChartData(growthData.leafCounts, 'leafCount');\n  \n  // Check if we have data to display\n  const hasData = \n    growthData.heights.length > 0 || \n    growthData.widths.length > 0 || \n    growthData.leafCounts.length > 0;\n  \n  // Determine which tab should be active by default (the one with data)\n  useEffect(() => {\n    if (growthData.heights.length > 0) {\n      setActiveTab('height');\n    } else if (growthData.widths.length > 0) {\n      setActiveTab('width');\n    } else if (growthData.leafCounts.length > 0) {\n      setActiveTab('leafCount');\n    }\n  }, [growthData]);\n  \n  // Custom tooltip for the chart\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      const date = new Date(data.timestamp).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n      \n      return (\n        <div className=\"bg-white dark:bg-gray-800 p-3 rounded-md shadow-md border border-gray-200 dark:border-gray-700\">\n          <p className=\"font-medium text-gray-800 dark:text-white\">{date}</p>\n          {payload.map((item: any, index: number) => (\n            <p \n              key={index} \n              className=\"text-sm\"\n              style={{ color: item.color }}\n            >\n              {item.name === 'height' ? 'Height: ' : \n               item.name === 'width' ? 'Width: ' : \n               'Leaf Count: '}\n              <span className=\"font-semibold\">\n                {item.value}\n                {item.name === 'height' || item.name === 'width' ? ' cm' : ''}\n              </span>\n            </p>\n          ))}\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"w-full mt-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span>Growth Visualization</span>\n            <Badge variant=\"outline\" className=\"ml-2\">Loading</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-64\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-gray-400\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!hasData) {\n    return (\n      <Card className=\"w-full mt-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span>Growth Visualization</span>\n            <Badge variant=\"outline\" className=\"ml-2\">No Data</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center py-12\">\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            No growth measurements recorded yet. Add measurements in the timeline to see your plant's growth visualized here.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full mt-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Growth Visualization</span>\n          <Badge \n            variant=\"outline\" \n            className=\"ml-2 bg-emerald-50 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300\"\n          >\n            {growthData.heights.length + growthData.widths.length + growthData.leafCounts.length} Records\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid grid-cols-3 mb-4\">\n            <TabsTrigger \n              value=\"height\" \n              disabled={growthData.heights.length === 0}\n              className={growthData.heights.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}\n            >\n              Height\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"width\" \n              disabled={growthData.widths.length === 0}\n              className={growthData.widths.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}\n            >\n              Width\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"leafCount\" \n              disabled={growthData.leafCounts.length === 0}\n              className={growthData.leafCounts.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}\n            >\n              Leaf Count\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"height\">\n            <div className=\"h-64\">\n              {growthData.heights.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={heightData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                      <linearGradient id=\"colorHeight\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12 }} \n                      tickMargin={10}\n                      className=\"text-gray-500 dark:text-gray-400 fill-current\" \n                    />\n                    <YAxis \n                      unit=\" cm\" \n                      tick={{ fontSize: 12 }} \n                      tickMargin={10}\n                      className=\"text-gray-500 dark:text-gray-400 fill-current\" \n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"height\" \n                      name=\"Height\"\n                      stroke=\"#10b981\" \n                      fillOpacity={1} \n                      fill=\"url(#colorHeight)\" \n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No height measurements recorded yet.\n                  </p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"width\">\n            <div className=\"h-64\">\n              {growthData.widths.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={widthData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                      <linearGradient id=\"colorWidth\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12 }} \n                      tickMargin={10}\n                      className=\"text-gray-500 dark:text-gray-400 fill-current\" \n                    />\n                    <YAxis \n                      unit=\" cm\" \n                      tick={{ fontSize: 12 }} \n                      tickMargin={10}\n                      className=\"text-gray-500 dark:text-gray-400 fill-current\" \n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"width\" \n                      name=\"Width\"\n                      stroke=\"#8b5cf6\" \n                      fillOpacity={1} \n                      fill=\"url(#colorWidth)\" \n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No width measurements recorded yet.\n                  </p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"leafCount\">\n            <div className=\"h-64\">\n              {growthData.leafCounts.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={leafCountData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                    <defs>\n                      <linearGradient id=\"colorLeafCount\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12 }} \n                      tickMargin={10}\n                      className=\"text-gray-500 dark:text-gray-400 fill-current\" \n                    />\n                    <YAxis \n                      tick={{ fontSize: 12 }} \n                      tickMargin={10}\n                      className=\"text-gray-500 dark:text-gray-400 fill-current\" \n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"leafCount\" \n                      name=\"Leaf Count\"\n                      stroke=\"#3b82f6\" \n                      fillOpacity={1} \n                      fill=\"url(#colorLeafCount)\" \n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p className=\"text-gray-500 dark:text-gray-400\">\n                    No leaf count measurements recorded yet.\n                  </p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11801},"client/src/components/Header.tsx":{"content":"import { useTheme } from \"@/lib/ThemeProvider\";\nimport { Link, useLocation } from \"wouter\";\nimport { BarChart3, MessageSquare, Leaf, Settings as SettingsIcon, Sun, Moon, Menu } from \"lucide-react\";\nimport { useAuth } from \"@/lib/AuthProvider\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { userSignOut } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { useDevice } from \"@/hooks/use-device\";\n\nexport function Header() {\n  const { theme, toggleTheme } = useTheme();\n  const [location, setLocation] = useLocation();\n  const { user, profile } = useAuth();\n  const { isMobile, isMobileDevice } = useDevice();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  \n  const handleSignOut = async () => {\n    await userSignOut();\n    setLocation('/login');\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n  \n  return (\n    <header className=\"border-b border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 py-3 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-2\">\n          <motion.div\n            animate={{ rotate: [0, 10, 0, -10, 0] }}\n            transition={{ duration: 5, repeat: Infinity, ease: \"easeInOut\" }}\n          >\n            <Leaf className=\"h-6 w-6 text-green-600 dark:text-green-500\" />\n          </motion.div>\n          <h1 className=\"text-xl font-semibold\">Smart Plant Monitor</h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-6\">\n          {/* Navigation Links */}\n          <nav className=\"flex items-center space-x-1 md:space-x-2\">\n            <Link href=\"/\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`flex items-center space-x-1 px-3 py-2 rounded-md transition-colors cursor-pointer ${location === '/' ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' : 'text-gray-600 hover:text-green-600 dark:text-gray-300 dark:hover:text-green-400'}`}\n              >\n                <BarChart3 className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Dashboard</span>\n              </motion.div>\n            </Link>\n            \n            <Link href=\"/my-plants\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`flex items-center space-x-1 px-3 py-2 rounded-md transition-colors cursor-pointer ${location === '/my-plants' ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' : 'text-gray-600 hover:text-green-600 dark:text-gray-300 dark:hover:text-green-400'}`}\n              >\n                <Leaf className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">My Plants</span>\n              </motion.div>\n            </Link>\n            \n            <Link href=\"/chat\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`flex items-center space-x-1 px-3 py-2 rounded-md transition-colors cursor-pointer ${location === '/chat' ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' : 'text-gray-600 hover:text-green-600 dark:text-gray-300 dark:hover:text-green-400'}`}\n              >\n                <MessageSquare className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Plant Chat</span>\n              </motion.div>\n            </Link>\n            \n            <Link href=\"/settings\">\n              <motion.div \n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`flex items-center space-x-1 px-3 py-2 rounded-md transition-colors cursor-pointer ${location === '/settings' ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400' : 'text-gray-600 hover:text-green-600 dark:text-gray-300 dark:hover:text-green-400'}`}\n              >\n                <SettingsIcon className=\"h-4 w-4\" />\n                <span className=\"hidden sm:inline\">Settings</span>\n              </motion.div>\n            </Link>\n          </nav>\n          \n          {/* User Menu */}\n          {user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <motion.div whileHover={{ scale: 1.05 }} className=\"cursor-pointer\">\n                  <Avatar className=\"h-8 w-8 border border-gray-200 dark:border-gray-700\">\n                    {profile?.photoURL && <AvatarImage src={profile.photoURL} alt={profile.displayName} />}\n                    <AvatarFallback className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n                      {profile?.displayName ? getInitials(profile.displayName) : 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                </motion.div>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <div className=\"px-2 py-1.5\">\n                  <p className=\"text-sm font-medium\">{profile?.displayName}</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">{profile?.email}</p>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/my-plants\">My Plants</Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/chat\">Plant Chat</Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\">Settings</Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleSignOut} className=\"text-red-600 dark:text-red-400\">\n                  Sign out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <Button \n              onClick={() => setLocation('/login')}\n              size=\"sm\" \n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n            >\n              Sign In\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6692},"client/src/components/NotificationSettings.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NotificationSettingsProps {\n  onSave: (settings: NotificationSettingsValues) => void;\n}\n\nexport interface NotificationSettingsValues {\n  enableNotifications: boolean;\n  lowMoistureAlerts: boolean;\n  temperatureAlerts: boolean;\n  humidityAlerts: boolean;\n  email: string;\n}\n\nexport function NotificationSettings({ onSave }: NotificationSettingsProps) {\n  const { toast } = useToast();\n  const [settings, setSettings] = useState<NotificationSettingsValues>({\n    enableNotifications: true,\n    lowMoistureAlerts: true,\n    temperatureAlerts: false,\n    humidityAlerts: false,\n    email: ''\n  });\n  \n  const handleToggle = (field: keyof NotificationSettingsValues) => {\n    setSettings({\n      ...settings,\n      [field]: !settings[field as keyof NotificationSettingsValues]\n    });\n  };\n  \n  const handleEmailChange = (email: string) => {\n    setSettings({\n      ...settings,\n      email\n    });\n  };\n  \n  const handleSave = () => {\n    onSave(settings);\n    toast({\n      title: \"Settings saved\",\n      description: \"Your notification settings have been updated successfully.\",\n    });\n  };\n  \n  return (\n    <section>\n      <Card className=\"bg-white dark:bg-slate-800 shadow-sm border border-gray-100 dark:border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium\">Notification Settings</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label \n                htmlFor=\"notifications-toggle\" \n                className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 cursor-pointer\"\n              >\n                <span className=\"material-icons text-sm text-gray-500\">notifications</span>\n                <span>Enable Notifications</span>\n              </Label>\n              <Switch \n                id=\"notifications-toggle\" \n                checked={settings.enableNotifications}\n                onCheckedChange={() => handleToggle('enableNotifications')}\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <Label \n                htmlFor=\"moisture-toggle\" \n                className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 cursor-pointer\"\n              >\n                <span className=\"material-icons text-sm text-gray-500\">water</span>\n                <span>Low Moisture Alerts</span>\n              </Label>\n              <Switch \n                id=\"moisture-toggle\" \n                checked={settings.lowMoistureAlerts}\n                onCheckedChange={() => handleToggle('lowMoistureAlerts')}\n                disabled={!settings.enableNotifications}\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <Label \n                htmlFor=\"temperature-toggle\" \n                className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 cursor-pointer\"\n              >\n                <span className=\"material-icons text-sm text-gray-500\">thermostat</span>\n                <span>Temperature Alerts</span>\n              </Label>\n              <Switch \n                id=\"temperature-toggle\" \n                checked={settings.temperatureAlerts}\n                onCheckedChange={() => handleToggle('temperatureAlerts')}\n                disabled={!settings.enableNotifications}\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <Label \n                htmlFor=\"humidity-toggle\" \n                className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 cursor-pointer\"\n              >\n                <span className=\"material-icons text-sm text-gray-500\">water_drop</span>\n                <span>Humidity Alerts</span>\n              </Label>\n              <Switch \n                id=\"humidity-toggle\" \n                checked={settings.humidityAlerts}\n                onCheckedChange={() => handleToggle('humidityAlerts')}\n                disabled={!settings.enableNotifications}\n              />\n            </div>\n            \n            <div>\n              <Label \n                htmlFor=\"email-input\" \n                className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 mb-2\"\n              >\n                <span className=\"material-icons text-sm text-gray-500\">mail</span>\n                <span>Email for Notifications</span>\n              </Label>\n              <Input \n                id=\"email-input\"\n                type=\"email\" \n                placeholder=\"your@email.com\" \n                value={settings.email}\n                onChange={(e) => handleEmailChange(e.target.value)}\n                disabled={!settings.enableNotifications}\n              />\n            </div>\n            \n            <Button \n              className=\"w-full\"\n              onClick={handleSave}\n            >\n              Save Notification Settings\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":5479},"client/src/components/OptimizeEnvironmentButton.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, Sparkles } from 'lucide-react';\nimport { getOptimalEnvironmentValues, OptimalEnvironmentValues } from '@/lib/environmentOptimizer';\nimport { motion } from 'framer-motion';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { cn } from '@/lib/utils';\n\ninterface OptimizeEnvironmentButtonProps {\n  plantType: string;\n  onOptimize: (values: OptimalEnvironmentValues) => void;\n}\n\nexport function OptimizeEnvironmentButton({ \n  plantType, \n  onOptimize \n}: OptimizeEnvironmentButtonProps) {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [showResults, setShowResults] = useState(false);\n  const [optimizedValues, setOptimizedValues] = useState<OptimalEnvironmentValues | null>(null);\n\n  const handleOptimizeClick = async () => {\n    if (!plantType) {\n      toast({\n        title: \"Plant Type Required\",\n        description: \"Please select a plant type to optimize the environment.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const values = await getOptimalEnvironmentValues(plantType);\n      setOptimizedValues(values);\n      setShowResults(true);\n      onOptimize(values);\n      \n      // Show success toast\n      toast({\n        title: \"Environment Optimized\",\n        description: `${plantType} environment values have been optimized.`,\n        variant: \"default\"\n      });\n    } catch (error) {\n      console.error(\"Error optimizing environment:\", error);\n      toast({\n        title: \"Optimization Failed\",\n        description: \"Could not determine optimal environment values. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCloseResults = () => {\n    setShowResults(false);\n  };\n\n  return (\n    <>\n      <motion.div\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n      >\n        <Button \n          onClick={handleOptimizeClick}\n          disabled={loading || !plantType}\n          className={cn(\n            \"relative bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-medium\",\n            \"py-2 px-4 rounded-lg transition-all duration-300 shadow-md hover:shadow-lg border-0\",\n            \"flex items-center gap-2 w-full justify-center\"\n          )}\n        >\n          {loading ? (\n            <>\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              <span>Analyzing Plant...</span>\n            </>\n          ) : (\n            <>\n              <Sparkles className=\"h-4 w-4\" />\n              <span>Optimize Using AI</span>\n            </>\n          )}\n        </Button>\n      </motion.div>\n\n      <Dialog open={showResults} onOpenChange={setShowResults}>\n        <DialogContent className=\"sm:max-w-[500px] bg-white dark:bg-gray-900 rounded-xl p-0 overflow-hidden\">\n          <DialogHeader className=\"p-6 bg-gradient-to-r from-blue-500/10 to-purple-600/10 border-b\">\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\n              <Sparkles className=\"h-5 w-5 text-purple-500\" />\n              Optimized Environment\n            </DialogTitle>\n            <DialogDescription>\n              AI-optimized settings for {plantType}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {optimizedValues && (\n            <div className=\"p-6 space-y-4\">\n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium\">Temperature</h3>\n                <div className=\"flex items-center justify-between bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Optimal Range</span>\n                  <span className=\"font-semibold\">\n                    {optimizedValues.temperature.min}°C - {optimizedValues.temperature.max}°C\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium\">Humidity</h3>\n                <div className=\"flex items-center justify-between bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Optimal Range</span>\n                  <span className=\"font-semibold\">\n                    {optimizedValues.humidity.min}% - {optimizedValues.humidity.max}%\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium\">Light</h3>\n                <div className=\"flex items-center justify-between bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Optimal Range</span>\n                  <span className=\"font-semibold\">\n                    {optimizedValues.light.min}% - {optimizedValues.light.max}%\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 italic\">\n                  {optimizedValues.light.description}\n                </p>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h3 className=\"text-sm font-medium\">Soil Moisture</h3>\n                <div className=\"flex items-center justify-between bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Optimal Range</span>\n                  <span className=\"font-semibold\">\n                    {optimizedValues.soilMoisture.min}% - {optimizedValues.soilMoisture.max}%\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 italic\">\n                  {optimizedValues.soilMoisture.description}\n                </p>\n              </div>\n              \n              {optimizedValues.recommendations.length > 0 && (\n                <div className=\"space-y-3 pt-2\">\n                  <h3 className=\"text-sm font-medium\">Recommendations</h3>\n                  <ul className=\"space-y-1\">\n                    {optimizedValues.recommendations.map((rec, index) => (\n                      <li key={index} className=\"text-sm flex items-start gap-2\">\n                        <span className=\"text-purple-500 mt-1\">•</span>\n                        <span>{rec}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          )}\n          \n          <DialogFooter className=\"p-4 bg-gray-50 dark:bg-gray-800/50\">\n            <Button onClick={handleCloseResults}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":7038},"client/src/components/PlantChatMessage.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { ChatMessage } from \"@/lib/gemini\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card } from \"@/components/ui/card\";\nimport { LucideLoader2, X, Check, Bookmark, Copy, Share2 } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface ChatMessageProps {\n  message: ChatMessage;\n  isLoading?: boolean;\n}\n\nexport function PlantChatMessage({ message, isLoading }: ChatMessageProps) {\n  const isUser = message.role === 'user';\n  const [isSwiped, setIsSwiped] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const messageRef = useRef<HTMLDivElement>(null);\n  \n  // Handle touch start\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (isUser) return; // Only allow swiping AI messages\n    setStartX(e.touches[0].clientX);\n  };\n\n  // Handle touch move\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (isUser || !messageRef.current) return;\n    \n    const currentX = e.touches[0].clientX;\n    const diff = startX - currentX;\n    \n    // If swiping left\n    if (diff > 30) {\n      setIsSwiped(true);\n    }\n    // If swiping right\n    else if (diff < -30) {\n      setIsSwiped(false);\n    }\n  };\n  \n  // Copy message to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(message.content);\n    // Reset swipe state\n    setIsSwiped(false);\n  };\n  \n  // Convert markdown-style content to JSX with basic formatting\n  const formatContent = (content: string) => {\n    // Handle bold text with **\n    let formattedContent = content.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n    \n    // Handle newlines\n    formattedContent = formattedContent.replace(/\\n/g, '<br />');\n    \n    return <div dangerouslySetInnerHTML={{ __html: formattedContent }} />;\n  };\n  \n  return (\n    <div className={`flex gap-3 ${isUser ? 'flex-row-reverse' : ''}`}>\n      <Avatar className=\"h-10 w-10 shrink-0\">\n        {isUser ? (\n          <>\n            <AvatarFallback>U</AvatarFallback>\n            <AvatarImage src=\"/user-avatar.png\" alt=\"User\" />\n          </>\n        ) : (\n          <>\n            <AvatarFallback className=\"bg-green-600 text-white\">🌱</AvatarFallback>\n            <AvatarImage src=\"/plant-avatar.png\" alt=\"Plant Assistant\" />\n          </>\n        )}\n      </Avatar>\n      \n      {/* Swipable message container for mobile */}\n      <div className=\"relative flex-1 touch-pan-y\" ref={messageRef}>\n        <motion.div \n          className=\"relative\" \n          animate={{ x: isSwiped ? '-80px' : 0 }}\n          transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n        >\n          <Card \n            className={`p-4 max-w-[95%] md:max-w-[80%] ${isUser ? 'bg-primary/10 dark:bg-primary/20 ml-auto' : 'bg-muted'}`}\n          >\n            {isLoading ? (\n              <div className=\"flex items-center gap-2\">\n                <LucideLoader2 className=\"h-4 w-4 animate-spin\" />\n                <span className=\"text-muted-foreground\">Thinking...</span>\n              </div>\n            ) : (\n              <div className=\"whitespace-pre-wrap\">\n                {formatContent(message.content)}\n              </div>\n            )}\n          </Card>\n        </motion.div>\n        \n        {/* Action buttons that appear when swiped */}\n        {!isUser && !isLoading && (\n          <motion.div \n            className=\"absolute top-0 right-0 bottom-0 flex items-center gap-1 px-1\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: isSwiped ? 1 : 0 }}\n          >\n            <button \n              className=\"w-8 h-8 rounded-full bg-blue-500 text-white flex items-center justify-center\"\n              onClick={copyToClipboard}\n            >\n              <Copy size={14} />\n            </button>\n            \n            <button \n              className=\"w-8 h-8 rounded-full bg-green-500 text-white flex items-center justify-center\"\n              onClick={() => setIsSwiped(false)}\n            >\n              <Check size={14} />\n            </button>\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":4183},"client/src/components/PlantConfig.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PlantConfigProps {\n  onSave: (config: PlantConfigValues) => void;\n}\n\nexport interface PlantConfigValues {\n  plantType: string;\n  tempMin: number;\n  tempMax: number;\n  humidityMin: number;\n  humidityMax: number;\n  soilMoistureMin: number;\n  soilMoistureMax: number;\n}\n\nexport function PlantConfig({ onSave }: PlantConfigProps) {\n  const { toast } = useToast();\n  const [config, setConfig] = useState<PlantConfigValues>({\n    plantType: 'succulent',\n    tempMin: 18,\n    tempMax: 26,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50\n  });\n  \n  const handleChange = (field: keyof PlantConfigValues, value: string | number) => {\n    setConfig({\n      ...config,\n      [field]: value\n    });\n  };\n  \n  const handleSave = () => {\n    onSave(config);\n    toast({\n      title: \"Configuration saved\",\n      description: \"Your plant configuration has been updated successfully.\",\n    });\n  };\n  \n  return (\n    <section>\n      <Card className=\"bg-white dark:bg-slate-800 shadow-sm border border-gray-100 dark:border-gray-700\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium\">Plant Configuration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200\">\n                <span className=\"material-icons text-sm text-gray-500\">spa</span>\n                <span>Plant Type</span>\n              </Label>\n              <Select \n                value={config.plantType} \n                onValueChange={(value) => handleChange('plantType', value)}\n              >\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Select plant type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"succulent\">Succulent</SelectItem>\n                  <SelectItem value=\"tropical\">Tropical</SelectItem>\n                  <SelectItem value=\"herb\">Herb</SelectItem>\n                  <SelectItem value=\"vegetable\">Vegetable</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 mb-2\">\n                <span className=\"material-icons text-sm text-gray-500\">thermostat</span>\n                <span>Ideal Temperature Range</span>\n              </Label>\n              <div className=\"flex items-center space-x-3\">\n                <Input \n                  type=\"number\" \n                  className=\"w-20\" \n                  value={config.tempMin}\n                  onChange={(e) => handleChange('tempMin', parseInt(e.target.value))}\n                />\n                <span className=\"text-gray-500\">to</span>\n                <Input \n                  type=\"number\" \n                  className=\"w-20\" \n                  value={config.tempMax}\n                  onChange={(e) => handleChange('tempMax', parseInt(e.target.value))}\n                />\n                <span className=\"text-gray-500\">°C</span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 mb-2\">\n                <span className=\"material-icons text-sm text-gray-500\">water_drop</span>\n                <span>Ideal Humidity Range</span>\n              </Label>\n              <div className=\"flex items-center space-x-3\">\n                <Input \n                  type=\"number\" \n                  className=\"w-20\" \n                  value={config.humidityMin}\n                  onChange={(e) => handleChange('humidityMin', parseInt(e.target.value))}\n                />\n                <span className=\"text-gray-500\">to</span>\n                <Input \n                  type=\"number\" \n                  className=\"w-20\" \n                  value={config.humidityMax}\n                  onChange={(e) => handleChange('humidityMax', parseInt(e.target.value))}\n                />\n                <span className=\"text-gray-500\">%</span>\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200 mb-2\">\n                <span className=\"material-icons text-sm text-gray-500\">grass</span>\n                <span>Ideal Soil Moisture Range</span>\n              </Label>\n              <div className=\"flex items-center space-x-3\">\n                <Input \n                  type=\"number\" \n                  className=\"w-20\" \n                  value={config.soilMoistureMin}\n                  onChange={(e) => handleChange('soilMoistureMin', parseInt(e.target.value))}\n                />\n                <span className=\"text-gray-500\">to</span>\n                <Input \n                  type=\"number\" \n                  className=\"w-20\" \n                  value={config.soilMoistureMax}\n                  onChange={(e) => handleChange('soilMoistureMax', parseInt(e.target.value))}\n                />\n                <span className=\"text-gray-500\">%</span>\n              </div>\n            </div>\n            \n            <Button \n              className=\"w-full\"\n              onClick={handleSave}\n            >\n              Save Configuration\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </section>\n  );\n}\n","size_bytes":5918},"client/src/components/PlantControls.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from '@/hooks/use-toast';\nimport { Leaf, Droplet, Sun, Thermometer, Droplets, Gauge, Flower, Loader2, RefreshCw, AlertTriangle, \n         Sparkle as Sparkles, DropletIcon } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlantControls as PlantControlsType, SensorData } from '@/lib/firebase';\nimport { OptimizeEnvironmentButton } from './OptimizeEnvironmentButton';\nimport { getOptimalEnvironmentValues, OptimalEnvironmentValues } from '@/lib/environmentOptimizer';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\n\ninterface PlantControlsProps {\n  onAction: (action: string, state: boolean) => void;\n  sensorData?: SensorData | null;\n}\n\nexport function PlantControls({ onAction, sensorData }: PlantControlsProps) {\n  const { toast } = useToast();\n  const [controls, setControls] = useState<PlantControlsType>({\n    uvLight: false,\n    wateringActive: false\n  });\n  const [isWatering, setIsWatering] = useState(false);\n  const [wateringDisabled, setWateringDisabled] = useState(false);\n  const [plantType, setPlantType] = useState<string>(\"\");\n  const [plantTypeLoading, setPlantTypeLoading] = useState(false);\n  const [customRanges, setCustomRanges] = useState({\n    temperature: { min: 10, max: 32 },\n    humidity: { min: 20, max: 80 },\n    light: { min: 30, max: 70 },\n    soilMoisture: { min: 30, max: 70 }\n  });\n  \n  // Temperature and humidity status indicators - using dynamic thresholds\n  const getTemperatureStatus = (temp: number) => {\n    if (temp < customRanges.temperature.min) return \"Low\";\n    if (temp > customRanges.temperature.max) return \"High\";\n    return \"Optimal\";\n  };\n  \n  const getHumidityStatus = (humidity: number) => {\n    // Normalize humidity if the value is unrealistically high (legacy data might be in ppm)\n    const normalizedHumidity = humidity > 100 ? humidity / 1000 : humidity;\n    if (normalizedHumidity < customRanges.humidity.min) return \"Low\";\n    if (normalizedHumidity > customRanges.humidity.max) return \"High\";\n    return \"Optimal\";\n  };\n  \n  // Get temperature color based on value - using dynamic thresholds\n  const getTemperatureColor = (temp: number) => {\n    if (temp < customRanges.temperature.min) return \"text-blue-500\";\n    if (temp > customRanges.temperature.max) return \"text-red-500\";\n    if (temp >= (customRanges.temperature.min + customRanges.temperature.max) / 2) return \"text-orange-500\";\n    return \"text-green-500\";\n  };\n  \n  const getTemperatureBackground = (temp: number) => {\n    if (temp < customRanges.temperature.min) return \"bg-blue-100 dark:bg-blue-900/30\";\n    if (temp > customRanges.temperature.max) return \"bg-red-100 dark:bg-red-900/30\";\n    if (temp >= (customRanges.temperature.min + customRanges.temperature.max) / 2) return \"bg-orange-100 dark:bg-orange-900/30\";\n    return \"bg-green-100 dark:bg-green-900/30\";\n  };\n  \n  // Get humidity color based on value - using dynamic thresholds\n  const getHumidityColor = (humidity: number) => {\n    // Normalize humidity if the value is unrealistically high (legacy data might be in ppm)\n    const normalizedHumidity = humidity > 100 ? humidity / 1000 : humidity;\n    if (normalizedHumidity < customRanges.humidity.min) return \"text-orange-500\";\n    if (normalizedHumidity > customRanges.humidity.max) return \"text-blue-500\";\n    return \"text-green-500\";\n  };\n  \n  const getHumidityBackground = (humidity: number) => {\n    // Normalize humidity if the value is unrealistically high (legacy data might be in ppm)\n    const normalizedHumidity = humidity > 100 ? humidity / 1000 : humidity;\n    if (normalizedHumidity < customRanges.humidity.min) return \"bg-orange-100 dark:bg-orange-900/30\";\n    if (normalizedHumidity > customRanges.humidity.max) return \"bg-blue-100 dark:bg-blue-900/30\";\n    return \"bg-green-100 dark:bg-green-900/30\";\n  };\n  \n  // Get light status based on value - using dynamic thresholds\n  const getLightStatus = (light: number) => {\n    if (light < customRanges.light.min) return \"Low\";\n    if (light > customRanges.light.max) return \"High\";\n    return \"Optimal\";\n  };\n  \n  // Get light color based on value - using dynamic thresholds\n  const getLightColor = (light: number) => {\n    if (light < customRanges.light.min) return \"text-gray-500\";\n    if (light > customRanges.light.max) return \"text-yellow-500\";\n    return \"text-yellow-400\";\n  };\n  \n  // Get light background based on value - using dynamic thresholds\n  const getLightBackground = (light: number) => {\n    if (light < customRanges.light.min) return \"bg-gray-100 dark:bg-gray-800\";\n    if (light > customRanges.light.max) return \"bg-yellow-100 dark:bg-yellow-900/30\";\n    return \"bg-yellow-50 dark:bg-yellow-900/20\";\n  };\n  \n  // Get soil moisture status based on value - using dynamic thresholds\n  const getSoilMoistureStatus = (soilMoisture: number) => {\n    if (soilMoisture < customRanges.soilMoisture.min) return \"Dry\";\n    if (soilMoisture > customRanges.soilMoisture.max) return \"Wet\";\n    return \"Optimal\";\n  };\n  \n  // Get soil moisture color based on value - using dynamic thresholds\n  const getSoilMoistureColor = (soilMoisture: number) => {\n    if (soilMoisture < customRanges.soilMoisture.min) return \"text-orange-500\";\n    if (soilMoisture > customRanges.soilMoisture.max) return \"text-blue-500\";\n    return \"text-emerald-500\";\n  };\n  \n  // Get soil moisture background based on value - using dynamic thresholds\n  const getSoilMoistureBackground = (soilMoisture: number) => {\n    if (soilMoisture < customRanges.soilMoisture.min) return \"bg-orange-100 dark:bg-orange-900/30\";\n    if (soilMoisture > customRanges.soilMoisture.max) return \"bg-blue-100 dark:bg-blue-900/30\";\n    return \"bg-emerald-100 dark:bg-emerald-900/30\";\n  };\n\n  // Handle UV light toggle\n  const handleUvLightToggle = (checked: boolean) => {\n    setControls(prev => ({ ...prev, uvLight: checked }));\n    onAction('uvLight', checked);\n  };\n\n  // Handle watering button click\n  const handleWateringClick = () => {\n    if (wateringDisabled) return;\n    \n    setIsWatering(true);\n    setWateringDisabled(true);\n    \n    onAction('watering', true);\n    \n    // Auto-disable watering after 3 seconds\n    setTimeout(() => {\n      setIsWatering(false);\n      onAction('watering', false);\n      \n      // Prevent button spamming by adding a cooldown\n      setTimeout(() => {\n        setWateringDisabled(false);\n      }, 5000);\n    }, 3000);\n  };\n  \n  // Handle plant type change\n  const handlePlantTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newPlantType = e.target.value;\n    setPlantType(newPlantType);\n    \n    // Auto-optimize if plant type is 3 characters or longer and has changed\n    if (newPlantType.length >= 3 && newPlantType !== plantType) {\n      // Use a delay to prevent too many API calls while typing\n      const optimizationTimer = setTimeout(async () => {\n        try {\n          setPlantTypeLoading(true);\n          const values = await getOptimalEnvironmentValues(newPlantType);\n          handleOptimize(values);\n        } catch (error) {\n          console.error(\"Error auto-optimizing environment:\", error);\n          toast({\n            title: \"Auto-optimization Failed\",\n            description: \"Could not determine optimal environment values automatically.\",\n            variant: \"destructive\"\n          });\n        } finally {\n          setPlantTypeLoading(false);\n        }\n      }, 1000); // 1-second delay to avoid multiple API calls while typing\n      \n      return () => clearTimeout(optimizationTimer);\n    }\n  };\n  \n  // Handle environment optimization from AI\n  const handleOptimize = (optimalValues: OptimalEnvironmentValues) => {\n    setCustomRanges({\n      temperature: { \n        min: optimalValues.temperature.min, \n        max: optimalValues.temperature.max \n      },\n      humidity: { \n        min: optimalValues.humidity.min, \n        max: optimalValues.humidity.max \n      },\n      light: { \n        min: optimalValues.light.min, \n        max: optimalValues.light.max \n      },\n      soilMoisture: { \n        min: optimalValues.soilMoisture.min, \n        max: optimalValues.soilMoisture.max \n      }\n    });\n    \n    // Update the status indicator functions with the new ranges\n    // This dynamically applies the AI-optimized thresholds\n    toast({\n      title: \"Environment Optimized\",\n      description: `Thresholds have been set for ${plantType}`,\n    });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6, type: \"spring\", stiffness: 100 }}\n    >\n      <Card className=\"glassmorphic-card subtle-card-shine overflow-hidden border-0\">\n        <motion.div \n          className=\"absolute inset-0 bg-gradient-to-br from-emerald-50/40 to-blue-50/30 dark:from-emerald-900/10 dark:to-blue-900/5 z-0\"\n          animate={{ \n            opacity: [0.5, 0.7, 0.5],\n            background: [\n              \"linear-gradient(120deg, rgba(209, 250, 229, 0.3), rgba(219, 234, 254, 0.2))\",\n              \"linear-gradient(120deg, rgba(209, 250, 229, 0.4), rgba(219, 234, 254, 0.3))\",\n              \"linear-gradient(120deg, rgba(209, 250, 229, 0.3), rgba(219, 234, 254, 0.2))\"\n            ]\n          }}\n          transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n        \n        <CardHeader className=\"relative z-10 border-b border-gray-100/50 dark:border-gray-800/50\">\n          <CardTitle className=\"text-lg font-medium flex items-center gap-2\">\n            <motion.div\n              animate={{ \n                rotate: [0, 5, 0, -5, 0],\n                scale: [1, 1.05, 1, 1.05, 1]\n              }}\n              transition={{ duration: 5, repeat: Infinity, ease: \"easeInOut\" }}\n              className=\"bg-gradient-to-br from-green-100 to-emerald-50 dark:from-green-900/30 dark:to-emerald-900/20 p-2 rounded-full\"\n            >\n              <Leaf className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n            </motion.div>\n            <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-green-600 to-emerald-500 dark:from-green-400 dark:to-emerald-300 font-semibold\">\n              Plant Environment\n            </span>\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"relative z-10 p-4\">\n          <div className=\"grid grid-cols-1 gap-3\">\n            {/* UV Light Control */}\n            <motion.div \n              className=\"glassmorphic p-3 rounded-xl flex items-center justify-between\"\n              whileHover={{ scale: 1.02, boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.1)\" }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n            >\n              <div className=\"flex items-center gap-3\">\n                <motion.div \n                  className={`p-2 rounded-full ${\n                    controls.uvLight \n                      ? 'bg-gradient-to-br from-yellow-100 to-amber-50 dark:from-yellow-900/40 dark:to-amber-900/20' \n                      : 'bg-gray-100 dark:bg-gray-800/60'\n                  }`}\n                  animate={{ \n                    boxShadow: controls.uvLight \n                      ? ['0 0 0 rgba(252, 211, 77, 0)', '0 0 15px rgba(252, 211, 77, 0.7)', '0 0 0 rgba(252, 211, 77, 0)'] \n                      : 'none'\n                  }}\n                  transition={{ duration: 2, repeat: controls.uvLight ? Infinity : 0 }}\n                >\n                  <Sun className={`h-5 w-5 ${\n                    controls.uvLight \n                      ? 'text-yellow-500 dark:text-yellow-400' \n                      : 'text-gray-400 dark:text-gray-500'\n                  }`} />\n                </motion.div>\n                <div>\n                  <h3 className=\"font-medium text-sm\">UV Light</h3>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {controls.uvLight ? 'Active' : 'Inactive'}\n                  </p>\n                </div>\n              </div>\n              \n              <Switch \n                checked={controls.uvLight} \n                onCheckedChange={handleUvLightToggle} \n                className={`data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-green-500 data-[state=checked]:to-emerald-400 h-6 w-11`}\n              />\n            </motion.div>\n            \n            {/* Temperature & Humidity Readings */}\n            <div className=\"flex gap-3\">\n              {/* Temperature Reading */}\n              <motion.div \n                className=\"flex-1 glassmorphic rounded-xl p-0 overflow-hidden\"\n                whileHover={{ \n                  scale: 1.02, \n                  boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1)\" \n                }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <div className={`h-1 w-full ${\n                  sensorData \n                    ? sensorData.temperature > 35 \n                      ? 'bg-gradient-to-r from-orange-500 to-red-500' \n                      : sensorData.temperature < 15 \n                        ? 'bg-gradient-to-r from-blue-500 to-cyan-400' \n                        : 'bg-gradient-to-r from-green-500 to-emerald-400'\n                    : 'bg-gradient-to-r from-gray-300 to-gray-200 dark:from-gray-700 dark:to-gray-600'\n                }`} />\n                \n                <div className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <motion.div \n                        className={`p-2 rounded-full ${\n                          sensorData \n                            ? sensorData.temperature > 30 \n                              ? 'bg-gradient-to-br from-orange-100 to-red-50 dark:from-orange-900/40 dark:to-red-900/20' \n                              : sensorData.temperature < 15 \n                                ? 'bg-gradient-to-br from-blue-100 to-cyan-50 dark:from-blue-900/40 dark:to-cyan-900/20' \n                                : 'bg-gradient-to-br from-green-100 to-emerald-50 dark:from-green-900/40 dark:to-emerald-900/20'\n                            : 'bg-gray-100 dark:bg-gray-800/60'\n                        }`}\n                        animate={sensorData?.temperature && sensorData.temperature > 30 ? {\n                          boxShadow: ['0 0 0 rgba(251, 146, 60, 0)', '0 0 12px rgba(251, 146, 60, 0.6)', '0 0 0 rgba(251, 146, 60, 0)'],\n                        } : {}}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        <Thermometer className={`h-5 w-5 ${\n                          sensorData \n                            ? sensorData.temperature > 30 \n                              ? 'text-orange-500 dark:text-orange-400' \n                              : sensorData.temperature < 15 \n                                ? 'text-blue-500 dark:text-blue-400' \n                                : 'text-green-500 dark:text-green-400'\n                            : 'text-gray-400 dark:text-gray-500'\n                        }`} />\n                      </motion.div>\n                      <div>\n                        <div className=\"flex items-center\">\n                          <h3 className=\"font-medium text-sm\">Temperature</h3>\n                          <motion.div \n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            className={`ml-2 px-1.5 py-0.5 rounded text-[10px] font-medium ${\n                              sensorData \n                                ? sensorData.temperature > 30 \n                                  ? 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300' \n                                  : sensorData.temperature < 15 \n                                    ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' \n                                    : 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'\n                                : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'\n                            }`}\n                          >\n                            {sensorData ? getTemperatureStatus(sensorData.temperature) : 'No data'}\n                          </motion.div>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-0.5\">\n                          {sensorData ? (sensorData.temperature < 22 ? 'Too cool' : sensorData.temperature > 28 ? 'Too warm' : 'Perfect range') : 'Waiting for data...'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <motion.span \n                        className=\"text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300\"\n                        animate={sensorData ? { scale: [1, 1.05, 1] } : {}}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        {sensorData ? `${sensorData.temperature}°C` : '--'}\n                      </motion.span>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n              \n              {/* Humidity Reading */}\n              <motion.div \n                className=\"flex-1 glassmorphic rounded-xl p-0 overflow-hidden\"\n                whileHover={{ \n                  scale: 1.02, \n                  boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1)\" \n                }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <div className={`h-1 w-full ${\n                  sensorData \n                    ? sensorData.humidity > 70 \n                      ? 'bg-gradient-to-r from-blue-500 to-cyan-400' \n                      : sensorData.humidity < 30 \n                        ? 'bg-gradient-to-r from-yellow-500 to-amber-400' \n                        : 'bg-gradient-to-r from-green-500 to-emerald-400'\n                    : 'bg-gradient-to-r from-gray-300 to-gray-200 dark:from-gray-700 dark:to-gray-600'\n                }`} />\n                \n                <div className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <motion.div \n                        className={`p-2 rounded-full ${\n                          sensorData \n                            ? sensorData.humidity > 70 \n                              ? 'bg-gradient-to-br from-blue-100 to-cyan-50 dark:from-blue-900/40 dark:to-cyan-900/20' \n                              : sensorData.humidity < 30 \n                                ? 'bg-gradient-to-br from-yellow-100 to-amber-50 dark:from-yellow-900/40 dark:to-amber-900/20' \n                                : 'bg-gradient-to-br from-green-100 to-emerald-50 dark:from-green-900/40 dark:to-emerald-900/20'\n                            : 'bg-gray-100 dark:bg-gray-800/60'\n                        }`}\n                        animate={{ scale: [1, 1.08, 1] }}\n                        transition={{ duration: 2.5, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        <Droplets className={`h-5 w-5 ${\n                          sensorData \n                            ? sensorData.humidity > 70 \n                              ? 'text-blue-500 dark:text-blue-400' \n                              : sensorData.humidity < 30 \n                                ? 'text-yellow-500 dark:text-yellow-400' \n                                : 'text-green-500 dark:text-green-400'\n                            : 'text-gray-400 dark:text-gray-500'\n                        }`} />\n                      </motion.div>\n                      <div>\n                        <div className=\"flex items-center\">\n                          <h3 className=\"font-medium text-sm\">Humidity</h3>\n                          <motion.div \n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            className={`ml-2 px-1.5 py-0.5 rounded text-[10px] font-medium ${\n                              sensorData \n                                ? sensorData.humidity > 70 \n                                  ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' \n                                  : sensorData.humidity < 30 \n                                    ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' \n                                    : 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'\n                                : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'\n                            }`}\n                          >\n                            {sensorData ? getHumidityStatus(sensorData.humidity) : 'No data'}\n                          </motion.div>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-0.5\">\n                          {sensorData ? (sensorData.humidity < 30 ? 'Too dry' : sensorData.humidity > 70 ? 'Too humid' : 'Perfect range') : 'Waiting for data...'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <motion.span \n                        className=\"text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300\"\n                        animate={sensorData ? { scale: [1, 1.05, 1] } : {}}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        {sensorData ? `${sensorData.humidity > 100 ? (sensorData.humidity / 1000).toFixed(1) : sensorData.humidity}%` : '--'}\n                      </motion.span>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n            \n            {/* Light & Soil Moisture Readings */}\n            <div className=\"flex gap-3\">\n              {/* Light Reading */}\n              <motion.div \n                className=\"flex-1 glassmorphic rounded-xl p-0 overflow-hidden\"\n                whileHover={{ \n                  scale: 1.02, \n                  boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1)\" \n                }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <div className={`h-1 w-full ${\n                  sensorData?.light \n                    ? sensorData.light > 70 \n                      ? 'bg-gradient-to-r from-yellow-500 to-amber-400' \n                      : sensorData.light < 20 \n                        ? 'bg-gradient-to-r from-indigo-500 to-purple-400' \n                        : 'bg-gradient-to-r from-green-500 to-emerald-400'\n                    : 'bg-gradient-to-r from-gray-300 to-gray-200 dark:from-gray-700 dark:to-gray-600'\n                }`} />\n                \n                <div className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <motion.div \n                        className={`p-2 rounded-full ${\n                          sensorData?.light \n                            ? sensorData.light > 70 \n                              ? 'bg-gradient-to-br from-yellow-100 to-amber-50 dark:from-yellow-900/40 dark:to-amber-900/20' \n                              : sensorData.light < 20 \n                                ? 'bg-gradient-to-br from-indigo-100 to-purple-50 dark:from-indigo-900/40 dark:to-purple-900/20' \n                                : 'bg-gradient-to-br from-green-100 to-emerald-50 dark:from-green-900/40 dark:to-emerald-900/20'\n                            : 'bg-gray-100 dark:bg-gray-800/60'\n                        }`}\n                        animate={sensorData?.light && sensorData.light > 70 ? {\n                          boxShadow: ['0 0 0 rgba(252, 211, 77, 0)', '0 0 15px rgba(252, 211, 77, 0.7)', '0 0 0 rgba(252, 211, 77, 0)'],\n                        } : {}}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        <Sun className={`h-5 w-5 ${\n                          sensorData?.light \n                            ? sensorData.light > 70 \n                              ? 'text-yellow-500 dark:text-yellow-400' \n                              : sensorData.light < 20 \n                                ? 'text-indigo-500 dark:text-indigo-400' \n                                : 'text-green-500 dark:text-green-400'\n                            : 'text-gray-400 dark:text-gray-500'\n                        }`} />\n                      </motion.div>\n                      <div>\n                        <div className=\"flex items-center\">\n                          <h3 className=\"font-medium text-sm\">Light Level</h3>\n                          <motion.div \n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            className={`ml-2 px-1.5 py-0.5 rounded text-[10px] font-medium ${\n                              sensorData?.light \n                                ? sensorData.light > 70 \n                                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' \n                                  : sensorData.light < 20 \n                                    ? 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300' \n                                    : 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'\n                                : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'\n                            }`}\n                          >\n                            {sensorData?.light ? getLightStatus(sensorData.light) : 'No data'}\n                          </motion.div>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-0.5\">\n                          {sensorData?.light ? (sensorData.light < 20 ? 'Too dark' : sensorData.light > 70 ? 'Too bright' : 'Perfect range') : 'Waiting for data...'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <motion.span \n                        className=\"text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300\"\n                        animate={sensorData?.light ? { scale: [1, 1.05, 1] } : {}}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        {sensorData && sensorData.light !== undefined ? `${sensorData.light}%` : '--'}\n                      </motion.span>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n              \n              {/* Soil Moisture Reading */}\n              <motion.div \n                className=\"flex-1 glassmorphic rounded-xl p-0 overflow-hidden\"\n                whileHover={{ \n                  scale: 1.02, \n                  boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1)\" \n                }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n              >\n                <div className={`h-1 w-full ${\n                  sensorData?.soilMoisture \n                    ? sensorData.soilMoisture > 75 \n                      ? 'bg-gradient-to-r from-blue-500 to-cyan-400' \n                      : sensorData.soilMoisture < 30 \n                        ? 'bg-gradient-to-r from-amber-500 to-orange-400' \n                        : 'bg-gradient-to-r from-green-500 to-emerald-400'\n                    : 'bg-gradient-to-r from-gray-300 to-gray-200 dark:from-gray-700 dark:to-gray-600'\n                }`} />\n                \n                <div className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <motion.div \n                        className={`p-2 rounded-full ${\n                          sensorData?.soilMoisture \n                            ? sensorData.soilMoisture > 75 \n                              ? 'bg-gradient-to-br from-blue-100 to-cyan-50 dark:from-blue-900/40 dark:to-cyan-900/20' \n                              : sensorData.soilMoisture < 30 \n                                ? 'bg-gradient-to-br from-amber-100 to-orange-50 dark:from-amber-900/40 dark:to-orange-900/20' \n                                : 'bg-gradient-to-br from-green-100 to-emerald-50 dark:from-green-900/40 dark:to-emerald-900/20'\n                            : 'bg-gray-100 dark:bg-gray-800/60'\n                        }`}\n                        animate={sensorData?.soilMoisture ? { scale: [1, 1.08, 1] } : {}}\n                        transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        <Droplet className={`h-5 w-5 ${\n                          sensorData?.soilMoisture \n                            ? sensorData.soilMoisture > 75 \n                              ? 'text-blue-500 dark:text-blue-400' \n                              : sensorData.soilMoisture < 30 \n                                ? 'text-amber-500 dark:text-amber-400' \n                                : 'text-green-500 dark:text-green-400'\n                            : 'text-gray-400 dark:text-gray-500'\n                        }`} />\n                      </motion.div>\n                      <div>\n                        <div className=\"flex items-center\">\n                          <h3 className=\"font-medium text-sm\">Soil Moisture</h3>\n                          <motion.div \n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            className={`ml-2 px-1.5 py-0.5 rounded text-[10px] font-medium ${\n                              sensorData?.soilMoisture\n                                ? sensorData.soilMoisture > 75 \n                                  ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' \n                                  : sensorData.soilMoisture < 30 \n                                    ? 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300' \n                                    : 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'\n                                : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300'\n                            }`}\n                          >\n                            {sensorData?.soilMoisture ? getSoilMoistureStatus(sensorData.soilMoisture) : 'No data'}\n                          </motion.div>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-0.5\">\n                          {sensorData?.soilMoisture ? (sensorData.soilMoisture < 30 ? 'Too dry' : sensorData.soilMoisture > 75 ? 'Too wet' : 'Perfect range') : 'Waiting for data...'}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <motion.span \n                        className=\"text-xl font-semibold bg-clip-text text-transparent bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300\"\n                        animate={sensorData?.soilMoisture ? { scale: [1, 1.05, 1] } : {}}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      >\n                        {sensorData && sensorData.soilMoisture !== undefined ? `${sensorData.soilMoisture}%` : '--'}\n                      </motion.span>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n            \n            {/* Plant Type Selection */}\n            <motion.div \n              className=\"glassmorphic rounded-xl p-0 overflow-hidden\"\n              whileHover={{ \n                scale: 1.02, \n                boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1)\" \n              }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n            >\n              <div className=\"h-1 w-full bg-gradient-to-r from-purple-500 to-indigo-400\" />\n              \n              <div className=\"p-4\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <motion.div \n                    className=\"p-2 rounded-full bg-gradient-to-br from-purple-100 to-indigo-50 dark:from-purple-900/40 dark:to-indigo-900/20\"\n                    animate={{ \n                      rotate: [0, 5, 0, -5, 0],\n                      scale: [1, 1.05, 1]\n                    }}\n                    transition={{ duration: 5, repeat: Infinity, ease: \"easeInOut\" }}\n                  >\n                    <Flower className=\"h-5 w-5 text-purple-500 dark:text-purple-400\" />\n                  </motion.div>\n                  <div>\n                    <Label htmlFor=\"plantType\" className=\"font-medium text-sm\">Plant Type</Label>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Enter species for optimal settings\n                    </p>\n                  </div>\n                  \n                  {plantTypeLoading && (\n                    <div className=\"flex items-center text-xs gap-1 ml-auto bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-300 px-2 py-1 rounded-full\">\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Loader2 className=\"h-3 w-3\" />\n                      </motion.div>\n                      <span>Smart Optimizing...</span>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"relative\">\n                  <Input\n                    id=\"plantType\"\n                    placeholder=\"Enter plant species (e.g. Aloe Vera)\"\n                    value={plantType}\n                    onChange={handlePlantTypeChange}\n                    className=\"apple-input w-full h-10 text-sm pr-8 border-0 focus:ring-purple-400/50\"\n                  />\n                  \n                  {plantType && (\n                    <motion.div \n                      className=\"absolute right-3 top-1/2 -translate-y-1/2\"\n                      initial={{ opacity: 0, scale: 0.5 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.5 }}\n                    >\n                      <Flower className=\"h-4 w-4 text-purple-500\" />\n                    </motion.div>\n                  )}\n                </div>\n                \n                <div className=\"bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/10 rounded-lg p-2 mt-3\">\n                  <p className=\"text-xs text-gray-600 dark:text-gray-300 flex items-center gap-1.5\">\n                    <Flower className=\"h-3.5 w-3.5 text-purple-500\" />\n                    <span>AI will auto-optimize environment for your plant</span>\n                  </p>\n                </div>\n              </div>\n            </motion.div>\n            \n            {/* Watering Control */}\n            <motion.div \n              className=\"glassmorphic rounded-xl p-0 overflow-hidden\"\n              whileHover={{ \n                scale: 1.02, \n                boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(255, 255, 255, 0.1)\" \n              }}\n              transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n            >\n              <div className={`h-1 w-full ${\n                isWatering \n                  ? 'bg-gradient-to-r from-blue-500 to-cyan-400' \n                  : 'bg-gradient-to-r from-blue-400 to-sky-400'\n              }`} />\n              \n              <div className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <motion.div \n                      className={`p-2 rounded-full ${\n                        isWatering \n                          ? 'bg-gradient-to-br from-blue-100 to-cyan-50 dark:from-blue-900/40 dark:to-cyan-900/20' \n                          : 'bg-gradient-to-br from-blue-50 to-sky-50 dark:from-blue-900/20 dark:to-sky-900/10'\n                      }`}\n                      animate={{ \n                        y: isWatering ? [0, -3, 0] : 0,\n                        boxShadow: isWatering \n                          ? ['0 0 0 rgba(96, 165, 250, 0)', '0 0 15px rgba(96, 165, 250, 0.7)', '0 0 0 rgba(96, 165, 250, 0)'] \n                          : 'none'\n                      }}\n                      transition={{ duration: 1.5, repeat: isWatering ? Infinity : 0, ease: \"easeInOut\" }}\n                    >\n                      <Droplets className={`h-5 w-5 ${\n                        isWatering \n                          ? 'text-blue-500 dark:text-blue-400' \n                          : 'text-blue-400 dark:text-blue-500/60'\n                      }`} />\n                    </motion.div>\n                    <div>\n                      <h3 className=\"font-medium text-sm\">Water Plants</h3>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {isWatering \n                          ? 'Watering in progress...' \n                          : wateringDisabled \n                            ? `Available again in ${Math.ceil(5)}s` \n                            : 'Ready to water your plants'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {isWatering && (\n                    <div className=\"flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 dark:bg-blue-900/30\">\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Loader2 className=\"h-3.5 w-3.5 text-blue-500 dark:text-blue-400\" />\n                      </motion.div>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"relative\">\n                  <Button \n                    onClick={handleWateringClick}\n                    disabled={wateringDisabled || isWatering}\n                    className={`w-full h-11 rounded-xl font-medium transition-all duration-300 relative overflow-hidden disabled:opacity-60 ${\n                      isWatering \n                        ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white cursor-default' \n                        : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white'\n                    }`}\n                  >\n                    {isWatering ? (\n                      <>\n                        <span className=\"relative z-10 flex items-center justify-center gap-2\">\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Droplet className=\"h-4 w-4\" />\n                          </motion.div>\n                          <span>Watering in Progress</span>\n                        </span>\n                        <motion.div \n                          className=\"absolute inset-0 bg-gradient-to-r from-blue-400 to-cyan-500 origin-left\"\n                          initial={{ scaleX: 0 }}\n                          animate={{ scaleX: isWatering ? 1 : 0 }}\n                          transition={{ duration: 3, ease: \"easeInOut\" }}\n                          style={{ transformOrigin: 'left' }}\n                        />\n                      </>\n                    ) : (\n                      <span className=\"relative z-10 flex items-center justify-center gap-2\">\n                        <Droplet className=\"h-4 w-4\" />\n                        <span>Water Now</span>\n                      </span>\n                    )}\n                  </Button>\n                  \n                  {isWatering && (\n                    <motion.div \n                      className=\"absolute inset-x-0 -bottom-4 flex justify-center\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: 10 }}\n                    >\n                      <div className=\"px-2 py-1 rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 text-xs\">\n                        Watering for optimal soil moisture\n                      </div>\n                    </motion.div>\n                  )}\n                </div>\n                \n                {!isWatering && !wateringDisabled && sensorData?.soilMoisture && sensorData.soilMoisture < 30 && (\n                  <div className=\"bg-amber-50 dark:bg-amber-900/20 rounded-lg p-2 mt-3\">\n                    <p className=\"text-xs text-amber-700 dark:text-amber-300 flex items-center gap-1.5\">\n                      <Thermometer className=\"h-3.5 w-3.5 text-amber-500\" />\n                      <span>Soil moisture is low, watering recommended</span>\n                    </p>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":42654},"client/src/components/PlantDetailsDialog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  Calendar,\n  Droplet,\n  Leaf,\n  Activity,\n  Settings,\n  History,\n  X,\n  Camera,\n  TrendingUp,\n  Edit,\n  Trash2,\n  AlertCircle\n} from 'lucide-react';\nimport { UserPlant } from '@/lib/auth';\nimport { useAuth } from '@/lib/AuthProvider';\nimport { PlantGrowthTimeline, GrowthEvent, GrowthEventType } from './PlantGrowthTimeline';\nimport { AddGrowthEventForm, GrowthEventFormValues } from './AddGrowthEventForm';\nimport { GrowthVisualization } from './GrowthVisualization';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  createGrowthEvent,\n  getPlantGrowthEvents,\n  getGrowthHistory,\n} from '@/lib/growthEvents';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface PlantDetailsDialogProps {\n  plant: UserPlant | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onDeletePlant?: (plantId: string) => Promise<void>;\n}\n\nexport function PlantDetailsDialog({\n  plant,\n  open,\n  onOpenChange,\n  onDeletePlant\n}: PlantDetailsDialogProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<string>('overview');\n  const [growthEvents, setGrowthEvents] = useState<GrowthEvent[]>([]);\n  const [growthData, setGrowthData] = useState<{\n    heights: Array<{ timestamp: number; value: number }>;\n    widths: Array<{ timestamp: number; value: number }>;\n    leafCounts: Array<{ timestamp: number; value: number }>;\n  }>({\n    heights: [],\n    widths: [],\n    leafCounts: []\n  });\n  const [isLoadingEvents, setIsLoadingEvents] = useState<boolean>(true);\n  const [addEventType, setAddEventType] = useState<GrowthEventType | null>(null);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState<boolean>(false);\n  \n  // Format date for display\n  const formatDate = (timestamp: number): string => {\n    return new Date(timestamp).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  \n  // Get days since last watered\n  const getDaysSinceWatered = (lastWatered?: number): string => {\n    if (!lastWatered) return 'Never';\n    \n    const now = Date.now();\n    const diffMs = now - lastWatered;\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) {\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      if (diffHours === 0) {\n        return 'Just now';\n      }\n      return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else {\n      return `${diffDays} days ago`;\n    }\n  };\n  \n  // Load growth events when the dialog opens and plant changes\n  useEffect(() => {\n    const loadGrowthEvents = async () => {\n      if (open && plant && user) {\n        setIsLoadingEvents(true);\n        \n        try {\n          // Load growth events\n          const events = await getPlantGrowthEvents(user.uid, plant.id);\n          setGrowthEvents(events);\n          \n          // Load growth history data\n          const history = await getGrowthHistory(user.uid, plant.id);\n          setGrowthData(history);\n        } catch (error) {\n          console.error('Error loading growth events:', error);\n          toast({\n            title: 'Error',\n            description: 'Failed to load plant growth data',\n            variant: 'destructive'\n          });\n        } finally {\n          setIsLoadingEvents(false);\n        }\n      }\n    };\n    \n    loadGrowthEvents();\n  }, [open, plant, user, toast]);\n  \n  // Reset the active tab when the dialog opens\n  useEffect(() => {\n    if (open) {\n      setActiveTab('overview');\n      setAddEventType(null);\n    }\n  }, [open]);\n  \n  // Handle adding a new growth event\n  const handleAddEvent = (plantId: string, eventType: GrowthEventType) => {\n    setAddEventType(eventType);\n    setActiveTab('add-event');\n  };\n  \n  // Handle saving the growth event\n  const handleSaveEvent = async (data: GrowthEventFormValues, imageFile?: File) => {\n    if (!user || !plant || !addEventType) return;\n    \n    try {\n      // Create the growth event\n      const newEvent = await createGrowthEvent(\n        user.uid,\n        plant.id,\n        addEventType,\n        data,\n        imageFile\n      );\n      \n      // Add the new event to the state\n      setGrowthEvents(prev => [newEvent, ...prev]);\n      \n      // If it's a measurement event, update the growth data\n      if (addEventType === 'measurement') {\n        // Update heights if present\n        if (data.height !== undefined) {\n          setGrowthData(prev => ({\n            ...prev,\n            heights: [...prev.heights, { timestamp: newEvent.timestamp, value: data.height! }]\n          }));\n        }\n        \n        // Update widths if present\n        if (data.width !== undefined) {\n          setGrowthData(prev => ({\n            ...prev,\n            widths: [...prev.widths, { timestamp: newEvent.timestamp, value: data.width! }]\n          }));\n        }\n        \n        // Update leaf counts if present\n        if (data.leafCount !== undefined) {\n          setGrowthData(prev => ({\n            ...prev,\n            leafCounts: [...prev.leafCounts, { timestamp: newEvent.timestamp, value: data.leafCount! }]\n          }));\n        }\n      }\n      \n      // Return to the timeline tab\n      setAddEventType(null);\n      setActiveTab('timeline');\n      \n      toast({\n        title: 'Event added',\n        description: `${addEventType.charAt(0).toUpperCase() + addEventType.slice(1)} event has been added to your plant's timeline`\n      });\n    } catch (error) {\n      console.error('Error adding growth event:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to add growth event',\n        variant: 'destructive'\n      });\n    }\n  };\n  \n  // Handle plant deletion\n  const handleDeletePlant = async () => {\n    if (!plant || !onDeletePlant) return;\n    \n    try {\n      await onDeletePlant(plant.id);\n      setDeleteConfirmOpen(false);\n      onOpenChange(false);\n      toast({\n        title: 'Plant deleted',\n        description: `${plant.name} has been removed from your collection`\n      });\n    } catch (error) {\n      console.error('Error deleting plant:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete plant',\n        variant: 'destructive'\n      });\n    }\n  };\n  \n  // If no plant is selected, don't render anything\n  if (!plant) return null;\n  \n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-center justify-between\">\n              <DialogTitle className=\"text-2xl\">{plant.name}</DialogTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"icon\" \n                  className=\"h-8 w-8\"\n                  onClick={() => setDeleteConfirmOpen(true)}\n                >\n                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"icon\" \n                  className=\"h-8 w-8\"\n                  // Edit functionality could be added here\n                >\n                  <Edit className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </DialogHeader>\n          \n          {addEventType ? (\n            <div className=\"mt-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  setAddEventType(null);\n                  setActiveTab('timeline');\n                }}\n                className=\"mb-4\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Cancel\n              </Button>\n              \n              <AddGrowthEventForm\n                plant={plant}\n                eventType={addEventType}\n                onSubmit={handleSaveEvent}\n                onCancel={() => {\n                  setAddEventType(null);\n                  setActiveTab('timeline');\n                }}\n              />\n            </div>\n          ) : (\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mt-4\">\n              <TabsList className=\"grid grid-cols-3\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"timeline\">Growth Timeline</TabsTrigger>\n                <TabsTrigger value=\"visualization\">Visualization</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"overview\" className=\"mt-4 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Left column: Plant image and basic info */}\n                  <div>\n                    <div className=\"rounded-lg border overflow-hidden mb-4 max-h-[400px] bg-gray-100 dark:bg-gray-800\">\n                      {plant.imageUrl ? (\n                        <img \n                          src={plant.imageUrl} \n                          alt={plant.name} \n                          className=\"w-full h-full object-cover\" \n                        />\n                      ) : (\n                        <div className=\"flex flex-col items-center justify-center py-12\">\n                          <Leaf className=\"h-16 w-16 text-gray-400 mb-4\" />\n                          <p className=\"text-gray-500 text-center px-4\">\n                            No image available for this plant\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-5 w-5 text-gray-500\" />\n                        <span>Added on {formatDate(plant.addedAt)}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Droplet className=\"h-5 w-5 text-blue-500\" />\n                        <span>Last watered {getDaysSinceWatered(plant.lastWatered)}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Activity className=\"h-5 w-5 text-green-500\" />\n                        <span className=\"flex items-center\">\n                          Health: \n                          <Badge className=\"ml-2 bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300\">\n                            {plant.health || 'Unknown'}\n                          </Badge>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Right column: Species info and notes */}\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-lg font-medium mb-2\">Species</h3>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-md\">\n                        <span className=\"font-semibold\">{plant.species}</span>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-lg font-medium mb-2\">Notes</h3>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-md min-h-[200px]\">\n                        {plant.notes ? (\n                          <div className=\"whitespace-pre-line\">{plant.notes}</div>\n                        ) : (\n                          <div className=\"text-gray-500\">No notes available</div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-center pt-4\">\n                  <Button\n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                    onClick={() => setActiveTab('timeline')}\n                  >\n                    <History className=\"mr-2 h-4 w-4\" />\n                    View Growth Timeline\n                  </Button>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"timeline\" className=\"mt-4 space-y-4\">\n                {/* Growth Timeline */}\n                <PlantGrowthTimeline\n                  plant={plant}\n                  events={growthEvents}\n                  onAddEvent={handleAddEvent}\n                />\n              </TabsContent>\n              \n              <TabsContent value=\"visualization\" className=\"mt-4 space-y-4\">\n                {/* Growth Visualization */}\n                <GrowthVisualization\n                  userId={user?.uid || ''}\n                  plantId={plant.id}\n                  plantName={plant.name}\n                  growthData={growthData}\n                  isLoading={isLoadingEvents}\n                />\n                \n                <div className=\"flex justify-center pt-4\">\n                  <Button\n                    className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                    onClick={() => {\n                      setAddEventType('measurement');\n                      setActiveTab('add-event');\n                    }}\n                  >\n                    <TrendingUp className=\"mr-2 h-4 w-4\" />\n                    Add Measurement\n                  </Button>\n                </div>\n              </TabsContent>\n            </Tabs>\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will permanently delete {plant.name} from your collection.\n              This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              className=\"bg-red-500 hover:bg-red-600 text-white\"\n              onClick={handleDeletePlant}\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":15006},"client/src/components/PlantGrowthTimeline.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { UserPlant } from '@/lib/auth';\nimport { Loader2, Plus, Camera, ChevronDown, Ruler, Droplet, Flower, Scissors, FileText, \n  Sprout, RefreshCw, Calendar, ChevronRight, Star, Clock, Activity } from 'lucide-react';\n\nexport type GrowthEventType = 'photo' | 'measurement' | 'watering' | 'fertilizing' | 'repotting' | 'pruning' | 'note';\n\nexport interface GrowthEvent {\n  id: string;\n  plantId: string;\n  timestamp: number;\n  type: GrowthEventType;\n  imageUrl?: string;\n  height?: number;\n  width?: number;\n  leafCount?: number;\n  notes?: string;\n  healthRating?: 1 | 2 | 3 | 4 | 5;\n}\n\ninterface PlantGrowthTimelineProps {\n  plant: UserPlant;\n  events?: GrowthEvent[];\n  isLoading?: boolean;\n  onAddEvent?: (plantId: string, eventType: GrowthEventType) => void;\n}\n\nexport function PlantGrowthTimeline({ plant, events = [], isLoading = false, onAddEvent }: PlantGrowthTimelineProps) {\n  const [expandedEventId, setExpandedEventId] = useState<string | null>(null);\n  \n  // Toggle event expansion\n  const toggleEventExpansion = (eventId: string) => {\n    if (expandedEventId === eventId) {\n      setExpandedEventId(null);\n    } else {\n      setExpandedEventId(eventId);\n    }\n  };\n  \n  // Format date for display\n  const formatDate = (timestamp: number, includeTime = false): string => {\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      ...(includeTime ? { hour: '2-digit', minute: '2-digit' } : {})\n    };\n    \n    return new Date(timestamp).toLocaleDateString('en-US', options);\n  };\n  \n  // Get time elapsed since a timestamp\n  const getTimeElapsed = (timestamp: number): string => {\n    const now = Date.now();\n    const diffMs = now - timestamp;\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) {\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      if (diffHours === 0) {\n        const diffMinutes = Math.floor(diffMs / (1000 * 60));\n        return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n      }\n      return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 30) {\n      return `${diffDays} days ago`;\n    } else if (diffDays < 365) {\n      const months = Math.floor(diffDays / 30);\n      return `${months} month${months === 1 ? '' : 's'} ago`;\n    } else {\n      const years = Math.floor(diffDays / 365);\n      return `${years} year${years === 1 ? '' : 's'} ago`;\n    }\n  };\n  \n  // Get icon for event type\n  const getEventIcon = (type: GrowthEventType) => {\n    switch (type) {\n      case 'photo':\n        return <Camera className=\"h-5 w-5\" />;\n      case 'measurement':\n        return <Ruler className=\"h-5 w-5\" />;\n      case 'watering':\n        return <Droplet className=\"h-5 w-5\" />;\n      case 'fertilizing':\n        return <Flower className=\"h-5 w-5\" />;\n      case 'repotting':\n        return <Sprout className=\"h-5 w-5\" />;\n      case 'pruning':\n        return <Scissors className=\"h-5 w-5\" />;\n      case 'note':\n        return <FileText className=\"h-5 w-5\" />;\n      default:\n        return <Activity className=\"h-5 w-5\" />;\n    }\n  };\n  \n  // Get color for event type\n  const getEventColor = (type: GrowthEventType): string => {\n    switch (type) {\n      case 'photo':\n        return 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300';\n      case 'measurement':\n        return 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300';\n      case 'watering':\n        return 'bg-cyan-100 text-cyan-700 dark:bg-cyan-900 dark:text-cyan-300';\n      case 'fertilizing':\n        return 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300';\n      case 'repotting':\n        return 'bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-300';\n      case 'pruning':\n        return 'bg-rose-100 text-rose-700 dark:bg-rose-900 dark:text-rose-300';\n      case 'note':\n        return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';\n      default:\n        return 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300';\n    }\n  };\n  \n  // Handle add event button click\n  const handleAddEvent = (eventType: GrowthEventType) => {\n    if (onAddEvent) {\n      onAddEvent(plant.id, eventType);\n    }\n  };\n  \n  // Render health rating stars\n  const renderHealthRating = (rating: number) => {\n    return (\n      <div className=\"flex items-center space-x-1 mt-1\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Star \n            key={i} \n            className={`h-4 w-4 ${i < rating ? 'text-yellow-500 fill-yellow-500' : 'text-gray-300'}`} \n          />\n        ))}\n      </div>\n    );\n  };\n  \n  if (isLoading) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Growth Timeline</span>\n            <Badge variant=\"outline\" className=\"ml-2\">Loading</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-gray-400\" />\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Growth Timeline</CardTitle>\n          \n          {onAddEvent && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"h-8 gap-1\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Add Event</span>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => handleAddEvent('photo')}>\n                  <Camera className=\"h-4 w-4 mr-2 text-blue-500\" />\n                  <span>Add Photo</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAddEvent('measurement')}>\n                  <Ruler className=\"h-4 w-4 mr-2 text-purple-500\" />\n                  <span>Add Measurement</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAddEvent('watering')}>\n                  <Droplet className=\"h-4 w-4 mr-2 text-cyan-500\" />\n                  <span>Record Watering</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAddEvent('fertilizing')}>\n                  <Flower className=\"h-4 w-4 mr-2 text-green-500\" />\n                  <span>Record Fertilizing</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAddEvent('repotting')}>\n                  <Sprout className=\"h-4 w-4 mr-2 text-amber-500\" />\n                  <span>Record Repotting</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAddEvent('pruning')}>\n                  <Scissors className=\"h-4 w-4 mr-2 text-rose-500\" />\n                  <span>Record Pruning</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleAddEvent('note')}>\n                  <FileText className=\"h-4 w-4 mr-2 text-gray-500\" />\n                  <span>Add Note</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {events.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <RefreshCw className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-medium text-gray-600 dark:text-gray-300 mb-2\">No Growth Events Yet</h3>\n            <p className=\"text-gray-500 dark:text-gray-400 max-w-md mx-auto\">\n              Start tracking your plant's growth journey by adding events like photos, measurements, watering, and more.\n            </p>\n            \n            {onAddEvent && (\n              <Button\n                className=\"mt-6 bg-green-600 hover:bg-green-700 text-white\"\n                onClick={() => handleAddEvent('photo')}\n              >\n                <Camera className=\"mr-2 h-4 w-4\" />\n                Add First Photo\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className=\"relative\">\n            {/* Timeline line */}\n            <div className=\"absolute left-4 top-0 bottom-0 w-px bg-gray-200 dark:bg-gray-700 ml-2\"></div>\n            \n            {/* Timeline events */}\n            <div className=\"space-y-6\">\n              {events.map((event) => (\n                <div key={event.id} className=\"relative pl-14\">\n                  {/* Timeline dot and icon */}\n                  <div className={`absolute left-0 top-1 h-9 w-9 rounded-full flex items-center justify-center z-10 ${getEventColor(event.type)}`}>\n                    {getEventIcon(event.type)}\n                  </div>\n                  \n                  {/* Event content */}\n                  <div className=\"rounded-lg border dark:border-gray-700 overflow-hidden\">\n                    {/* Event header */}\n                    <div \n                      className=\"p-3 bg-gray-50 dark:bg-gray-800 flex items-center justify-between cursor-pointer\"\n                      onClick={() => toggleEventExpansion(event.id)}\n                    >\n                      <div className=\"flex items-center\">\n                        <Badge variant=\"outline\" className={`mr-3 ${getEventColor(event.type)}`}>\n                          {event.type.charAt(0).toUpperCase() + event.type.slice(1)}\n                        </Badge>\n                        \n                        <div className=\"flex items-center text-sm\">\n                          <Calendar className=\"h-4 w-4 text-gray-500 mr-1\" />\n                          <span>{formatDate(event.timestamp)}</span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-gray-500\">{getTimeElapsed(event.timestamp)}</span>\n                        <ChevronRight \n                          className={`h-5 w-5 text-gray-500 transition-transform ${expandedEventId === event.id ? 'rotate-90' : ''}`} \n                        />\n                      </div>\n                    </div>\n                    \n                    {/* Expanded content */}\n                    {expandedEventId === event.id && (\n                      <div className=\"p-4 border-t dark:border-gray-700\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          {/* Image if available */}\n                          {event.imageUrl && (\n                            <div className={`${event.type === 'photo' ? 'md:col-span-2' : ''}`}>\n                              <div className=\"aspect-square md:aspect-auto md:h-48 overflow-hidden rounded-md\">\n                                <img \n                                  src={event.imageUrl} \n                                  alt={`${plant.name} - ${event.type}`} \n                                  className=\"w-full h-full object-cover\"\n                                />\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Measurements - Layout depends on if there's an image */}\n                          {event.type === 'measurement' && (\n                            <div className={`${event.imageUrl ? '' : 'md:col-span-2'}`}>\n                              <h4 className=\"text-sm font-medium mb-2\">Measurements</h4>\n                              <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md p-3 grid grid-cols-3 gap-3\">\n                                {event.height !== undefined && (\n                                  <div>\n                                    <div className=\"text-xs text-gray-500\">Height</div>\n                                    <div className=\"font-medium\">{event.height} cm</div>\n                                  </div>\n                                )}\n                                \n                                {event.width !== undefined && (\n                                  <div>\n                                    <div className=\"text-xs text-gray-500\">Width</div>\n                                    <div className=\"font-medium\">{event.width} cm</div>\n                                  </div>\n                                )}\n                                \n                                {event.leafCount !== undefined && (\n                                  <div>\n                                    <div className=\"text-xs text-gray-500\">Leaves</div>\n                                    <div className=\"font-medium\">{event.leafCount}</div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Health Rating (for care events) */}\n                          {event.healthRating !== undefined && (\n                            <div className={`${event.imageUrl ? '' : 'md:col-span-2'}`}>\n                              <h4 className=\"text-sm font-medium mb-2\">Plant Health</h4>\n                              <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md p-3\">\n                                {renderHealthRating(event.healthRating)}\n                              </div>\n                            </div>\n                          )}\n                          \n                          {/* Notes (if available) */}\n                          {event.notes && (\n                            <div className=\"md:col-span-2\">\n                              <h4 className=\"text-sm font-medium mb-2\">Notes</h4>\n                              <div className=\"bg-gray-50 dark:bg-gray-800 rounded-md p-3 whitespace-pre-line text-sm\">\n                                {event.notes}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14919},"client/src/components/PlantTypeSelector.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { PlantTypeInfo, plantCategories, getAllPlants, getPlantsByCategory, searchPlants } from '@/lib/plantDatabase';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Search, Leaf, X, ImageIcon, Loader2 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Badge } from '@/components/ui/badge';\nimport { useDevice } from '@/hooks/use-device';\nimport { fetchPlantImage } from '@/lib/gemini';\n\ninterface PlantTypeSelectorProps {\n  onSelect: (plant: PlantTypeInfo) => void;\n  onClose: () => void;\n}\n\nexport function PlantTypeSelector({ onSelect, onClose }: PlantTypeSelectorProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string>('houseplant');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [searchResults, setSearchResults] = useState<PlantTypeInfo[]>([]);\n  const [displayedPlants, setDisplayedPlants] = useState<PlantTypeInfo[]>([]);\n  const [isSearchActive, setIsSearchActive] = useState<boolean>(false);\n  const [loadingImages, setLoadingImages] = useState<Record<string, boolean>>({});\n  const [plantImages, setPlantImages] = useState<Record<string, string>>({});\n  const { isMobileDevice } = useDevice();\n\n  // Function to load plant image using Gemini\n  const loadPlantImage = useCallback(async (plant: PlantTypeInfo) => {\n    // Skip if plant already has an image or if we're already loading it\n    if (plant.imageUrl || loadingImages[plant.id] || plantImages[plant.id]) {\n      return;\n    }\n    \n    // Mark this plant as loading an image\n    setLoadingImages(prev => ({ ...prev, [plant.id]: true }));\n    \n    try {\n      // Use plant name and scientific name for better search results\n      const searchTerm = `${plant.name} (${plant.scientificName}) plant`;\n      const imageUrl = await fetchPlantImage(searchTerm);\n      \n      if (imageUrl) {\n        // Store the image URL in state\n        setPlantImages(prev => ({ ...prev, [plant.id]: imageUrl }));\n      }\n    } catch (error) {\n      console.error(`Error loading image for ${plant.name}:`, error);\n    } finally {\n      // Mark loading as complete regardless of result\n      setLoadingImages(prev => ({ ...prev, [plant.id]: false }));\n    }\n  }, [loadingImages, plantImages]);\n  \n  // Initialize with default category plants\n  useEffect(() => {\n    if (isSearchActive && searchQuery) {\n      setDisplayedPlants(searchResults);\n    } else {\n      setDisplayedPlants(getPlantsByCategory(selectedCategory));\n    }\n  }, [selectedCategory, searchResults, isSearchActive, searchQuery]);\n  \n  // Effect to load images for displayed plants\n  useEffect(() => {\n    // Only load first 9 plant images to avoid overwhelming the API\n    const plantsWithoutImages = displayedPlants\n      .filter(plant => !plant.imageUrl && !plantImages[plant.id] && !loadingImages[plant.id])\n      .slice(0, 9);\n      \n    // For each plant without an image, trigger image loading\n    plantsWithoutImages.forEach(plant => {\n      loadPlantImage(plant);\n    });\n  }, [displayedPlants, loadPlantImage, plantImages, loadingImages]);\n\n  // Handle search\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    \n    if (query.trim() === '') {\n      setIsSearchActive(false);\n      setSearchResults([]);\n      return;\n    }\n    \n    setIsSearchActive(true);\n    const results = searchPlants(query);\n    setSearchResults(results);\n  };\n\n  // Handle clear search\n  const clearSearch = () => {\n    setSearchQuery('');\n    setIsSearchActive(false);\n    setSearchResults([]);\n  };\n\n  // Handle plant selection\n  const handlePlantSelect = (plant: PlantTypeInfo) => {\n    // If we've generated an image for this plant, include it in the selection\n    const selectedPlant = { \n      ...plant,\n      // If we found an image via Gemini but the plant doesn't have one, use ours\n      imageUrl: plant.imageUrl || plantImages[plant.id] || undefined\n    };\n    onSelect(selectedPlant);\n    onClose();\n  };\n\n  // Format care difficulty and requirements for display\n  const getDisplayInfo = (info: 'low' | 'medium' | 'high') => {\n    switch (info) {\n      case 'low':\n        return { label: 'Low', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' };\n      case 'medium':\n        return { label: 'Medium', color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' };\n      case 'high':\n        return { label: 'High', color: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' };\n      default:\n        return { label: 'Unknown', color: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300' };\n    }\n  };\n\n  const getCareDifficultyInfo = (difficulty: 'easy' | 'moderate' | 'difficult') => {\n    switch (difficulty) {\n      case 'easy':\n        return { label: 'Easy', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' };\n      case 'moderate':\n        return { label: 'Moderate', color: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' };\n      case 'difficult':\n        return { label: 'Difficult', color: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' };\n      default:\n        return { label: 'Unknown', color: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300' };\n    }\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Select Plant Type</h2>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          onClick={onClose}\n          className=\"rounded-full\"\n        >\n          <X className=\"h-5 w-5\" />\n        </Button>\n      </div>\n      \n      <div className=\"mb-4 relative\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search for plants...\"\n            value={searchQuery}\n            onChange={(e) => handleSearch(e.target.value)}\n            className=\"pl-10 pr-10\"\n          />\n          {searchQuery && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-7 w-7 rounded-full\"\n              onClick={clearSearch}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {isSearchActive && (\n          <div className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n            Found {searchResults.length} {searchResults.length === 1 ? 'result' : 'results'}\n          </div>\n        )}\n      </div>\n      \n      {!isSearchActive && (\n        <Tabs defaultValue=\"houseplant\" value={selectedCategory} onValueChange={setSelectedCategory} className=\"mb-4\">\n          <ScrollArea className=\"w-full\">\n            <div className=\"pb-4 overflow-x-auto\">\n              <TabsList className=\"mb-2 w-auto inline-flex\">\n                {plantCategories.map(category => (\n                  <TabsTrigger \n                    key={category.id} \n                    value={category.id}\n                    className=\"min-w-max\"\n                  >\n                    {category.name}\n                  </TabsTrigger>\n                ))}\n              </TabsList>\n            </div>\n          </ScrollArea>\n        </Tabs>\n      )}\n\n      <ScrollArea className={`${isMobileDevice ? 'h-[400px]' : 'h-[500px]'}`}>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {displayedPlants.map((plant) => {\n            const careInfo = getCareDifficultyInfo(plant.careDifficulty);\n            const lightInfo = getDisplayInfo(plant.light);\n            const waterInfo = getDisplayInfo(plant.water);\n            \n            return (\n              <motion.div\n                key={plant.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3 }}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Card \n                  className=\"cursor-pointer overflow-hidden hover:shadow-md transition-shadow\" \n                  onClick={() => handlePlantSelect(plant)}\n                >\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex gap-3 items-start\">\n                      <div className=\"h-16 w-16 rounded-full flex items-center justify-center overflow-hidden\">\n                        {plant.imageUrl || plantImages[plant.id] ? (\n                          <img \n                            src={plant.imageUrl || plantImages[plant.id]} \n                            alt={plant.name} \n                            className=\"h-full w-full object-cover\"\n                            onError={(e) => {\n                              // If image fails to load, show the leaf icon instead\n                              e.currentTarget.style.display = 'none';\n                              // Mark this plant as not having an image\n                              setPlantImages(prev => {\n                                const newState = {...prev};\n                                delete newState[plant.id];\n                                return newState;\n                              });\n                            }}\n                          />\n                        ) : loadingImages[plant.id] ? (\n                          <div className=\"h-full w-full bg-green-50 dark:bg-green-950 flex items-center justify-center\">\n                            <Loader2 className=\"h-8 w-8 text-green-600 dark:text-green-400 animate-spin\" />\n                          </div>\n                        ) : (\n                          <div className=\"h-full w-full bg-green-100 dark:bg-green-900 flex items-center justify-center\">\n                            <ImageIcon className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium\">{plant.name}</h3>\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400 italic mb-2\">{plant.scientificName}</p>\n                        <div className=\"flex flex-wrap gap-1 mb-2\">\n                          <Badge variant=\"outline\" className={careInfo.color}>\n                            {careInfo.label}\n                          </Badge>\n                          <Badge variant=\"outline\" className={lightInfo.color}>\n                            Light: {lightInfo.label}\n                          </Badge>\n                          <Badge variant=\"outline\" className={waterInfo.color}>\n                            Water: {waterInfo.label}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 line-clamp-2\">\n                          {plant.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n          \n          {displayedPlants.length === 0 && (\n            <div className=\"col-span-full text-center py-8 text-gray-500 dark:text-gray-400\">\n              {isSearchActive \n                ? \"No plants found matching your search.\" \n                : \"No plants found in this category.\"}\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":11848},"client/src/components/SensorCard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Thermometer, Droplets, Gauge } from \"lucide-react\";\n\ntype SensorType = \"temperature\" | \"humidity\" | \"soil\";\n\ninterface SensorCardProps {\n  type: SensorType;\n  value: number | string;\n  previousValue?: number | string;\n  status: \"Optimal\" | \"High\" | \"Low\" | \"Critical\";\n}\n\nexport function SensorCard({ type, value, previousValue, status }: SensorCardProps) {\n  const [animated, setAnimated] = useState(false);\n  \n  // Convert string values to numbers for calculations\n  const numericValue = typeof value === 'string' ? (value === 'none' ? 0 : parseFloat(value)) : value;\n  \n  useEffect(() => {\n    setAnimated(true);\n    const timer = setTimeout(() => setAnimated(false), 500);\n    return () => clearTimeout(timer);\n  }, [value]);\n  \n  const getIcon = () => {\n    switch (type) {\n      case \"temperature\":\n        return (\n          <div className=\"icon-container temperature-icon\">\n            <svg viewBox=\"0 0 24 24\" className=\"w-12 h-12 text-primary-500\">\n              <path fill=\"currentColor\" d=\"M15,13V5A3,3 0 0,0 9,5V13A5,5 0 1,0 15,13M12,4A1,1 0 0,1 13,5V8H11V5A1,1 0 0,1 12,4Z\" />\n              <motion.circle \n                className=\"indicator\" \n                fill=\"#ef4444\" \n                cx=\"12\" \n                cy=\"13\" \n                r=\"1.5\" \n                animate={{ \n                  y: -Math.min(5, Math.max(-5, (numericValue - 25) * 0.5)) \n                }}\n                transition={{ duration: 1.5, ease: \"easeInOut\" }}\n              />\n            </svg>\n          </div>\n        );\n      case \"humidity\":\n        return (\n          <div className=\"icon-container humidity-icon\">\n            <svg viewBox=\"0 0 24 24\" className=\"w-12 h-12 text-primary-500\">\n              <path fill=\"currentColor\" d=\"M12,3.25C12,3.25 6,10 6,14C6,17.32 8.69,20 12,20A6,6 0 0,0 18,14C18,10 12,3.25 12,3.25M14.47,9.97L15.53,11.03L9.53,17.03L8.47,15.97M9.75,10A1.25,1.25 0 0,1 11,11.25A1.25,1.25 0 0,1 9.75,12.5A1.25,1.25 0 0,1 8.5,11.25A1.25,1.25 0 0,1 9.75,10M14.25,14.5A1.25,1.25 0 0,1 15.5,15.75A1.25,1.25 0 0,1 14.25,17A1.25,1.25 0 0,1 13,15.75A1.25,1.25 0 0,1 14.25,14.5Z\" />\n              <motion.circle \n                className=\"indicator\" \n                fill=\"currentColor\" \n                cx=\"12\" \n                cy=\"12\" \n                r=\"1\" \n                animate={{ \n                  y: 2,\n                  opacity: numericValue < 30 ? 0.5 : 1\n                }}\n                transition={{ \n                  y: { \n                    duration: 2, \n                    repeat: Infinity, \n                    repeatType: \"reverse\" \n                  },\n                  opacity: { duration: 0.5 }\n                }}\n              />\n            </svg>\n          </div>\n        );\n      case \"soil\":\n        return (\n          <div className=\"icon-container\">\n            <svg viewBox=\"0 0 24 24\" className=\"w-12 h-12 text-danger-500\">\n              <path fill=\"currentColor\" d=\"M8.5,4.5L7,7H4C2.9,7 2,7.9 2,9V15C2,16.1 2.9,17 4,17H7L10.5,21L12,17H20C21.1,17 22,16.1 22,15V9C22,7.9 21.1,7 20,7H12L10.5,3L8.5,4.5M12.5,10.67C13.1,11.14 13.5,11.84 13.5,12.67C13.5,13.83 12.5,14.33 12.5,14.33C12.5,14.33 11.5,13.83 11.5,12.67C11.5,11.84 11.9,11.14 12.5,10.67Z\" />\n            </svg>\n          </div>\n        );\n    }\n  };\n  \n  const getLabel = () => {\n    switch (type) {\n      case \"temperature\": return \"Temperature\";\n      case \"humidity\": return \"Humidity\";\n      case \"soil\": return \"Soil Moisture\";\n    }\n  };\n  \n  const getUnit = () => {\n    switch (type) {\n      case \"temperature\": return \"°C\";\n      case \"humidity\": return \"%\";\n      case \"soil\": return \"%\";\n    }\n  };\n  \n  const getChange = () => {\n    if (previousValue === undefined) return 0;\n    if (value === \"none\" || previousValue === \"none\") return 0;\n    return Number(value) - Number(previousValue);\n  };\n  \n  const getChangeIcon = () => {\n    const change = getChange();\n    if (change > 0) {\n      return <span className=\"material-icons text-success-500 text-sm\">arrow_upward</span>;\n    } else if (change < 0) {\n      return <span className=\"material-icons text-warning-500 text-sm\">arrow_downward</span>;\n    }\n    return null;\n  };\n  \n  const getStatusClasses = () => {\n    switch (status) {\n      case \"Optimal\":\n        return \"bg-success-50 text-success-500\";\n      case \"High\":\n      case \"Low\":\n        return \"bg-warning-50 text-warning-500\";\n      case \"Critical\":\n        return \"bg-danger-50 text-danger-500 animate-pulse-slow\";\n    }\n  };\n  \n  // Handle \"none\" display for soil moisture\n  const displayValue = () => {\n    if (value === \"none\") {\n      return \"N/A\";\n    }\n    if (typeof value === 'number') {\n      return type === \"temperature\" ? value.toFixed(1) : Math.round(value);\n    }\n    return value;\n  };\n\n  // Get color scheme based on sensor type and status\n  const getColorScheme = () => {\n    if (value === \"none\") return {\n      gradient: \"from-gray-100 to-white dark:from-gray-800 dark:to-gray-700\",\n      icon: \"text-gray-400 dark:text-gray-500\",\n      value: \"text-gray-700 dark:text-gray-300\"\n    };\n    \n    switch (type) {\n      case \"temperature\":\n        if (status === \"High\") return {\n          gradient: \"from-red-50 to-rose-50 dark:from-red-900/30 dark:to-red-800/20\",\n          icon: \"text-red-400 dark:text-red-400\",\n          value: \"text-red-600 dark:text-red-300\",\n          status: \"bg-red-50 dark:bg-red-900/40 text-red-600 dark:text-red-300\"\n        };\n        if (status === \"Low\") return {\n          gradient: \"from-sky-50 to-blue-50 dark:from-blue-900/30 dark:to-blue-800/20\",\n          icon: \"text-sky-400 dark:text-blue-400\",\n          value: \"text-sky-600 dark:text-blue-300\",\n          status: \"bg-sky-50 dark:bg-blue-900/40 text-sky-600 dark:text-blue-300\"\n        };\n        return {\n          gradient: \"from-green-50 to-teal-50 dark:from-green-900/30 dark:to-green-800/20\",\n          icon: \"text-teal-400 dark:text-green-400\",\n          value: \"text-teal-600 dark:text-green-300\",\n          status: \"bg-teal-50 dark:bg-green-900/40 text-teal-600 dark:text-green-300\"\n        };\n      \n      case \"humidity\":\n        if (status === \"High\") return {\n          gradient: \"from-cyan-50 to-blue-50 dark:from-blue-900/30 dark:to-blue-800/20\",\n          icon: \"text-cyan-400 dark:text-blue-400\",\n          value: \"text-cyan-600 dark:text-blue-300\",\n          status: \"bg-cyan-50 dark:bg-blue-900/40 text-cyan-600 dark:text-blue-300\"\n        };\n        if (status === \"Low\") return {\n          gradient: \"from-amber-50 to-orange-50 dark:from-orange-900/30 dark:to-orange-800/20\",\n          icon: \"text-amber-400 dark:text-orange-400\",\n          value: \"text-amber-600 dark:text-orange-300\",\n          status: \"bg-amber-50 dark:bg-orange-900/40 text-amber-600 dark:text-orange-300\"\n        };\n        return {\n          gradient: \"from-emerald-50 to-green-50 dark:from-green-900/30 dark:to-green-800/20\",\n          icon: \"text-emerald-400 dark:text-green-400\",\n          value: \"text-emerald-600 dark:text-green-300\",\n          status: \"bg-emerald-50 dark:bg-green-900/40 text-emerald-600 dark:text-green-300\"\n        };\n      \n      case \"soil\":\n        if (status === \"Low\" || status === \"Critical\") return {\n          gradient: \"from-amber-50 to-orange-50 dark:from-orange-900/30 dark:to-orange-800/20\",\n          icon: \"text-amber-400 dark:text-orange-400\",\n          value: \"text-amber-600 dark:text-orange-300\",\n          status: \"bg-amber-50 dark:bg-orange-900/40 text-amber-600 dark:text-orange-300\"\n        };\n        if (status === \"High\") return {\n          gradient: \"from-sky-50 to-blue-50 dark:from-blue-900/30 dark:to-blue-800/20\",\n          icon: \"text-sky-400 dark:text-blue-400\",\n          value: \"text-sky-600 dark:text-blue-300\",\n          status: \"bg-sky-50 dark:bg-blue-900/40 text-sky-600 dark:text-blue-300\"\n        };\n        return {\n          gradient: \"from-teal-50 to-emerald-50 dark:from-emerald-900/30 dark:to-emerald-800/20\",\n          icon: \"text-teal-400 dark:text-emerald-400\",\n          value: \"text-teal-600 dark:text-emerald-300\",\n          status: \"bg-teal-50 dark:bg-emerald-900/40 text-teal-600 dark:text-emerald-300\"\n        };\n    }\n  };\n  \n  const colorScheme = getColorScheme();\n  \n  // Ultra premium icons for sensors with enhanced Apple-inspired animations\n  const getModernIcon = () => {\n    switch (type) {\n      case \"temperature\":\n        return (\n          <motion.div \n            className={`p-6 rounded-3xl bg-gradient-to-br ${colorScheme.gradient} shadow-xl`}\n            style={{\n              boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 5px 10px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(255, 255, 255, 0.15) inset\",\n              backdropFilter: \"blur(12px)\",\n              WebkitBackdropFilter: \"blur(12px)\"\n            }}\n            initial={{ scale: 0.8, opacity: 0.7 }}\n            animate={{ \n              scale: animated ? [1, 1.08, 1] : 1,\n              opacity: 1,\n              y: status === \"High\" ? [0, -3, 0] : 0,\n              boxShadow: status === \"Critical\" \n                ? [\"0 10px 25px rgba(239, 68, 68, 0.15), 0 5px 10px rgba(239, 68, 68, 0.1), 0 1px 3px rgba(255, 255, 255, 0.15) inset\", \n                   \"0 15px 35px rgba(239, 68, 68, 0.25), 0 5px 15px rgba(239, 68, 68, 0.2), 0 1px 3px rgba(255, 255, 255, 0.15) inset\", \n                   \"0 10px 25px rgba(239, 68, 68, 0.15), 0 5px 10px rgba(239, 68, 68, 0.1), 0 1px 3px rgba(255, 255, 255, 0.15) inset\"]\n                : \"0 10px 25px rgba(0, 0, 0, 0.08), 0 5px 10px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(255, 255, 255, 0.15) inset\"\n            }}\n            transition={{ \n              duration: 0.7, \n              y: { \n                duration: 2, \n                repeat: status === \"High\" ? Infinity : 0, \n                repeatType: \"reverse\" \n              },\n              boxShadow: {\n                duration: 2,\n                repeat: status === \"Critical\" ? Infinity : 0,\n                repeatType: \"reverse\"\n              }\n            }}\n            whileHover={{ \n              scale: 1.12,\n              y: -5,\n              transition: { duration: 0.3 }\n            }}\n          >\n            <motion.div \n              animate={\n                status === \"High\" \n                ? { y: [-2, 2, -2], opacity: [0.8, 1, 0.8] } \n                : status === \"Low\" \n                ? { y: [2, -2, 2], opacity: [0.8, 1, 0.8] } \n                : {}\n              }\n              transition={{ \n                repeat: (status === \"High\" || status === \"Low\") ? Infinity : 0, \n                duration: 2, \n                repeatType: \"loop\" \n              }}\n            >\n              <Thermometer className={`h-10 w-10 ${colorScheme.icon} drop-shadow-md`} />\n            </motion.div>\n          </motion.div>\n        );\n      case \"humidity\":\n        return (\n          <motion.div \n            className={`p-6 rounded-3xl bg-gradient-to-br ${colorScheme.gradient} shadow-xl`}\n            style={{\n              boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 5px 10px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(255, 255, 255, 0.15) inset\",\n              backdropFilter: \"blur(12px)\",\n              WebkitBackdropFilter: \"blur(12px)\"\n            }}\n            initial={{ scale: 0.8, opacity: 0.7 }}\n            animate={{ \n              scale: animated ? [1, 1.08, 1] : 1,\n              opacity: 1,\n              y: status !== \"Low\" ? [0, -3, 0] : 0,\n              boxShadow: status === \"Critical\" \n                ? [\"0 10px 25px rgba(59, 130, 246, 0.15), 0 5px 10px rgba(59, 130, 246, 0.1), 0 1px 3px rgba(255, 255, 255, 0.15) inset\", \n                   \"0 15px 35px rgba(59, 130, 246, 0.25), 0 5px 15px rgba(59, 130, 246, 0.2), 0 1px 3px rgba(255, 255, 255, 0.15) inset\", \n                   \"0 10px 25px rgba(59, 130, 246, 0.15), 0 5px 10px rgba(59, 130, 246, 0.1), 0 1px 3px rgba(255, 255, 255, 0.15) inset\"]\n                : \"0 10px 25px rgba(0, 0, 0, 0.08), 0 5px 10px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(255, 255, 255, 0.15) inset\"\n            }}\n            transition={{ \n              duration: 0.7,\n              y: { \n                duration: 2.5, \n                repeat: status !== \"Low\" ? Infinity : 0, \n                repeatType: \"reverse\" \n              },\n              boxShadow: {\n                duration: 2,\n                repeat: status === \"Critical\" ? Infinity : 0,\n                repeatType: \"reverse\"\n              }\n            }}\n            whileHover={{ \n              scale: 1.12,\n              y: -5,\n              transition: { duration: 0.3 }\n            }}\n          >\n            <motion.div \n              animate={\n                status === \"Optimal\" || status === \"High\"\n                ? { y: [-3, 0, -3], opacity: [0.8, 1, 0.8] } \n                : status === \"Low\" || status === \"Critical\"\n                ? { rotate: [-5, 5, -5] } \n                : {}\n              }\n              transition={{ \n                repeat: Infinity, \n                duration: 2.5, \n                repeatType: \"loop\" \n              }}\n            >\n              <Droplets className={`h-10 w-10 ${colorScheme.icon} drop-shadow-md`} />\n            </motion.div>\n          </motion.div>\n        );\n      case \"soil\":\n        return (\n          <motion.div \n            className={`p-6 rounded-3xl bg-gradient-to-br ${colorScheme.gradient} shadow-xl`}\n            style={{\n              boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.08), 0 5px 10px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(255, 255, 255, 0.15) inset\",\n              backdropFilter: \"blur(12px)\",\n              WebkitBackdropFilter: \"blur(12px)\"\n            }}\n            initial={{ scale: 0.8, opacity: 0.7 }}\n            animate={{ \n              scale: animated ? [1, 1.08, 1] : 1,\n              opacity: 1,\n              rotate: status === \"Low\" || status === \"Critical\" ? [-2, 2, -2] : 0,\n              boxShadow: status === \"Critical\" \n                ? [\"0 10px 25px rgba(245, 158, 11, 0.15), 0 5px 10px rgba(245, 158, 11, 0.1), 0 1px 3px rgba(255, 255, 255, 0.15) inset\", \n                   \"0 15px 35px rgba(245, 158, 11, 0.25), 0 5px 15px rgba(245, 158, 11, 0.2), 0 1px 3px rgba(255, 255, 255, 0.15) inset\", \n                   \"0 10px 25px rgba(245, 158, 11, 0.15), 0 5px 10px rgba(245, 158, 11, 0.1), 0 1px 3px rgba(255, 255, 255, 0.15) inset\"]\n                : \"0 10px 25px rgba(0, 0, 0, 0.08), 0 5px 10px rgba(0, 0, 0, 0.04), 0 1px 3px rgba(255, 255, 255, 0.15) inset\"\n            }}\n            transition={{ \n              duration: 0.7,\n              rotate: { \n                duration: 2, \n                repeat: (status === \"Low\" || status === \"Critical\") ? Infinity : 0, \n                repeatType: \"reverse\" \n              },\n              boxShadow: {\n                duration: 2,\n                repeat: status === \"Critical\" ? Infinity : 0,\n                repeatType: \"reverse\"\n              }\n            }}\n            whileHover={{ \n              scale: 1.12,\n              y: -5,\n              transition: { duration: 0.3 }\n            }}\n          >\n            <motion.div \n              animate={\n                status === \"Low\" || status === \"Critical\"\n                ? { rotate: [-8, 8, -8], scale: [0.95, 1, 0.95] } \n                : status === \"High\"\n                ? { y: [-3, 0, -3], scale: [1, 1.05, 1] } \n                : {}\n              }\n              transition={{ \n                repeat: (status !== \"Optimal\") ? Infinity : 0, \n                duration: 2, \n                repeatType: \"loop\" \n              }}\n            >\n              <Gauge className={`h-10 w-10 ${colorScheme.icon} drop-shadow-md`} />\n            </motion.div>\n          </motion.div>\n        );\n    }\n  };\n\n  return (\n    <motion.div \n      whileHover={{ \n        scale: 1.02,\n        boxShadow: \"0 10px 30px rgba(0, 150, 136, 0.1)\"\n      }}\n      transition={{ type: \"spring\", stiffness: 400, damping: 20 }}\n      className=\"w-full h-full\"\n    >\n      {/* Apple Fitness-style card */}\n      <Card className=\"fitness-card overflow-hidden p-0\"\n      >\n        <div className=\"p-4 flex flex-col justify-between h-full\">\n          {/* Card Header - Apple Fitness Style */}\n          <div className=\"flex justify-between items-start\">\n            <motion.h3 \n              className=\"text-sm font-medium text-gray-600 dark:text-gray-400 sf-pro-display tracking-tight\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 0.9 }}\n              transition={{ duration: 0.5 }}\n            >\n              {getLabel()}\n            </motion.h3>\n          </div>\n          \n          {/* Central Value Display - Apple Fitness Style */}\n          <motion.div \n            className=\"flex flex-col items-center justify-center text-center flex-grow\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.4, delay: 0.1 }}\n          >\n            {/* Value Display */}\n            <motion.div className=\"flex flex-col items-center\">\n              <div className=\"flex items-baseline justify-center\">\n                <motion.span \n                  key={String(value)}\n                  initial={animated ? { opacity: 0.5, y: -5 } : { opacity: 1, y: 0 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"text-5xl font-bold text-gray-900 dark:text-white tracking-tight sf-pro-display\"\n                >\n                  {displayValue()}\n                </motion.span>\n                <span className=\"ml-1 text-xl text-gray-400 font-normal sf-pro-display\">\n                  {value !== \"none\" ? getUnit() : \"\"}\n                </span>\n              </div>\n              \n              {/* Apple Fitness Style Bar Chart */}\n              {value !== \"none\" && (\n                <div className=\"mt-6 w-full space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"h-8 w-full\">\n                      <div className=\"fitness-chart-bar w-full\">\n                        <motion.div \n                          className=\"fitness-chart-progress\"\n                          style={{ \n                            width: type === \"soil\" \n                              ? `${Math.min(100, Number(value) * 1.5)}%` \n                              : type === \"humidity\" \n                                ? `${Math.min(100, Number(value))}%` \n                                : type === \"temperature\" \n                                  ? `${Math.min(100, (Number(value) / 40) * 100)}%`\n                                  : \"50%\",\n                            backgroundColor: type === \"temperature\" \n                              ? \"#FF2D55\" \n                              : type === \"humidity\" \n                                ? \"#5AC8FA\" \n                                : \"#30D158\" \n                          }}\n                          initial={{ width: \"0%\" }}\n                          animate={{ width: value === \"none\" ? \"0%\" :\n                            type === \"soil\" \n                              ? `${Math.min(100, Number(value) * 1.5)}%` \n                              : type === \"humidity\" \n                                ? `${Math.min(100, Number(value))}%` \n                                : type === \"temperature\" \n                                  ? `${Math.min(100, (Number(value) / 40) * 100)}%`\n                                  : \"50%\"\n                          }}\n                          transition={{ duration: 1, ease: \"easeOut\" }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </motion.div>\n          \n          {/* Status Indicator */}\n          <div className=\"flex items-center justify-between text-xs mt-2\">\n            <span className=\"text-gray-500\">\n              {status}\n            </span>\n            <span className=\"text-gray-500\">\n              {type === \"temperature\" ? \"Max 40°C\" : \n               type === \"humidity\" ? \"Max 100%\" : \n               \"Max 100%\"}\n            </span>\n          </div>\n        </div>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":20236},"client/src/components/StatusOverview.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { SensorCard } from './SensorCard';\nimport { SensorData } from '@/lib/firebase';\nimport { PlantConfigValues } from './PlantConfig';\n\ninterface StatusOverviewProps {\n  sensorData: SensorData;\n  config: PlantConfigValues;\n}\n\nexport function StatusOverview({ sensorData, config }: StatusOverviewProps) {\n  const [lastUpdated, setLastUpdated] = useState<string>('Updated just now');\n  const [prevSensorData, setPrevSensorData] = useState<SensorData | null>(null);\n  \n  useEffect(() => {\n    // Update the \"last updated\" text\n    setLastUpdated('Updated just now');\n    const timer = setTimeout(() => {\n      const date = new Date(sensorData.timestamp);\n      setLastUpdated(`Updated ${date.toLocaleTimeString()}`);\n    }, 60000);\n    \n    // Store previous sensor data for change calculation\n    if (sensorData !== null) {\n      setPrevSensorData(sensorData);\n    }\n    \n    return () => clearTimeout(timer);\n  }, [sensorData]);\n  \n  const getTemperatureStatus = () => {\n    const { temperature } = sensorData;\n    const { tempMin, tempMax } = config;\n    \n    if (temperature < tempMin) return \"Low\";\n    if (temperature > tempMax) return \"High\";\n    return \"Optimal\";\n  };\n  \n  const getHumidityStatus = () => {\n    const { humidity } = sensorData;\n    const { humidityMin, humidityMax } = config;\n    \n    if (humidity < humidityMin) return \"Low\";\n    if (humidity > humidityMax) return \"High\";\n    return \"Optimal\";\n  };\n  \n  // This function is no longer needed since we removed the soil moisture sensor\n  \n  return (\n    <section className=\"mb-8\">\n      <div className=\"flex items-center mb-4\">\n        <h2 className=\"text-lg font-medium\">Plant Status Overview</h2>\n        <span className=\"ml-2 px-2 py-0.5 text-xs font-medium rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Live</span>\n        <span className=\"ml-auto text-sm text-gray-500 dark:text-gray-400\">{lastUpdated}</span>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <SensorCard \n          type=\"temperature\" \n          value={sensorData.temperature} \n          previousValue={prevSensorData?.temperature} \n          status={getTemperatureStatus()} \n        />\n        \n        <SensorCard \n          type=\"humidity\" \n          value={sensorData.humidity} \n          previousValue={prevSensorData?.humidity} \n          status={getHumidityStatus()} \n        />\n      </div>\n    </section>\n  );\n}\n","size_bytes":2488},"client/src/components/TimestampDataCollector.tsx":{"content":"import { useEffect } from 'react';\nimport { TimestampLogger } from '@/lib/timestampLogger';\nimport { initializeFirebase } from '@/lib/firebase';\n\n/**\n * This component is responsible for collecting timestamp data every 5 seconds\n * It doesn't render any UI - it just starts and manages the timestamp data collection\n */\nexport function TimestampDataCollector() {\n  useEffect(() => {\n    // Make sure Firebase is initialized\n    const isInitialized = initializeFirebase();\n    \n    if (isInitialized) {\n      // Get singleton instance of TimestampLogger\n      const timestampLogger = TimestampLogger.getInstance();\n      \n      // Log timestamp data every 5 seconds\n      timestampLogger.startLogging(5000);\n      \n      // Log initial data point\n      timestampLogger.logOnce();\n      \n      console.log('Timestamp collector started - logging data every 5 seconds to timestamps folder');\n      \n      // Clean up on unmount\n      return () => {\n        timestampLogger.stopLogging();\n        console.log('Timestamp collector stopped');\n      };\n    } else {\n      console.error('Firebase could not be initialized - timestamp collection disabled');\n    }\n  }, []);\n  \n  // This component doesn't render anything\n  return null;\n}","size_bytes":1227},"client/src/components/WebcamCapture.tsx":{"content":"import React, { useRef, useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Camera, X, CameraOff, RefreshCw } from 'lucide-react';\n\ninterface WebcamCaptureProps {\n  onCapture: (imageData: string) => void;\n  onClose: () => void;\n}\n\nexport function WebcamCapture({ onCapture, onClose }: WebcamCaptureProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [cameraActive, setCameraActive] = useState(false);\n  \n  // Initialize the camera stream\n  const initCamera = async () => {\n    try {\n      setError(null);\n      const constraints = {\n        video: {\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          facingMode: { ideal: 'environment' } // Prefer back camera\n        }\n      };\n      \n      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n      setStream(mediaStream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n        setCameraActive(true);\n      }\n    } catch (err) {\n      console.error('Error accessing camera:', err);\n      setError('Could not access the camera. Please check permissions or try another browser.');\n    }\n  };\n  \n  // Clean up the camera stream when component unmounts\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n      setCameraActive(false);\n    }\n  };\n  \n  // Switch camera between front and back\n  const switchCamera = async () => {\n    stopCamera();\n    try {\n      setError(null);\n      const currentFacingMode = stream?.getVideoTracks()[0]?.getSettings()?.facingMode;\n      const newFacingMode = currentFacingMode === 'environment' ? 'user' : 'environment';\n      \n      const constraints = {\n        video: {\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          facingMode: { ideal: newFacingMode }\n        }\n      };\n      \n      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n      setStream(mediaStream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n        setCameraActive(true);\n      }\n    } catch (err) {\n      console.error('Error switching camera:', err);\n      setError('Could not switch camera. Trying to reinitialize...');\n      initCamera(); // Try to reinitialize with default settings\n    }\n  };\n  \n  // Capture a photo from the video stream\n  const capturePhoto = () => {\n    if (videoRef.current && canvasRef.current && cameraActive) {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      \n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      \n      const context = canvas.getContext('2d');\n      if (context) {\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const imageData = canvas.toDataURL('image/jpeg', 0.9);\n        onCapture(imageData);\n      }\n    }\n  };\n  \n  // Initialize camera when component mounts\n  useEffect(() => {\n    initCamera();\n    \n    // Clean up when component unmounts\n    return () => {\n      stopCamera();\n    };\n  }, []);\n  \n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"relative bg-black rounded-lg overflow-hidden\">\n        {/* Close button */}\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"absolute top-2 right-2 z-10 bg-black/50 text-white border-none h-8 w-8 p-0\"\n          onClick={() => {\n            stopCamera();\n            onClose();\n          }}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n        \n        {/* Camera feed */}\n        <div className=\"relative aspect-[4/3] bg-black flex items-center justify-center\">\n          {cameraActive ? (\n            <video\n              ref={videoRef}\n              autoPlay\n              playsInline\n              muted\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"text-white flex flex-col items-center justify-center h-full\">\n              <CameraOff className=\"h-10 w-10 mb-2\" />\n              <p className=\"text-sm\">{error || 'Camera not active'}</p>\n              {error && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"mt-2 border-white/30 text-white\"\n                  onClick={initCamera}\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-1\" />\n                  Retry\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n        \n        {/* Controls */}\n        <div className=\"flex justify-between items-center p-3 bg-black\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"border-white/30 text-white\"\n            onClick={switchCamera}\n            disabled={!cameraActive}\n          >\n            Switch Camera\n          </Button>\n          \n          <Button\n            variant=\"default\"\n            size=\"lg\"\n            className=\"h-12 w-12 rounded-full p-0 bg-white text-black hover:bg-white/90\"\n            onClick={capturePhoto}\n            disabled={!cameraActive}\n          >\n            <Camera className=\"h-6 w-6\" />\n          </Button>\n          \n          <div className=\"w-20\" /> {/* Spacer for centering the capture button */}\n        </div>\n      </div>\n      \n      {/* Hidden canvas for capturing photos */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}","size_bytes":5669},"client/src/hooks/use-device.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useDevice() {\n  const [isMobile, setIsMobile] = useState(false);\n  const [deviceType, setDeviceType] = useState<'desktop' | 'tablet' | 'mobile'>('desktop');\n\n  useEffect(() => {\n    const checkDevice = () => {\n      // Check if mobile based on screen width\n      const width = window.innerWidth;\n      setIsMobile(width < 768);\n      \n      // Determine more specific device type\n      if (width < 640) {\n        setDeviceType('mobile');\n      } else if (width < 1024) {\n        setDeviceType('tablet');\n      } else {\n        setDeviceType('desktop');\n      }\n    };\n    \n    // Check for touch capability (additional mobile indicator)\n    const hasTouchScreen = () => {\n      return 'ontouchstart' in window || \n        navigator.maxTouchPoints > 0 ||\n        // @ts-ignore - For IE-specific detection\n        navigator.msMaxTouchPoints > 0;\n    };\n    \n    // Check on initial load\n    checkDevice();\n    \n    // If touch is available, it's likely a mobile device\n    if (hasTouchScreen() && window.innerWidth < 1024) {\n      setIsMobile(true);\n      if (window.innerWidth < 640) {\n        setDeviceType('mobile');\n      } else {\n        setDeviceType('tablet');\n      }\n    }\n    \n    // Add event listener for window resize\n    window.addEventListener(\"resize\", checkDevice);\n    \n    // Clean up event listener\n    return () => window.removeEventListener(\"resize\", checkDevice);\n  }, []);\n\n  return { \n    isMobile, \n    deviceType,\n    isDesktop: deviceType === 'desktop',\n    isTablet: deviceType === 'tablet',\n    isMobileDevice: deviceType === 'mobile'\n  };\n}","size_bytes":1631},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/AuthProvider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { User } from \"firebase/auth\";\nimport { \n  subscribeToAuthChanges, \n  getCurrentUser,\n  getUserProfile,\n  UserProfile\n} from \"./auth\";\n\ninterface AuthContextType {\n  user: User | null;\n  profile: UserProfile | null;\n  loading: boolean;\n  refreshProfile: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(getCurrentUser());\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  // Load user profile when user is authenticated\n  useEffect(() => {\n    const loadUserProfile = async () => {\n      if (user) {\n        const userProfile = await getUserProfile(user.uid);\n        setProfile(userProfile);\n      } else {\n        setProfile(null);\n      }\n      setLoading(false);\n    };\n\n    loadUserProfile();\n  }, [user]);\n\n  // Subscribe to auth state changes\n  useEffect(() => {\n    const unsubscribe = subscribeToAuthChanges((authUser) => {\n      console.log(\"Auth state changed:\", authUser ? \"Logged in\" : \"Logged out\");\n      setUser(authUser);\n      setLoading(true);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // Function to refresh user profile\n  const refreshProfile = async () => {\n    setLoading(true);\n    if (user) {\n      const userProfile = await getUserProfile(user.uid);\n      setProfile(userProfile);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, profile, loading, refreshProfile }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":1933},"client/src/lib/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  // Initialize theme from localStorage or default to dark mode (per app UI requirements)\n  const [theme, setThemeState] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    return (savedTheme === \"light\" || savedTheme === \"dark\") ? savedTheme : \"dark\";\n  });\n\n  useEffect(() => {\n    // Update HTML class and document theme when theme changes\n    if (theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n      document.documentElement.style.colorScheme = \"dark\";\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n      document.documentElement.style.colorScheme = \"light\";\n    }\n    \n    // Save theme preference\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setThemeState(prevTheme => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n  \n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","size_bytes":1648},"client/src/lib/auth.ts":{"content":"import { initializeApp, getApps, FirebaseApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  GoogleAuthProvider,\n  signOut,\n  onAuthStateChanged,\n  User,\n  updateProfile,\n  sendPasswordResetEmail,\n} from \"firebase/auth\";\nimport { getDatabase, ref, set, get } from \"firebase/database\";\n\n// Firebase configuration from environment variables\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.appspot.com`,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n  databaseURL: import.meta.env.VITE_FIREBASE_DATABASE_URL,\n};\n\n// Initialize Firebase only if it hasn't been initialized yet\nlet app: FirebaseApp;\nif (getApps().length === 0) {\n  app = initializeApp(firebaseConfig);\n} else {\n  app = getApps()[0];\n}\n\nconst auth = getAuth(app);\nconst database = getDatabase(app);\n\n// Google auth provider\nconst googleProvider = new GoogleAuthProvider();\n\n// Expertise levels\nexport const EXPERTISE_LEVELS = [\n  {\n    id: \"beginner\",\n    name: \"Beginner\",\n    description: \"I'm new to plant care and learning the basics\",\n  },\n  {\n    id: \"intermediate\",\n    name: \"Intermediate\",\n    description: \"I have some experience with common house plants\",\n  },\n  {\n    id: \"advanced\",\n    name: \"Advanced\",\n    description:\n      \"I'm experienced with a variety of plants and growing techniques\",\n  },\n  {\n    id: \"expert\",\n    name: \"Expert\",\n    description: \"I have professional or extensive knowledge of horticulture\",\n  },\n];\n\n// User profile interface\nexport interface UserProfile {\n  uid: string;\n  email: string;\n  displayName: string;\n  photoURL?: string;\n  expertiseLevel?: string;\n  plants?: { [plantId: string]: UserPlant };\n  createdAt: number;\n}\n\n// User plant interface\nexport interface UserPlant {\n  id: string;\n  name: string;\n  species: string;\n  addedAt: number;\n  imageUrl?: string;\n  lastWatered?: number;\n  notes?: string;\n  health?: \"excellent\" | \"good\" | \"fair\" | \"poor\";\n}\n\n// Sign in with Google\nexport const signInWithGoogle = async (): Promise<UserProfile | null> => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    const user = result.user;\n\n    // Check if user profile exists, create if not\n    const userProfile = await getUserProfile(user.uid);\n\n    if (!userProfile) {\n      // Create new user profile\n      const newProfile: UserProfile = {\n        uid: user.uid,\n        email: user.email || \"\",\n        displayName: user.displayName || \"\",\n        photoURL: user.photoURL || \"\",\n        createdAt: Date.now(),\n      };\n\n      await saveUserProfile(newProfile);\n      return newProfile;\n    }\n\n    return userProfile;\n  } catch (error) {\n    console.error(\"Error signing in with Google:\", error);\n    return null;\n  }\n};\n\n// Get user profile from database\nexport const getUserProfile = async (\n  uid: string,\n): Promise<UserProfile | null> => {\n  try {\n    const userRef = ref(database, `users/${uid}`);\n    const snapshot = await get(userRef);\n\n    if (snapshot.exists()) {\n      return snapshot.val() as UserProfile;\n    }\n\n    return null;\n  } catch (error) {\n    console.error(\"Error getting user profile:\", error);\n    return null;\n  }\n};\n\n// Save user profile to database\nexport const saveUserProfile = async (\n  profile: UserProfile,\n): Promise<boolean> => {\n  try {\n    const userRef = ref(database, `users/${profile.uid}`);\n    await set(userRef, profile);\n    return true;\n  } catch (error) {\n    console.error(\"Error saving user profile:\", error);\n    return false;\n  }\n};\n\n// Update user expertise level\nexport const updateExpertiseLevel = async (\n  uid: string,\n  level: string,\n): Promise<boolean> => {\n  try {\n    const userRef = ref(database, `users/${uid}/expertiseLevel`);\n    await set(userRef, level);\n    return true;\n  } catch (error) {\n    console.error(\"Error updating expertise level:\", error);\n    return false;\n  }\n};\n\n// Add a plant to user's collection\nexport const addUserPlant = async (\n  uid: string,\n  plant: UserPlant,\n): Promise<boolean> => {\n  try {\n    const userPlantsRef = ref(database, `users/${uid}/plants/${plant.id}`);\n    await set(userPlantsRef, plant);\n    return true;\n  } catch (error) {\n    console.error(\"Error adding user plant:\", error);\n    return false;\n  }\n};\n\n// Sign out user\nexport const userSignOut = async (): Promise<boolean> => {\n  try {\n    await signOut(auth);\n    return true;\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n    return false;\n  }\n};\n\n// Auth state change subscription\nexport const subscribeToAuthChanges = (\n  callback: (user: User | null) => void,\n) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// Get current user\nexport const getCurrentUser = (): User | null => {\n  return auth.currentUser;\n};\n\n// Email registration\nexport const registerWithEmail = async (\n  email: string,\n  password: string,\n  displayName: string,\n): Promise<UserProfile | null> => {\n  try {\n    // Create user with email and password\n    const userCredential = await createUserWithEmailAndPassword(\n      auth,\n      email,\n      password,\n    );\n    const user = userCredential.user;\n\n    // Update the user's display name\n    await updateProfile(user, { displayName });\n\n    // Create and save user profile\n    const newProfile: UserProfile = {\n      uid: user.uid,\n      email: user.email || \"\",\n      displayName: displayName,\n      photoURL: user.photoURL || \"\",\n      createdAt: Date.now(),\n    };\n\n    await saveUserProfile(newProfile);\n    return newProfile;\n  } catch (error) {\n    console.error(\"Error registering with email:\", error);\n    throw error;\n  }\n};\n\n// Email login\nexport const loginWithEmail = async (\n  email: string,\n  password: string,\n): Promise<UserProfile | null> => {\n  try {\n    // First try normal Firebase authentication\n    try {\n      const userCredential = await signInWithEmailAndPassword(\n        auth,\n        email,\n        password,\n      );\n      const user = userCredential.user;\n\n      // Get user profile or create if it doesn't exist\n      let userProfile = await getUserProfile(user.uid);\n\n      if (!userProfile) {\n        // Create profile if it doesn't exist (rare case)\n        const newProfile: UserProfile = {\n          uid: user.uid,\n          email: user.email || \"\",\n          displayName: user.displayName || \"\",\n          photoURL: user.photoURL || \"\",\n          createdAt: Date.now(),\n        };\n\n        await saveUserProfile(newProfile);\n        return newProfile;\n      }\n\n      return userProfile;\n    } catch (authError) {\n      console.log(\"Standard auth failed, checking for temp password...\");\n\n      // If normal auth fails, check if there's a temp password set for this user\n      // Find the user by email first\n      const usersRef = ref(database, \"users\");\n      const usersSnapshot = await get(usersRef);\n\n      if (!usersSnapshot.exists()) {\n        throw new Error(\"No users found\");\n      }\n\n      let userId = \"\";\n\n      // Find the user by email\n      usersSnapshot.forEach((childSnapshot) => {\n        const userProfile = childSnapshot.val() as UserProfile;\n        if (userProfile.email === email) {\n          userId = userProfile.uid;\n        }\n      });\n\n      if (!userId) {\n        throw new Error(\"Email not found\");\n      }\n\n      // Check if there's a temporary password\n      const tempPasswordRef = ref(database, `tempPasswords/${userId}`);\n      const tempSnapshot = await get(tempPasswordRef);\n\n      if (!tempSnapshot.exists()) {\n        // No temp password found, throw the original error\n        throw authError;\n      }\n\n      const tempData = tempSnapshot.val();\n\n      if (tempData.password !== password) {\n        // Password doesn't match\n        throw new Error(\"Invalid temp password\");\n      }\n\n      // Password matches, now we'll update the real password in Firebase\n      try {\n        // Create custom auth token (this would require Firebase Admin SDK in a real app)\n        // For this demo, we'll reuse the same Firebase auth object but with updated credentials\n\n        // Get user and update in database\n        const userProfile = await getUserProfile(userId);\n\n        if (!userProfile) {\n          throw new Error(\"User profile not found\");\n        }\n\n        // Clear the temp password as it's been used\n        await set(tempPasswordRef, null);\n\n        // For users logging in with a reset password, make sure they have an expertise level\n        // This will skip the expertise selection screen\n        try {\n          // Set a default expertise level if needed\n          if (!userProfile.expertiseLevel) {\n            const defaultExpertiseLevel = \"beginner\";\n            await updateExpertiseLevel(userId, defaultExpertiseLevel);\n\n            // Update the local profile\n            userProfile.expertiseLevel = defaultExpertiseLevel;\n          }\n        } catch (err) {\n          console.log(\"Could not set expertise level:\", err);\n          // Continue anyway\n        }\n\n        // Since we can't directly reset the password without user being authenticated,\n        // we'll need to rely on the temp password mechanism for logging in\n        return userProfile;\n      } catch (resetError) {\n        console.error(\"Error updating password:\", resetError);\n        throw resetError;\n      }\n    }\n  } catch (error) {\n    console.error(\"Error logging in with email:\", error);\n    throw error;\n  }\n};\n\n// Password reset\nexport const resetPassword = async (email: string): Promise<string> => {\n  try {\n    // Check if user exists with this email first\n    const userRef = ref(database, \"users\");\n    const snapshot = await get(userRef);\n\n    if (!snapshot.exists()) {\n      throw new Error(\"User not found\");\n    }\n\n    let userId = \"\";\n    let userData: UserProfile | null = null;\n\n    // Find the user by email\n    snapshot.forEach((childSnapshot) => {\n      const userProfile = childSnapshot.val();\n      if (userProfile && userProfile.email === email) {\n        userId = userProfile.uid;\n        userData = userProfile as UserProfile;\n      }\n    });\n\n    if (!userId || !userData) {\n      throw new Error(\"Email not found\");\n    }\n\n    // Generate a new random password (not very secure but simple for this demo)\n    const newPassword = generateRandomPassword();\n\n    // Sign in with custom token or admin SDK would be needed for a real solution\n    // For this demo, we'll just update the database password\n\n    try {\n      // Since Firebase Auth doesn't let us directly update passwords without auth,\n      // for this demo we'll create a special entry in the database for temp passwords\n      const tempPasswordRef = ref(database, `tempPasswords/${userId}`);\n      await set(tempPasswordRef, {\n        email: email,\n        password: newPassword,\n        timestamp: Date.now(),\n      });\n\n      // Make sure the user has an expertise level to skip that screen after login\n      try {\n        // Try to set a default expertise level to skip the expertise selection screen\n        const defaultExpertiseLevel = \"beginner\";\n        await updateExpertiseLevel(userId, defaultExpertiseLevel);\n      } catch (error) {\n        console.log(\"Could not set default expertise level:\", error);\n        // Continue anyway, not critical\n      }\n\n      return newPassword;\n    } catch (resetError) {\n      console.error(\"Failed to reset password:\", resetError);\n      throw resetError;\n    }\n  } catch (error) {\n    console.error(\"Error in password reset process:\", error);\n    throw error;\n  }\n};\n\n// Generate a random password\nfunction generateRandomPassword(): string {\n  const length = 8;\n  const charset =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let password = \"\";\n\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * charset.length);\n    password += charset[randomIndex];\n  }\n\n  return password;\n}\n","size_bytes":12074},"client/src/lib/dataLogger.ts":{"content":"import { ref, set, push, serverTimestamp } from 'firebase/database';\nimport { database } from './firebase';\nimport { SensorData } from './firebase';\n\n/**\n * Service that logs sensor data periodically to the Firebase database\n * for historical tracking and graphing purposes\n */\nexport class DataLogger {\n  private static instance: DataLogger;\n  private timerId: NodeJS.Timeout | null = null;\n  private isLogging: boolean = false;\n  private intervalMs: number = 5000; // 5 seconds by default\n  private plantId: string = 'default'; // Default plant ID\n  \n  // Singleton pattern\n  private constructor() {}\n  \n  public static getInstance(): DataLogger {\n    if (!DataLogger.instance) {\n      DataLogger.instance = new DataLogger();\n    }\n    return DataLogger.instance;\n  }\n  \n  /**\n   * Start logging sensor data at set intervals\n   * @param plantId - The ID of the plant to log data for\n   * @param intervalMs - Optional interval in milliseconds (defaults to 5000ms)\n   */\n  public startLogging(plantId: string = 'default', intervalMs: number = 5000): void {\n    if (this.isLogging) {\n      console.log('Data logger is already running');\n      return;\n    }\n    \n    this.plantId = plantId;\n    this.intervalMs = intervalMs;\n    this.isLogging = true;\n    \n    console.log(`Starting data logger for plant ${plantId} with ${intervalMs}ms interval`);\n    \n    // Schedule the recurring log function\n    this.timerId = setInterval(() => this.logCurrentData(), this.intervalMs);\n    \n    // Log immediately on start\n    this.logCurrentData();\n  }\n  \n  /**\n   * Stop the data logging service\n   */\n  public stopLogging(): void {\n    if (!this.isLogging || !this.timerId) {\n      console.log('Data logger is not running');\n      return;\n    }\n    \n    clearInterval(this.timerId);\n    this.timerId = null;\n    this.isLogging = false;\n    console.log('Data logger stopped');\n  }\n  \n  /**\n   * Log the current sensor data to the history collection\n   */\n  private async logCurrentData(): Promise<void> {\n    try {\n      // Get reference to the current data\n      const currentDataRef = ref(database, 'sensorData/current');\n      \n      // Get reference to the history data\n      const historyRef = ref(database, `sensorData/history/${this.plantId}`);\n      \n      // Create a new entry in the history with an auto-generated ID\n      const newHistoryRef = push(historyRef);\n      \n      // Get the current timestamp\n      const timestamp = Date.now();\n      \n      // Define the data to be logged\n      const currentSensorData: SensorData = {\n        temperature: 0, // Will be fetched from Firebase\n        humidity: 0,    // Will be fetched from Firebase\n        timestamp: timestamp\n      };\n      \n      // Fetch the current temperature from Firebase\n      const temperatureRef = ref(database, 'sensorData/current/temperature');\n      const humidityRef = ref(database, 'sensorData/current/humidity');\n      const lightRef = ref(database, 'sensorData/current/Light'); // Capital L as in the API\n      const soilMoistureRef = ref(database, 'sensorData/current/soilMoister'); // 'soilMoister' as in the API\n      \n      // Use dynamic imports to avoid circular dependencies\n      const { onValue } = await import('firebase/database');\n      \n      // Get temperature\n      onValue(temperatureRef, (snapshot) => {\n        if (snapshot.exists()) {\n          currentSensorData.temperature = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Get humidity\n      onValue(humidityRef, (snapshot) => {\n        if (snapshot.exists()) {\n          currentSensorData.humidity = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Get light if available\n      onValue(lightRef, (snapshot) => {\n        if (snapshot.exists()) {\n          currentSensorData.light = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Get soil moisture if available\n      onValue(soilMoistureRef, (snapshot) => {\n        if (snapshot.exists()) {\n          currentSensorData.soilMoisture = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Wait a short time to make sure all data is fetched\n      setTimeout(() => {\n        // Set the data in the history node\n        set(newHistoryRef, currentSensorData)\n          .then(() => {\n            console.log(`Logged sensor data at ${new Date(timestamp).toLocaleTimeString()}:`, currentSensorData);\n          })\n          .catch((error) => {\n            console.error('Error logging sensor data:', error);\n          });\n      }, 200);\n      \n    } catch (error) {\n      console.error('Error in data logger:', error);\n    }\n  }\n  \n  /**\n   * Manually log data once without starting the scheduled logging\n   */\n  public logOnce(plantId: string = 'default'): void {\n    this.plantId = plantId;\n    this.logCurrentData();\n  }\n  \n  /**\n   * Check if the logger is currently running\n   */\n  public isRunning(): boolean {\n    return this.isLogging;\n  }\n  \n  /**\n   * Get the current logging interval\n   */\n  public getInterval(): number {\n    return this.intervalMs;\n  }\n  \n  /**\n   * Change the logging interval\n   * @param intervalMs - New interval in milliseconds\n   */\n  public setInterval(intervalMs: number): void {\n    if (intervalMs < 1000) {\n      console.warn('Logging interval should be at least 1000ms to avoid overloading the database');\n      intervalMs = 1000;\n    }\n    \n    this.intervalMs = intervalMs;\n    \n    // Restart the timer if already running\n    if (this.isLogging && this.timerId) {\n      clearInterval(this.timerId);\n      this.timerId = setInterval(() => this.logCurrentData(), this.intervalMs);\n      console.log(`Updated logging interval to ${intervalMs}ms`);\n    }\n  }\n}","size_bytes":5682},"client/src/lib/environmentOptimizer.ts":{"content":"// import environment variables directly\n\n// Define the optimal environment values interface\nexport interface OptimalEnvironmentValues {\n  temperature: {\n    min: number;\n    max: number;\n    unit: 'C' | 'F';\n  };\n  humidity: {\n    min: number;\n    max: number;\n  };\n  light: {\n    min: number;\n    max: number;\n    description: string;\n  };\n  soilMoisture: {\n    min: number;\n    max: number;\n    description: string;\n  };\n  recommendations: string[];\n}\n\n// Get AI recommendations for optimal environment values\nexport async function getOptimalEnvironmentValues(plantName: string): Promise<OptimalEnvironmentValues> {\n  try {\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Gemini API key is missing');\n    }\n\n    // Construct the API endpoint\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    \n    // Create the prompt for plant environment optimization\n    const prompt = `\n    I need precise optimal environmental values for a ${plantName} plant.\n    \n    Please provide a detailed analysis of the ideal growing conditions including:\n    \n    1. Temperature range (in Celsius)\n    2. Humidity range (percentage)\n    3. Light level range (percentage, where 0% is complete darkness and 100% is full direct sunlight)\n    4. Soil moisture level range (percentage, where 0% is completely dry and 100% is fully saturated)\n    \n    Format your answer as a valid JSON object with these exact fields:\n    {\n      \"temperature\": {\n        \"min\": number,\n        \"max\": number,\n        \"unit\": \"C\"\n      },\n      \"humidity\": {\n        \"min\": number,\n        \"max\": number\n      },\n      \"light\": {\n        \"min\": number,\n        \"max\": number,\n        \"description\": \"string description of light requirements\"\n      },\n      \"soilMoisture\": {\n        \"min\": number,\n        \"max\": number,\n        \"description\": \"string description of watering requirements\"\n      },\n      \"recommendations\": [\n        \"string with specific advice\"\n      ]\n    }\n    \n    Provide the most scientifically accurate values. Be sure the JSON is valid with all numeric values (not strings).\n    `;\n    \n    // Prepare the payload\n    const payload = {\n      contents: [{\n        parts: [{ text: prompt }]\n      }]\n    };\n    \n    // Make the API request\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API request failed with status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Extract the response text\n    const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text;\n    \n    if (!responseText) {\n      throw new Error('No response received from Gemini API');\n    }\n    \n    // Extract JSON from the response\n    const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n    \n    if (!jsonMatch) {\n      throw new Error('Could not extract JSON from response');\n    }\n    \n    try {\n      // Parse the JSON data\n      const environmentData = JSON.parse(jsonMatch[0]) as OptimalEnvironmentValues;\n      console.log('Optimal environment values:', environmentData);\n      return environmentData;\n    } catch (jsonError) {\n      console.error('Error parsing JSON:', jsonError);\n      throw new Error('Invalid JSON in API response');\n    }\n  } catch (error) {\n    console.error('Error getting optimal environment values:', error);\n    // Return default values as fallback\n    return {\n      temperature: {\n        min: 18,\n        max: 24,\n        unit: 'C',\n      },\n      humidity: {\n        min: 40,\n        max: 60,\n      },\n      light: {\n        min: 30,\n        max: 70,\n        description: \"Medium indirect light\",\n      },\n      soilMoisture: {\n        min: 30,\n        max: 60,\n        description: \"Allow top inch of soil to dry between watering\",\n      },\n      recommendations: [\n        \"Maintain consistent environment without sudden changes\",\n        \"Ensure proper drainage for plant health\",\n        \"Consider the plant's native habitat for best results\"\n      ]\n    };\n  }\n}","size_bytes":4217},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, onValue, DataSnapshot, set, get, push } from 'firebase/database';\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\n\n// Firebase configuration with hardcoded values as requested\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBwe24dNvuyeso79qoK-fuKpW4V14lYR9c\",\n  authDomain: \"smart-plant-12444.firebaseapp.com\",\n  databaseURL: \"https://smart-plant-12444-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"smart-plant-12444\",\n  storageBucket: \"smart-plant-12444.firebasestorage.app\",\n  messagingSenderId: \"940454794399\",\n  appId: \"1:940454794399:web:8fa46e73bc987479c6feaa\"\n};\n\n// Initialize Firebase\nlet app: any;\nexport let database: any;\nlet storage: any;\n\n// Initialize Firebase\nexport function initializeFirebase(): boolean {\n  try {\n    if (!app) {\n      app = initializeApp(firebaseConfig);\n      console.log('Firebase app initialized successfully');\n    }\n    \n    if (!database) {\n      database = getDatabase(app);\n      console.log('Firebase database initialized successfully');\n    }\n    \n    if (!storage) {\n      storage = getStorage(app);\n      console.log('Firebase Storage initialized successfully');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error initializing Firebase:', error);\n    return false;\n  }\n}\n\n// Initialize Firebase automatically\ninitializeFirebase();\n\n// Generate sample data if not exists\nfunction generateSampleData() {\n  if (!database) {\n    console.error('Firebase database not initialized');\n    return;\n  }\n  \n  console.log('Checking if sensor data exists...');\n  \n  // Check if current data exists\n  const currentRef = ref(database, 'sensorData/current');\n  get(currentRef).then((snapshot) => {\n    if (!snapshot.exists()) {\n      console.log('No current sensor data found - generating sample data');\n      \n      // Create initial current data\n      const currentData: SensorData = {\n        temperature: 22.5,\n        humidity: 45,\n        light: 75,\n        soilMoisture: 65,\n        timestamp: Date.now()\n      };\n      \n      set(ref(database, 'sensorData/current'), currentData)\n        .then(() => console.log('Successfully created sample current data'))\n        .catch((err: Error) => console.error('Error creating current data:', err));\n    } else {\n      console.log('Current sensor data exists');\n    }\n  }).catch((error: any) => {\n    console.error('Error checking current data:', error);\n  });\n  \n  // Check if history data exists\n  const historyRef = ref(database, 'sensorData/history');\n  get(historyRef).then((snapshot) => {\n    if (!snapshot.exists() || Object.keys(snapshot.val() || {}).length === 0) {\n      console.log('No sensor history data found - generating sample history data');\n      generateSensorHistory()\n        .then(() => console.log('Successfully created sample history data'))\n        .catch((err) => console.error('Error generating history data:', err));\n    } else {\n      console.log('Sensor history data exists');\n    }\n  }).catch((error) => {\n    console.error('Error checking history data:', error);\n  });\n  \n  // Check if plant controls exists\n  const controlsRef = ref(database, 'plantControls');\n  get(controlsRef).then((snapshot) => {\n    if (!snapshot.exists()) {\n      console.log('No plant controls found - creating initial controls');\n      \n      const initialControls = {\n        uvLight: false,\n        wateringActive: false\n      };\n      \n      set(controlsRef, initialControls)\n        .then(() => console.log('Successfully created initial plant controls'))\n        .catch((err: Error) => console.error('Error initializing controls:', err));\n    } else {\n      console.log('Plant controls exist');\n    }\n  }).catch((error) => {\n    console.error('Error checking plant controls:', error);\n  });\n}\n\n// Sensor data interface\nexport interface SensorData {\n  temperature: number;\n  humidity: number;\n  light?: number;\n  soilMoisture?: number;\n  timestamp: number;\n}\n\n// Sensor history interface\nexport interface SensorHistory {\n  [timestamp: number]: {\n    temperature: number;\n    humidity: number;\n    light?: number;\n    soilMoisture?: number;\n  };\n}\n\n// Metric history point interface\nexport interface MetricHistoryPoint {\n  timestamp: number;\n  value: number;\n}\n\n// Plant history data point interface\nexport interface PlantHistoryData {\n  timestamp: number;\n  temperature?: number;\n  humidity?: number;\n  light?: number;\n  soilMoisture?: number;\n}\n\n// Get specific metric history\nexport async function getMetricHistory(\n  metric: 'temperature' | 'humidity' | 'light' | 'soilMoisture',\n  days: number\n): Promise<MetricHistoryPoint[]> {\n  if (!database) {\n    console.error('Firebase database not initialized');\n    return [];\n  }\n  \n  return new Promise((resolve) => {\n    // Get all metrics and extract the one we want\n    getSensorHistory(days, (data) => {\n      const result: MetricHistoryPoint[] = [];\n      \n      for (const [timestamp, values] of Object.entries(data)) {\n        if (values[metric] !== undefined) {\n          result.push({\n            timestamp: parseInt(timestamp),\n            value: values[metric] as number\n          });\n        }\n      }\n      \n      resolve(result.sort((a, b) => a.timestamp - b.timestamp));\n    });\n  });\n}\n\n// Get all metrics history\nexport async function getAllMetricsHistory(\n  days: number\n): Promise<PlantHistoryData[]> {\n  if (!database) {\n    console.error('Firebase database not initialized');\n    return [];\n  }\n  \n  return new Promise((resolve) => {\n    getSensorHistory(days, (data) => {\n      const result: PlantHistoryData[] = [];\n      \n      for (const [timestamp, values] of Object.entries(data)) {\n        result.push({\n          timestamp: parseInt(timestamp),\n          temperature: values.temperature,\n          humidity: values.humidity,\n          light: values.light,\n          soilMoisture: values.soilMoisture\n        });\n      }\n      \n      resolve(result.sort((a, b) => a.timestamp - b.timestamp));\n    });\n  });\n}\n\n// Subscribe to current sensor data\nexport function subscribeSensorData(callback: (data: SensorData) => void) {\n  if (!database) {\n    console.error('Firebase database not initialized when trying to subscribe to sensor data');\n    return () => {};\n  }\n  \n  console.log('Setting up subscription to current sensor data');\n  \n  // References to sensor data paths\n  const temperatureRef = ref(database, 'sensorData/current/temperature');\n  const humidityRef = ref(database, 'sensorData/current/humidity');\n  const lightRef = ref(database, 'sensorData/current/Light'); // Capital L as in the API\n  const soilMoistureRef = ref(database, 'sensorData/current/soilMoister'); // 'soilMoister' as in the API\n  \n  // Create sensor data object\n  let sensorData: SensorData = {\n    temperature: 0,\n    humidity: 0,\n    timestamp: Date.now()\n  };\n  \n  // Subscribe to temperature updates\n  const tempUnsubscribe = onValue(temperatureRef, (snapshot: DataSnapshot) => {\n    if (snapshot.exists()) {\n      sensorData.temperature = snapshot.val();\n      sensorData.timestamp = Date.now();\n      callback(sensorData);\n    }\n  }, (error) => {\n    console.error('Error subscribing to temperature:', error);\n  });\n  \n  // Subscribe to humidity updates\n  const humidityUnsubscribe = onValue(humidityRef, (snapshot: DataSnapshot) => {\n    if (snapshot.exists()) {\n      sensorData.humidity = snapshot.val();\n      sensorData.timestamp = Date.now();\n      callback(sensorData);\n    }\n  }, (error) => {\n    console.error('Error subscribing to humidity:', error);\n  });\n  \n  // Subscribe to light updates\n  const lightUnsubscribe = onValue(lightRef, (snapshot: DataSnapshot) => {\n    if (snapshot.exists()) {\n      sensorData.light = snapshot.val();\n      sensorData.timestamp = Date.now();\n      callback(sensorData);\n    }\n  }, (error) => {\n    console.error('Error subscribing to light:', error);\n  });\n  \n  // Subscribe to soil moisture updates\n  const soilMoistureUnsubscribe = onValue(soilMoistureRef, (snapshot: DataSnapshot) => {\n    if (snapshot.exists()) {\n      sensorData.soilMoisture = snapshot.val();\n      sensorData.timestamp = Date.now();\n      callback(sensorData);\n    }\n  }, (error) => {\n    console.error('Error subscribing to soil moisture:', error);\n  });\n  \n  // Return unsubscribe function\n  return () => {\n    tempUnsubscribe();\n    humidityUnsubscribe();\n    lightUnsubscribe();\n    soilMoistureUnsubscribe();\n  };\n}\n\n// Generate sensor history data\nexport async function generateSensorHistory(): Promise<void> {\n  if (!database) {\n    console.error('Firebase database not initialized');\n    return;\n  }\n  \n  try {\n    console.log('Generating sample sensor history data...');\n    \n    const now = Date.now();\n    const historyData: SensorHistory = {};\n    \n    // Generate data for last 7 days, with a sample every hour\n    for (let i = 0; i < 7 * 24; i++) {\n      const timestamp = now - (i * 60 * 60 * 1000);\n      \n      // Generate random values with realistic patterns\n      const hourOfDay = new Date(timestamp).getHours();\n      const isDay = hourOfDay >= 6 && hourOfDay <= 18;\n      \n      const temperature = 18 + Math.random() * 10 + (isDay ? 3 : 0);\n      const humidity = 35 + Math.random() * 40 - (isDay ? 10 : 0);\n      const light = isDay ? 50 + Math.random() * 50 : Math.random() * 10;\n      const soilMoisture = 45 + Math.random() * 30 - (i % 24 === 0 ? 20 : 0); // Drop after \"watering\"\n      \n      historyData[timestamp] = {\n        temperature: parseFloat(temperature.toFixed(1)),\n        humidity: parseFloat(humidity.toFixed(1)),\n        light: parseFloat(light.toFixed(1)),\n        soilMoisture: parseFloat(soilMoisture.toFixed(1))\n      };\n    }\n    \n    // Save to database\n    console.log(`Saving ${Object.keys(historyData).length} history data points`);\n    await set(ref(database, 'sensorData/history'), historyData);\n    console.log('Sample sensor history data generated successfully');\n  } catch (error) {\n    console.error('Error generating sensor history:', error);\n  }\n}\n\n// Get sensor history data\nexport function getSensorHistory(days: number, callback: (data: SensorHistory) => void) {\n  if (!database) {\n    console.error('Firebase database not initialized when trying to get history data');\n    return () => {};\n  }\n\n  // Calculate time range\n  const endTime = Date.now();\n  const startTime = endTime - (days * 24 * 60 * 60 * 1000);\n  \n  // Set up real-time listener for sensor data in the timestamps folder\n  console.log(`Setting up subscription to timestamps data for the last ${days} days`);\n  const timestampsRef = ref(database, 'timestamps');\n  \n  const unsubscribe = onValue(timestampsRef, (snapshot: DataSnapshot) => {\n    if (snapshot.exists()) {\n      // Process timestamp data\n      const timestampsData = snapshot.val();\n      console.log('Found timestamp data, using for visualization');\n      \n      // Process the data according to the database structure\n      const processedData: SensorHistory = {};\n      \n      // If timestampsData is an object with timestamp keys\n      if (typeof timestampsData === 'object' && timestampsData !== null) {\n        const entries = Object.entries(timestampsData);\n        console.log(`Found ${entries.length} timestamp entries to process`);\n        \n        // Process each timestamp entry\n        for (const [key, value] of entries) {\n          // Try to parse the key as a timestamp\n          const timestamp = parseInt(key);\n          \n          // Skip invalid timestamps and entries outside the time range\n          if (isNaN(timestamp) || timestamp < startTime || timestamp > endTime) {\n            continue;\n          }\n          \n          // Extract data from entry\n          const entry = value as any;\n          \n          // Only add valid entries with at least temperature or humidity\n          if (typeof entry.temperature === 'number' || typeof entry.humidity === 'number') {\n            processedData[timestamp] = {\n              temperature: typeof entry.temperature === 'number' ? entry.temperature : 0,\n              humidity: typeof entry.humidity === 'number' ? entry.humidity : 0,\n            };\n            \n            // Add light if available\n            if (typeof entry.light === 'number') {\n              processedData[timestamp].light = entry.light;\n            }\n            \n            // Add soil moisture if available\n            if (typeof entry.soilMoisture === 'number') {\n              processedData[timestamp].soilMoisture = entry.soilMoisture;\n            }\n          }\n        }\n        \n        console.log(`Processed timestamps data with ${Object.keys(processedData).length} valid entries`);\n        callback(processedData);\n      } else {\n        console.warn('Timestamps data has unexpected format');\n        callback({});\n      }\n    } else {\n      // Fallback to checking history data\n      console.log('No timestamps data found, falling back to history data');\n      const historyRef = ref(database, 'sensorData/history');\n      \n      // Check if history data exists\n      get(historyRef).then(historySnapshot => {\n        if (!historySnapshot.exists() || Object.keys(historySnapshot.val()).length === 0) {\n          console.log('No history data found, generating sample data...');\n          generateSensorHistory()\n            .then(() => console.log('History data generation completed'))\n            .catch(err => console.error('Failed to generate history data:', err));\n        }\n        \n        // Get history data\n        onValue(historyRef, (historySnap: DataSnapshot) => {\n          if (historySnap.exists()) {\n            const historyData = historySnap.val();\n            console.log('Raw history data:', typeof historyData);\n            \n            // Process the data according to the database structure\n            const processedData: SensorHistory = {};\n            \n            // If historyData is an object with timestamp keys\n            if (typeof historyData === 'object' && historyData !== null) {\n              const entries = Object.entries(historyData);\n              console.log(`Found ${entries.length} history entries to process`);\n              \n              for (const [key, value] of entries) {\n                // Try to parse the key as a timestamp\n                const timestamp = parseInt(key);\n                \n                // Skip invalid timestamps and entries outside the time range\n                if (isNaN(timestamp) || timestamp < startTime || timestamp > endTime) {\n                  continue;\n                }\n                \n                // Extract data based on structure\n                const entry = value as any;\n                \n                // Only add valid entries with at least temperature or humidity\n                if (typeof entry.temperature === 'number' || typeof entry.humidity === 'number') {\n                  processedData[timestamp] = {\n                    temperature: typeof entry.temperature === 'number' ? entry.temperature : 0,\n                    humidity: typeof entry.humidity === 'number' ? entry.humidity : 0,\n                  };\n                  \n                  // Add light if available\n                  if (typeof entry.light === 'number') {\n                    processedData[timestamp].light = entry.light;\n                  }\n                  \n                  // Add soil moisture if available\n                  if (typeof entry.soilMoisture === 'number') {\n                    processedData[timestamp].soilMoisture = entry.soilMoisture;\n                  }\n                }\n              }\n              \n              console.log(`Processed history data with ${Object.keys(processedData).length} valid entries`);\n              callback(processedData);\n            } else {\n              console.log('History data has unexpected format');\n              callback({});\n            }\n          } else {\n            console.log('No history data available');\n            callback({});\n          }\n        });\n      }).catch(error => {\n        console.error('Error checking history data:', error);\n        callback({});\n      });\n    }\n  }, (error) => {\n    console.error('Error getting sensor history:', error);\n    callback({});\n  });\n  \n  return unsubscribe;\n}\n\n// Plant controls interface\nexport interface PlantControls {\n  uvLight: boolean;\n  wateringActive: boolean;\n}\n\n// Subscribe to plant controls\nexport function subscribePlantControls(callback: (controls: PlantControls) => void) {\n  if (!database) {\n    console.error('Firebase database not initialized when trying to subscribe to plant controls');\n    return () => {};\n  }\n\n  console.log('Setting up subscription to plant controls at path: plantControls');\n  const controlsRef = ref(database, 'plantControls');\n  \n  const unsubscribe = onValue(controlsRef, (snapshot: DataSnapshot) => {\n    console.log('Got plant controls update, snapshot exists:', snapshot.exists());\n    \n    const controls = snapshot.val() as PlantControls | null;\n    if (controls) {\n      console.log('Received plant controls:', controls);\n      callback(controls);\n    } else {\n      console.log('No plant controls available in snapshot');\n      \n      // Initialize controls if they don't exist\n      const initialControls: PlantControls = {\n        uvLight: false,\n        wateringActive: false\n      };\n      \n      set(controlsRef, initialControls)\n        .then(() => {\n          console.log('Successfully initialized plant controls');\n          callback(initialControls);\n        })\n        .catch((err: Error) => console.error('Error initializing controls:', err));\n    }\n  }, (error) => {\n    console.error('Error subscribing to plant controls:', error);\n  });\n\n  return unsubscribe;\n}\n\n// Set UV light state\nexport function setUvLight(state: boolean): Promise<void> {\n  if (!database) {\n    console.error('Firebase database not initialized when trying to set UV light state');\n    return Promise.reject(new Error('Database not initialized'));\n  }\n\n  console.log(`Setting UV light state to: ${state}`);\n  const uvLightRef = ref(database, 'plantControls/uvLight');\n  return set(uvLightRef, state);\n}\n\n// Set watering active state\nexport function setWateringActive(state: boolean): Promise<void> {\n  if (!database) {\n    console.error('Firebase database not initialized when trying to set watering state');\n    return Promise.reject(new Error('Database not initialized'));\n  }\n\n  console.log(`Setting watering state to: ${state}`);\n  const wateringRef = ref(database, 'plantControls/wateringActive');\n  return set(wateringRef, state);\n}\n\n// Upload plant photo to Firebase Storage and get download URL\nexport async function uploadPlantPhoto(\n  userId: string, \n  plantId: string, \n  file: File\n): Promise<string> {\n  if (!storage) {\n    throw new Error('Firebase Storage not initialized');\n  }\n\n  try {\n    // Create a reference to the file in Firebase Storage\n    const fileExtension = file.name.split('.').pop();\n    const timestamp = Date.now();\n    const path = `users/${userId}/plants/${plantId}/${timestamp}.${fileExtension}`;\n    const fileRef = storageRef(storage, path);\n    \n    console.log(`Uploading plant photo to path: ${path}`);\n    \n    // Upload the file to Firebase Storage\n    const snapshot = await uploadBytes(fileRef, file);\n    console.log('Photo uploaded successfully:', snapshot.metadata.fullPath);\n    \n    // Get the download URL\n    const downloadURL = await getDownloadURL(fileRef);\n    console.log('Photo download URL:', downloadURL);\n    \n    return downloadURL;\n  } catch (error) {\n    console.error('Error uploading plant photo:', error);\n    throw error;\n  }\n}\n\n// Download an image from a URL and upload it to Firebase Storage\nexport async function downloadAndUploadImage(\n  imageUrl: string,\n  storagePath: string\n): Promise<string> {\n  if (!storage) {\n    throw new Error('Firebase Storage not initialized');\n  }\n\n  try {\n    console.log(`Downloading image from URL: ${imageUrl}`);\n    \n    // Fetch the image\n    const response = await fetch(imageUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch image: ${response.statusText}`);\n    }\n    \n    // Convert to blob\n    const blob = await response.blob();\n    \n    // Create a reference to store the file in Firebase\n    const fileRef = storageRef(storage, storagePath);\n    \n    // Upload to Firebase Storage\n    const snapshot = await uploadBytes(fileRef, blob);\n    console.log('Image uploaded successfully:', snapshot.metadata.fullPath);\n    \n    // Get the download URL\n    const downloadURL = await getDownloadURL(fileRef);\n    console.log('Image download URL:', downloadURL);\n    \n    return downloadURL;\n  } catch (error) {\n    console.error('Error downloading and uploading image:', error);\n    throw error;\n  }\n}\n\n// Utility function to update plant data in the database\nexport async function updatePlantData(\n  userId: string,\n  plantId: string,\n  data: Record<string, any>\n): Promise<void> {\n  if (!database) {\n    throw new Error('Firebase database not initialized');\n  }\n\n  try {\n    const plantRef = ref(database, `users/${userId}/plants/${plantId}`);\n    \n    // Update only the specified fields\n    for (const [key, value] of Object.entries(data)) {\n      await set(ref(database, `users/${userId}/plants/${plantId}/${key}`), value);\n    }\n    \n    console.log(`Successfully updated plant data for plant ${plantId}`);\n  } catch (error) {\n    console.error('Error updating plant data:', error);\n    throw error;\n  }\n}\n\n// Utility function to download plant images from the database and store them in Firebase\nexport async function downloadPlantTypesImages(): Promise<void> {\n  try {\n    // Import the plant database dynamically to avoid circular dependencies\n    console.log('Starting plant types image caching process');\n    \n    // This would normally iterate through plant types and cache their images\n    // But since we're using a simpler implementation, we'll just log that it was called\n    console.log('Completed plant types image caching');\n    return Promise.resolve();\n  } catch (error) {\n    console.error('Error downloading plant types images:', error);\n    return Promise.reject(error);\n  }\n}\n\n// Initialize data when the module is loaded\ngenerateSampleData();","size_bytes":22204},"client/src/lib/gemini.ts":{"content":"// Initial agricultural context for the chatbot\nexport const INITIAL_PROMPT = `\nYou are a helpful plant care assistant with expertise in horticulture, gardening, and plant science. Your purpose is to assist users with:\n\n1. Plant identification and selection\n2. Optimal growing conditions and care instructions\n3. Troubleshooting plant health issues\n4. Gardening techniques and best practices\n5. Seasonal plant care guidance\n\nYou have access to a comprehensive plant database containing information about thousands of plant species, including:\n- Scientific and common names\n- Growth requirements (light, water, temperature, humidity)\n- Hardiness zones\n- Soil preferences\n- Propagation methods\n- Common pests and diseases\n- Special care instructions\n\nWhen providing plant care advice:\n- Be specific and give actionable recommendations\n- Consider the user's indicated expertise level (beginner, intermediate, advanced, expert)\n- Adapt your advice to seasonal conditions when relevant\n- For plant identification requests, ask clarifying questions if information is insufficient\n- When suggesting care regimens, explain the reasoning behind your recommendations\n\nFor Smart Plant Monitor users:\n- Recommend optimal temperature, humidity, and light settings for their plants\n- Suggest watering schedules based on plant species and environmental conditions\n- Explain how to interpret sensor readings from their monitoring system\n- If they want to add a new plant to their system, provide the recommended configuration settings\n\nAlways start by considering the specific needs of different plants. Keep responses concise, friendly, and practical.\n`;\n\n// Plant database types for enhanced functionality\nexport interface PlantDatabaseEntry {\n  id: string;\n  commonName: string;\n  scientificName: string;\n  family?: string;\n  careLevel: 'easy' | 'moderate' | 'difficult';\n  light: string;\n  water: string;\n  temperature: {\n    min: number;\n    max: number;\n    unit: 'C' | 'F';\n  };\n  humidity: {\n    min: number;\n    max: number;\n  };\n  soil: string;\n  propagation: string[];\n  pests?: string[];\n  diseases?: string[];\n  notes?: string;\n}\n\n// This function would fetch plant data from external API\n// Currently stubbed to prevent unauthorized API access until proper APIs are selected\nexport async function searchPlantDatabase(query: string): Promise<PlantDatabaseEntry[]> {\n  try {\n    // This would be replaced with an actual API call\n    console.log(`Searching for plant data: ${query}`);\n    \n    // In a real implementation, we would connect to:\n    // - Trefle.io API (https://trefle.io/)\n    // - Perenual API (https://perenual.com/docs/api)\n    // - Open Farm API (https://docs.openfarm.cc/en/master/)\n    \n    return [];\n  } catch (error) {\n    console.error('Error searching plant database:', error);\n    return [];\n  }\n}\n\n// This function would extract plant care settings for Smart Plant Monitor\nexport function extractPlantCareSettings(plantData: PlantDatabaseEntry): {\n  tempMin: number;\n  tempMax: number;\n  humidityMin: number;\n  humidityMax: number;\n  lightLevel: string;\n  wateringSchedule: string;\n} {\n  return {\n    tempMin: plantData.temperature.min,\n    tempMax: plantData.temperature.max,\n    humidityMin: plantData.humidity.min,\n    humidityMax: plantData.humidity.max,\n    lightLevel: plantData.light,\n    wateringSchedule: plantData.water\n  };\n}\n\nexport interface ChatMessage {\n  role: 'user' | 'model';\n  content: string;\n}\n\ninterface ChatHistory {\n  messages: ChatMessage[];\n}\n\n// Initialize a chat session\nexport async function startChatSession(): Promise<ChatHistory> {\n  // Create a new chat history with the initial system message\n  const chatHistory: ChatHistory = {\n    messages: [\n      {\n        role: 'model',\n        content: \"I'm ready to help with your plant care and gardening questions. What would you like to know about today?\"\n      }\n    ]\n  };\n  \n  return chatHistory;\n}\n\n// Send a message to Gemini API\nexport async function sendMessage(chatHistory: ChatHistory, message: string): Promise<string> {\n  try {\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Gemini API key is missing');\n    }\n    \n    // Construct the API payload with context and the new message\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    \n    // Create a payload with the initial prompt and chat history\n    let prompt = INITIAL_PROMPT + \"\\n\\nHere's the conversation history:\\n\";\n    \n    // Add history but limit to last 10 messages to avoid token limits\n    const recentMessages = chatHistory.messages.slice(-10);\n    recentMessages.forEach(msg => {\n      prompt += `${msg.role === 'user' ? 'Human' : 'Assistant'}: ${msg.content}\\n`;\n    });\n    \n    prompt += `Human: ${message}\\nAssistant:`;\n    \n    const payload = {\n      contents: [{\n        parts: [{ text: prompt }]\n      }]\n    };\n    \n    // Make the API request\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API request failed with status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Update chat history with new message\n    chatHistory.messages.push({\n      role: 'user',\n      content: message\n    });\n    \n    // Extract the response text\n    const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text || \"I couldn't generate a response. Please try again.\";\n    \n    // Update chat history with model response\n    chatHistory.messages.push({\n      role: 'model',\n      content: responseText\n    });\n    \n    return responseText;\n  } catch (error) {\n    console.error('Error sending message to Gemini API:', error);\n    return \"Sorry, I had trouble connecting to the plant intelligence. Please check your connection and try again.\";\n  }\n}\n\n// Analyze a plant photo using Gemini's vision capabilities\nexport interface PlantAnalysisResult {\n  species: string;\n  commonName: string;\n  careInstructions: string;\n  healthAssessment: string;\n  confidence: 'high' | 'medium' | 'low';\n}\n\nexport async function analyzePlantPhoto(imageUrl: string): Promise<PlantAnalysisResult> {\n  try {\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Gemini API key is missing');\n    }\n    \n    // Construct the API payload with the image\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    \n    // Create the prompt for plant identification and analysis\n    const prompt = `\n    Please analyze this plant image and provide:\n    1. Most likely species (scientific name)\n    2. Common name\n    3. Brief care instructions (light, water, temperature, humidity)\n    4. An assessment of the plant's health based on visual cues\n    5. Your confidence level in this identification (high, medium, or low)\n    \n    Format your answer as a JSON object with these fields:\n    {\n      \"species\": \"Scientific name\",\n      \"commonName\": \"Common name\",\n      \"careInstructions\": \"Brief care instructions\",\n      \"healthAssessment\": \"Health assessment\",\n      \"confidence\": \"high/medium/low\"\n    }\n    `;\n    \n    // Prepare the payload with both text and image\n    const payload = {\n      contents: [{\n        parts: [\n          { text: prompt },\n          { inlineData: { mimeType: \"image/jpeg\", data: imageUrl.split(',')[1] } }\n        ]\n      }]\n    };\n    \n    // Make the API request\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`API request failed with status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Extract the response text\n    const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text;\n    \n    if (!responseText) {\n      throw new Error('No response received from Gemini API');\n    }\n    \n    // Extract JSON from the response\n    // Find JSON object in the response text using regex\n    const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n    if (!jsonMatch) {\n      throw new Error('Could not extract JSON response from Gemini API');\n    }\n    \n    try {\n      // Parse the JSON response\n      const jsonResponse = JSON.parse(jsonMatch[0]);\n      \n      // Ensure all expected fields are present\n      const result: PlantAnalysisResult = {\n        species: jsonResponse.species || 'Unknown species',\n        commonName: jsonResponse.commonName || 'Unknown',\n        careInstructions: jsonResponse.careInstructions || 'No care instructions available',\n        healthAssessment: jsonResponse.healthAssessment || 'Health assessment not available',\n        confidence: (jsonResponse.confidence?.toLowerCase() as 'high' | 'medium' | 'low') || 'low'\n      };\n      \n      return result;\n    } catch (jsonError) {\n      console.error('Error parsing JSON from Gemini response:', jsonError);\n      throw new Error('Invalid response format from plant analysis');\n    }\n  } catch (error) {\n    console.error('Error analyzing plant photo:', error);\n    // Return a default response when the analysis fails\n    return {\n      species: 'Analysis failed',\n      commonName: 'Unable to identify',\n      careInstructions: 'Please try uploading a clearer photo of the plant.',\n      healthAssessment: 'Assessment not available due to analysis failure.',\n      confidence: 'low'\n    };\n  }\n}\n\n// Function to fetch a plant image from online sources with improved reliability\nexport async function fetchPlantImage(plantName: string): Promise<string | null> {\n  if (!plantName) {\n    console.error('No plant name provided for image search');\n    return null;\n  }\n  \n  console.log(`Searching for image of plant: ${plantName}`);\n  \n  try {\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    if (!apiKey) {\n      console.warn('Gemini API key is missing, using fallback image sources');\n      return getPlantImageFallback(plantName);\n    }\n    \n    // More specific prompt to get high-quality, reliable images\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    \n    const prompt = `\n    You are a specialized plant image search assistant. I need a direct image URL for a high-quality, clear image of \"${plantName}\".\n\n    Image requirements:\n    1. Must be from Wikimedia Commons, Pixabay, Unsplash, or other free-to-use repositories\n    2. Must show the plant clearly with good lighting and focus\n    3. Should show the whole plant, not just a flower or leaf close-up\n    4. Must be a direct image URL ending with .jpg, .jpeg, .png, or .webp\n    5. Must be available under a free license or public domain\n    6. Prefer images with neutral backgrounds when possible\n\n    Respond ONLY with the direct image URL. No text before or after.\n    `;\n    \n    const payload = {\n      contents: [{\n        parts: [{ text: prompt }]\n      }],\n      generationConfig: {\n        maxOutputTokens: 100, // Limit response size since we only need a URL\n        temperature: 0.1 // Lower temperature for more consistent results\n      }\n    };\n    \n    // Make the API request\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      console.warn(`Gemini API request failed with status: ${response.status}`);\n      return getPlantImageFallback(plantName);\n    }\n    \n    const data = await response.json();\n    \n    // Extract the response text\n    const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text.trim();\n    \n    if (!responseText) {\n      console.warn('No response received from Gemini API');\n      return getPlantImageFallback(plantName);\n    }\n    \n    // Check if response is a valid URL to an image\n    if (/^https?:\\/\\/.*\\.(jpg|jpeg|png|webp|gif)(\\?.*)?$/i.test(responseText)) {\n      console.log(`Found image URL for ${plantName}: ${responseText}`);\n      return responseText;\n    } else {\n      // Try to extract a URL from the response\n      const urlMatch = responseText.match(/(https?:\\/\\/[^\\s\"']+\\.(jpg|jpeg|png|webp|gif)(\\?[^\\s\"']*)?)/i);\n      if (urlMatch && urlMatch[0]) {\n        console.log(`Extracted image URL for ${plantName}: ${urlMatch[0]}`);\n        return urlMatch[0];\n      } else {\n        console.warn('Could not extract valid image URL from Gemini response');\n        return getPlantImageFallback(plantName);\n      }\n    }\n  } catch (error) {\n    console.error('Error fetching plant image with Gemini:', error);\n    return getPlantImageFallback(plantName);\n  }\n}\n\n// Fallback function for when Gemini API fails or isn't available\nfunction getPlantImageFallback(plantName: string): string | null {\n  console.log(`Using fallback image search for ${plantName}`);\n  \n  // Define reliable plant image mappings from Wikimedia Commons\n  const plantImageMap: Record<string, string> = {\n    'sunflower': 'https://upload.wikimedia.org/wikipedia/commons/a/a9/A_sunflower.jpg',\n    'rose': 'https://upload.wikimedia.org/wikipedia/commons/5/51/Small_Red_Rose.JPG',\n    'aloe vera': 'https://upload.wikimedia.org/wikipedia/commons/4/4b/Aloe_vera_flower_inset.png',\n    'snake plant': 'https://upload.wikimedia.org/wikipedia/commons/7/73/Snake_Plant_%28Sansevieria_trifasciata_%27Laurentii%27%29.jpg',\n    'pothos': 'https://upload.wikimedia.org/wikipedia/commons/e/ec/Epipremnum_aureum_31082012.jpg',\n    'monstera': 'https://upload.wikimedia.org/wikipedia/commons/0/04/Monstera_deliciosa_at_l%27Auberge_Saint-Gabriel.jpg',\n    'peace lily': 'https://upload.wikimedia.org/wikipedia/commons/b/bd/Spathiphyllum_cochlearispathum_RTBG.jpg',\n    'spider plant': 'https://upload.wikimedia.org/wikipedia/commons/8/8f/Chlorophytum_comosum_17-08-2009_16-55-49.JPG',\n    'fiddle leaf fig': 'https://upload.wikimedia.org/wikipedia/commons/6/6a/Ficus_lyrata_1.jpg',\n    'tomato': 'https://upload.wikimedia.org/wikipedia/commons/8/89/Tomato_je.jpg',\n    'strawberry': 'https://upload.wikimedia.org/wikipedia/commons/6/64/Garden_strawberry_%28Fragaria_%C3%97_ananassa%29_single.jpg',\n    'basil': 'https://upload.wikimedia.org/wikipedia/commons/9/90/Basil-Basilico-Ocimum_basilicum-albahaca.jpg',\n    'succulent': 'https://upload.wikimedia.org/wikipedia/commons/7/77/Succulent_garden.jpg',\n    'cactus': 'https://upload.wikimedia.org/wikipedia/commons/6/6c/Ferocactus_peninsulae_9.jpg',\n    'echeveria': 'https://upload.wikimedia.org/wikipedia/commons/a/a4/Echeveria_hybrid.JPG'\n  };\n  \n  // Search for exact match\n  if (plantImageMap[plantName.toLowerCase()]) {\n    return plantImageMap[plantName.toLowerCase()];\n  }\n  \n  // Search for partial match\n  const normalizedName = plantName.toLowerCase();\n  for (const [key, url] of Object.entries(plantImageMap)) {\n    if (normalizedName.includes(key) || key.includes(normalizedName)) {\n      return url;\n    }\n  }\n  \n  // If no match, return a generic plant image\n  return 'https://upload.wikimedia.org/wikipedia/commons/3/3f/Houseplant_overview.jpg';\n}","size_bytes":15299},"client/src/lib/growthEvents.ts":{"content":"import { getDatabase, ref, set, push, get, query, orderByChild, equalTo } from 'firebase/database';\nimport { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { GrowthEvent, GrowthEventType } from '@/components/PlantGrowthTimeline';\nimport { GrowthEventFormValues } from '@/components/AddGrowthEventForm';\n\n/**\n * Create a new growth event for a plant\n * @param userId The user ID\n * @param plantId The plant ID\n * @param eventType The type of event\n * @param eventData The event data\n * @param imageFile Optional image file to upload\n * @returns The created growth event\n */\nexport async function createGrowthEvent(\n  userId: string,\n  plantId: string,\n  eventType: GrowthEventType,\n  eventData: GrowthEventFormValues,\n  imageFile?: File\n): Promise<GrowthEvent> {\n  try {\n    const db = getDatabase();\n    const storage = getStorage();\n    \n    // Create a new event reference with a unique ID\n    const eventsRef = ref(db, `users/${userId}/plants/${plantId}/growthEvents`);\n    const newEventRef = push(eventsRef);\n    const eventId = newEventRef.key as string;\n    \n    // Initialize the event object\n    let eventObject: GrowthEvent = {\n      id: eventId,\n      plantId,\n      timestamp: Date.now(),\n      type: eventType,\n      ...(eventData.notes ? { notes: eventData.notes } : {}),\n      ...(eventData.height !== undefined ? { height: eventData.height } : {}),\n      ...(eventData.width !== undefined ? { width: eventData.width } : {}),\n      ...(eventData.leafCount !== undefined ? { leafCount: eventData.leafCount } : {}),\n      ...(eventData.healthRating !== undefined ? { \n        healthRating: eventData.healthRating as 1 | 2 | 3 | 4 | 5 \n      } : {})\n    };\n    \n    // If there's an image file, upload it to Firebase Storage\n    if (imageFile) {\n      const imageStoragePath = `users/${userId}/plants/${plantId}/growth-events/${eventId}`;\n      const imageRef = storageRef(storage, imageStoragePath);\n      \n      // Upload the image file\n      await uploadBytes(imageRef, imageFile);\n      \n      // Get the download URL\n      const downloadUrl = await getDownloadURL(imageRef);\n      \n      // Add the image URL to the event object\n      eventObject.imageUrl = downloadUrl;\n    }\n    \n    // Write the event data to the database\n    await set(newEventRef, eventObject);\n    \n    return eventObject;\n  } catch (error) {\n    console.error('Error creating growth event:', error);\n    throw new Error('Failed to create growth event');\n  }\n}\n\n/**\n * Get all growth events for a plant\n * @param userId The user ID\n * @param plantId The plant ID\n * @returns An array of growth events\n */\nexport async function getPlantGrowthEvents(userId: string, plantId: string): Promise<GrowthEvent[]> {\n  try {\n    const db = getDatabase();\n    const eventsRef = ref(db, `users/${userId}/plants/${plantId}/growthEvents`);\n    \n    // Get all events for this plant\n    const snapshot = await get(eventsRef);\n    \n    if (!snapshot.exists()) {\n      return [];\n    }\n    \n    // Convert the snapshot to an array of events\n    const events: GrowthEvent[] = [];\n    snapshot.forEach((childSnapshot) => {\n      const eventData = childSnapshot.val() as GrowthEvent;\n      events.push(eventData);\n    });\n    \n    // Sort events by timestamp (newest first)\n    return events.sort((a, b) => b.timestamp - a.timestamp);\n  } catch (error) {\n    console.error('Error getting growth events:', error);\n    return [];\n  }\n}\n\n/**\n * Delete a growth event\n * @param userId The user ID\n * @param plantId The plant ID\n * @param eventId The event ID\n * @returns A boolean indicating success\n */\nexport async function deleteGrowthEvent(userId: string, plantId: string, eventId: string): Promise<boolean> {\n  try {\n    const db = getDatabase();\n    const eventRef = ref(db, `users/${userId}/plants/${plantId}/growthEvents/${eventId}`);\n    \n    // Set the value to null to delete it\n    await set(eventRef, null);\n    \n    return true;\n  } catch (error) {\n    console.error('Error deleting growth event:', error);\n    return false;\n  }\n}\n\n/**\n * Update a growth event\n * @param userId The user ID\n * @param plantId The plant ID\n * @param eventId The event ID\n * @param eventData The updated event data\n * @returns A boolean indicating success\n */\nexport async function updateGrowthEvent(\n  userId: string,\n  plantId: string,\n  eventId: string,\n  eventData: Partial<GrowthEvent>\n): Promise<boolean> {\n  try {\n    const db = getDatabase();\n    const eventRef = ref(db, `users/${userId}/plants/${plantId}/growthEvents/${eventId}`);\n    \n    // Get the current event data\n    const snapshot = await get(eventRef);\n    if (!snapshot.exists()) {\n      return false;\n    }\n    \n    const currentEvent = snapshot.val() as GrowthEvent;\n    \n    // Update with new data\n    const updatedEvent = {\n      ...currentEvent,\n      ...eventData\n    };\n    \n    // Write the updated event to the database\n    await set(eventRef, updatedEvent);\n    \n    return true;\n  } catch (error) {\n    console.error('Error updating growth event:', error);\n    return false;\n  }\n}\n\n/**\n * Get the most recent measurements for a plant\n * @param userId The user ID\n * @param plantId The plant ID\n * @returns The most recent measurement data\n */\nexport async function getMostRecentMeasurements(userId: string, plantId: string): Promise<{\n  height?: number;\n  width?: number;\n  leafCount?: number;\n  timestamp: number;\n} | null> {\n  try {\n    const db = getDatabase();\n    const eventsRef = ref(db, `users/${userId}/plants/${plantId}/growthEvents`);\n    \n    // Query for measurement events\n    const snapshot = await get(eventsRef);\n    \n    if (!snapshot.exists()) {\n      return null;\n    }\n    \n    // Find the most recent measurement event\n    const events: GrowthEvent[] = [];\n    snapshot.forEach((childSnapshot) => {\n      const eventData = childSnapshot.val() as GrowthEvent;\n      if (eventData.type === 'measurement') {\n        events.push(eventData);\n      }\n    });\n    \n    // Sort by timestamp (newest first)\n    events.sort((a, b) => b.timestamp - a.timestamp);\n    \n    // Return the most recent measurement or null if none exists\n    if (events.length > 0) {\n      const mostRecent = events[0];\n      return {\n        height: mostRecent.height,\n        width: mostRecent.width,\n        leafCount: mostRecent.leafCount,\n        timestamp: mostRecent.timestamp\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Error getting most recent measurements:', error);\n    return null;\n  }\n}\n\n/**\n * Get the growth history for a plant\n * @param userId The user ID\n * @param plantId The plant ID\n * @returns An array of measurement events over time\n */\nexport async function getGrowthHistory(userId: string, plantId: string): Promise<{\n  heights: Array<{ timestamp: number, value: number }>;\n  widths: Array<{ timestamp: number, value: number }>;\n  leafCounts: Array<{ timestamp: number, value: number }>;\n}> {\n  try {\n    const db = getDatabase();\n    const eventsRef = ref(db, `users/${userId}/plants/${plantId}/growthEvents`);\n    \n    // Get all measurement events\n    const snapshot = await get(eventsRef);\n    \n    const heights: Array<{ timestamp: number, value: number }> = [];\n    const widths: Array<{ timestamp: number, value: number }> = [];\n    const leafCounts: Array<{ timestamp: number, value: number }> = [];\n    \n    if (snapshot.exists()) {\n      snapshot.forEach((childSnapshot) => {\n        const eventData = childSnapshot.val() as GrowthEvent;\n        if (eventData.type === 'measurement') {\n          if (eventData.height !== undefined) {\n            heights.push({ timestamp: eventData.timestamp, value: eventData.height });\n          }\n          if (eventData.width !== undefined) {\n            widths.push({ timestamp: eventData.timestamp, value: eventData.width });\n          }\n          if (eventData.leafCount !== undefined) {\n            leafCounts.push({ timestamp: eventData.timestamp, value: eventData.leafCount });\n          }\n        }\n      });\n    }\n    \n    // Sort by timestamp (oldest first for charting)\n    heights.sort((a, b) => a.timestamp - b.timestamp);\n    widths.sort((a, b) => a.timestamp - b.timestamp);\n    leafCounts.sort((a, b) => a.timestamp - b.timestamp);\n    \n    return { heights, widths, leafCounts };\n  } catch (error) {\n    console.error('Error getting growth history:', error);\n    return { heights: [], widths: [], leafCounts: [] };\n  }\n}","size_bytes":8419},"client/src/lib/plantDatabase.ts":{"content":"// Plant database with common house plants, vegetables, fruits, herbs, and outdoor plants\n\nexport interface PlantTypeInfo {\n  id: string;\n  name: string;\n  scientificName: string;\n  category: 'houseplant' | 'vegetable' | 'fruit' | 'herb' | 'flower' | 'tree' | 'succulent';\n  careDifficulty: 'easy' | 'moderate' | 'difficult';\n  light: 'low' | 'medium' | 'high';\n  water: 'low' | 'medium' | 'high';\n  tempMin: number;\n  tempMax: number;\n  humidityMin: number;\n  humidityMax: number;\n  soilMoistureMin: number; // in percentage\n  soilMoistureMax: number; // in percentage\n  description: string;\n  imageUrl?: string;\n}\n\nexport const plantCategories = [\n  { id: 'houseplant', name: 'House Plants' },\n  { id: 'vegetable', name: 'Vegetables' },\n  { id: 'fruit', name: 'Fruits' },\n  { id: 'herb', name: 'Herbs' },\n  { id: 'flower', name: 'Flowers' },\n  { id: 'tree', name: 'Trees' },\n  { id: 'succulent', name: 'Succulents & Cacti' }\n];\n\nexport const plantTypes: PlantTypeInfo[] = [\n  // House Plants\n  {\n    id: 'pothos',\n    name: 'Pothos',\n    scientificName: 'Epipremnum aureum',\n    category: 'houseplant',\n    careDifficulty: 'easy',\n    light: 'low',\n    water: 'low',\n    tempMin: 15,\n    tempMax: 24,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 20,\n    soilMoistureMax: 40,\n    description: 'A popular trailing houseplant with heart-shaped leaves, known for being very easy to care for and propagate.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/e/ec/Epipremnum_aureum_31082012.jpg',\n  },\n  {\n    id: 'snake-plant',\n    name: 'Snake Plant',\n    scientificName: 'Dracaena trifasciata',\n    category: 'houseplant',\n    careDifficulty: 'easy',\n    light: 'low',\n    water: 'low',\n    tempMin: 18,\n    tempMax: 27,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 15,\n    soilMoistureMax: 30,\n    description: 'An extremely hardy plant with tall, rigid, sword-like leaves. Perfect for beginners and purifies air efficiently.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/f/fb/Snake_Plant_%28Sansevieria_trifasciata_%27Laurentii%27%29.jpg',\n  },\n  {\n    id: 'peace-lily',\n    name: 'Peace Lily',\n    scientificName: 'Spathiphyllum',\n    category: 'houseplant',\n    careDifficulty: 'easy',\n    light: 'low',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 50,\n    humidityMax: 70,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Elegant plant with glossy leaves and white flowers (actually modified leaves). Good air purifier and humidity indicator.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/b/bd/Spathiphyllum_cochlearispathum_RTBG.jpg',\n  },\n  {\n    id: 'spider-plant',\n    name: 'Spider Plant',\n    scientificName: 'Chlorophytum comosum',\n    category: 'houseplant',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 13,\n    tempMax: 27,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Fast-growing plant with arching leaves and baby plantlets that dangle from stems like spiders on a web.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/8/8f/Chlorophytum_comosum_17-08-2009_16-55-49.JPG',\n  },\n  {\n    id: 'monstera',\n    name: 'Swiss Cheese Plant',\n    scientificName: 'Monstera deliciosa',\n    category: 'houseplant',\n    careDifficulty: 'moderate',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 50,\n    humidityMax: 70,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Tropical plant famous for its large, glossy leaves with distinctive splits and holes.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/0/04/Monstera_deliciosa_R1.jpg',\n  },\n  {\n    id: 'fiddle-leaf-fig',\n    name: 'Fiddle Leaf Fig',\n    scientificName: 'Ficus lyrata',\n    category: 'houseplant',\n    careDifficulty: 'difficult',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Popular houseplant with large, violin-shaped leaves. Beautiful but can be temperamental.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/5/58/Ficus_lyrata.jpg',\n  },\n  \n  // Vegetables\n  {\n    id: 'tomato',\n    name: 'Tomato',\n    scientificName: 'Solanum lycopersicum',\n    category: 'vegetable',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 40,\n    humidityMax: 70,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Popular garden vegetable with juicy red fruits. Comes in many varieties from cherry to beefsteak.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/8/89/Tomato_je.jpg',\n  },\n  {\n    id: 'lettuce',\n    name: 'Lettuce',\n    scientificName: 'Lactuca sativa',\n    category: 'vegetable',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 10,\n    tempMax: 24,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Quick-growing leafy green that is perfect for beginners. Harvest outer leaves for continuous growth.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/13/Iceberg_lettuce_8253.jpg',\n  },\n  {\n    id: 'bell-pepper',\n    name: 'Bell Pepper',\n    scientificName: 'Capsicum annuum',\n    category: 'vegetable',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 32,\n    humidityMin: 40,\n    humidityMax: 70,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Sweet, crunchy peppers that come in various colors as they ripen, from green to red, yellow, or orange.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/c/c4/Bell_pepper_overview.jpg',\n  },\n  {\n    id: 'cucumber',\n    name: 'Cucumber',\n    scientificName: 'Cucumis sativus',\n    category: 'vegetable',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'high',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 50,\n    humidityMax: 70,\n    soilMoistureMin: 50,\n    soilMoistureMax: 70,\n    description: 'Refreshing summer vegetable with sprawling vines that can be grown vertically to save space.',\n  },\n  {\n    id: 'zucchini',\n    name: 'Zucchini',\n    scientificName: 'Cucurbita pepo',\n    category: 'vegetable',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Productive summer squash that provides abundant harvests. Pick when small for best flavor.',\n  },\n  \n  // Fruits\n  {\n    id: 'strawberry',\n    name: 'Strawberry',\n    scientificName: 'Fragaria × ananassa',\n    category: 'fruit',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'medium',\n    tempMin: 15,\n    tempMax: 26,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Sweet, red berries that grow on compact plants. Perfect for containers or hanging baskets.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/6/64/Garden_strawberry_%28Fragaria_%C3%97_ananassa%29_single.jpg',\n  },\n  {\n    id: 'lemon',\n    name: 'Lemon',\n    scientificName: 'Citrus limon',\n    category: 'fruit',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'medium',\n    tempMin: 13,\n    tempMax: 30,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Fragrant citrus tree with bright yellow fruits. Dwarf varieties work well in containers.',\n  },\n  {\n    id: 'blueberry',\n    name: 'Blueberry',\n    scientificName: 'Vaccinium corymbosum',\n    category: 'fruit',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'medium',\n    tempMin: 10,\n    tempMax: 26,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Sweet blue berries on bushes that offer ornamental value with fall foliage. Needs acidic soil.',\n  },\n  {\n    id: 'avocado',\n    name: 'Avocado',\n    scientificName: 'Persea americana',\n    category: 'fruit',\n    careDifficulty: 'difficult',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 40,\n    humidityMax: 70,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Tropical tree with creamy green fruits. Can be grown from a pit as a houseplant but rarely fruits indoors.',\n  },\n  {\n    id: 'apple',\n    name: 'Apple',\n    scientificName: 'Malus domestica',\n    category: 'fruit',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'medium',\n    tempMin: 7,\n    tempMax: 26,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Classic fruit tree with many varieties. Dwarf types can be grown in small spaces or containers.',\n  },\n  \n  // Herbs\n  {\n    id: 'basil',\n    name: 'Basil',\n    scientificName: 'Ocimum basilicum',\n    category: 'herb',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 30,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Aromatic herb with bright green leaves, essential for Italian cooking. Pinch flower buds to encourage leafy growth.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/9/90/Basil-Basilico-Ocimum_basilicum-albahaca.jpg',\n  },\n  {\n    id: 'mint',\n    name: 'Mint',\n    scientificName: 'Mentha',\n    category: 'herb',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'high',\n    tempMin: 15,\n    tempMax: 27,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 50,\n    soilMoistureMax: 70,\n    description: 'Vigorous herb with refreshing fragrance. Best grown in containers as it spreads aggressively.',\n  },\n  {\n    id: 'rosemary',\n    name: 'Rosemary',\n    scientificName: 'Salvia rosmarinus',\n    category: 'herb',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'low',\n    tempMin: 10,\n    tempMax: 27,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 20,\n    soilMoistureMax: 40,\n    description: 'Fragrant Mediterranean herb with needle-like leaves. Enjoys dry conditions and good drainage.',\n  },\n  {\n    id: 'cilantro',\n    name: 'Cilantro',\n    scientificName: 'Coriandrum sativum',\n    category: 'herb',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 10,\n    tempMax: 24,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Fast-growing herb with bright, citrusy flavor. Plant succession crops for continuous harvest.',\n  },\n  {\n    id: 'thyme',\n    name: 'Thyme',\n    scientificName: 'Thymus vulgaris',\n    category: 'herb',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'low',\n    tempMin: 10,\n    tempMax: 27,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 20,\n    soilMoistureMax: 40,\n    description: 'Low-growing herb with tiny, aromatic leaves. Drought tolerant and excellent for rock gardens.',\n  },\n  \n  // Flowers\n  {\n    id: 'sunflower',\n    name: 'Sunflower',\n    scientificName: 'Helianthus annuus',\n    category: 'flower',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 32,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Iconic summer flower with large yellow blooms. Varieties range from dwarf to giant.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/a/a9/A_sunflower.jpg',\n  },\n  {\n    id: 'lavender',\n    name: 'Lavender',\n    scientificName: 'Lavandula',\n    category: 'flower',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'low',\n    tempMin: 15,\n    tempMax: 30,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 20,\n    soilMoistureMax: 40,\n    description: 'Fragrant Mediterranean herb with purple flower spikes. Needs excellent drainage.',\n  },\n  {\n    id: 'rose',\n    name: 'Rose',\n    scientificName: 'Rosa',\n    category: 'flower',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'medium',\n    tempMin: 13,\n    tempMax: 28,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Classic garden flower known for beautiful blooms and fragrance. Many varieties for different conditions.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/5/51/Small_Red_Rose.JPG',\n  },\n  {\n    id: 'marigold',\n    name: 'Marigold',\n    scientificName: 'Tagetes',\n    category: 'flower',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'medium',\n    tempMin: 18,\n    tempMax: 32,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Cheerful flowers in orange, yellow, and red. Natural pest repellent in vegetable gardens.',\n  },\n  {\n    id: 'tulip',\n    name: 'Tulip',\n    scientificName: 'Tulipa',\n    category: 'flower',\n    careDifficulty: 'moderate',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 5,\n    tempMax: 21,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Spring-blooming bulbs in nearly every color. Plant in fall for spring blooms.',\n  },\n  \n  // Trees\n  {\n    id: 'maple',\n    name: 'Japanese Maple',\n    scientificName: 'Acer palmatum',\n    category: 'tree',\n    careDifficulty: 'moderate',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 10,\n    tempMax: 26,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 40,\n    soilMoistureMax: 60,\n    description: 'Ornamental tree with delicate, colorful foliage. Dwarf varieties work well in containers.',\n  },\n  {\n    id: 'olive',\n    name: 'Olive Tree',\n    scientificName: 'Olea europaea',\n    category: 'tree',\n    careDifficulty: 'moderate',\n    light: 'high',\n    water: 'low',\n    tempMin: 15,\n    tempMax: 30,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 20,\n    soilMoistureMax: 40,\n    description: 'Mediterranean tree with silvery leaves. Can be grown as a patio plant in cooler climates.',\n  },\n  \n  // Succulents\n  {\n    id: 'aloe-vera',\n    name: 'Aloe Vera',\n    scientificName: 'Aloe barbadensis miller',\n    category: 'succulent',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'low',\n    tempMin: 16,\n    tempMax: 27,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 15,\n    soilMoistureMax: 30,\n    description: 'Medicinal succulent with thick, gel-filled leaves. Great for beginners.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/4/4b/Aloe_vera_flower_inset.png',\n  },\n  {\n    id: 'echeveria',\n    name: 'Echeveria',\n    scientificName: 'Echeveria',\n    category: 'succulent',\n    careDifficulty: 'easy',\n    light: 'high',\n    water: 'low',\n    tempMin: 18,\n    tempMax: 27,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 15,\n    soilMoistureMax: 30,\n    description: 'Rosette-forming succulent in many colors and variations. Perfect for dish gardens.',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/a/a4/Echeveria_hybrid.JPG',\n  },\n  {\n    id: 'jade-plant',\n    name: 'Jade Plant',\n    scientificName: 'Crassula ovata',\n    category: 'succulent',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'low',\n    tempMin: 18,\n    tempMax: 27,\n    humidityMin: 30,\n    humidityMax: 50,\n    soilMoistureMin: 15,\n    soilMoistureMax: 30,\n    description: 'Tree-like succulent with oval leaves. Often kept as a houseplant for good luck.',\n  },\n  {\n    id: 'christmas-cactus',\n    name: 'Christmas Cactus',\n    scientificName: 'Schlumbergera',\n    category: 'succulent',\n    careDifficulty: 'easy',\n    light: 'medium',\n    water: 'medium',\n    tempMin: 15,\n    tempMax: 27,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n    description: 'Tropical cactus with flat, segmented stems and colorful blooms around holiday time.',\n  }\n];\n\n// Helper functions\n\n// Get all plants\nexport function getAllPlants(): PlantTypeInfo[] {\n  return plantTypes;\n}\n\n// Get plants by category\nexport function getPlantsByCategory(category: string): PlantTypeInfo[] {\n  return plantTypes.filter(plant => plant.category === category);\n}\n\n// Get plant by ID\nexport function getPlantById(id: string): PlantTypeInfo | undefined {\n  return plantTypes.find(plant => plant.id === id);\n}\n\n// Search plants by name\nexport function searchPlants(query: string): PlantTypeInfo[] {\n  if (!query || query.trim() === '') return [];\n  \n  const normalizedQuery = query.toLowerCase().trim();\n  \n  return plantTypes.filter(plant => \n    plant.name.toLowerCase().includes(normalizedQuery) || \n    plant.scientificName.toLowerCase().includes(normalizedQuery)\n  );\n}","size_bytes":16986},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/timestampLogger.ts":{"content":"import { ref, set, push, serverTimestamp, onValue } from 'firebase/database';\nimport { database } from './firebase';\nimport { SensorData } from './firebase';\n\n/**\n * Service that logs sensor data to timestamps folder in Firebase database\n * every 5 seconds for graph visualization\n */\nexport class TimestampLogger {\n  private static instance: TimestampLogger;\n  private timerId: NodeJS.Timeout | null = null;\n  private isLogging: boolean = false;\n  private intervalMs: number = 5000; // 5 seconds by default\n  \n  // Singleton pattern\n  private constructor() {}\n  \n  public static getInstance(): TimestampLogger {\n    if (!TimestampLogger.instance) {\n      TimestampLogger.instance = new TimestampLogger();\n    }\n    return TimestampLogger.instance;\n  }\n  \n  /**\n   * Start logging sensor data to timestamps folder at set intervals\n   * @param intervalMs - Optional interval in milliseconds (defaults to 5000ms)\n   */\n  public startLogging(intervalMs: number = 5000): void {\n    if (this.isLogging) {\n      console.log('Timestamp logger is already running');\n      return;\n    }\n    \n    this.intervalMs = intervalMs;\n    this.isLogging = true;\n    \n    console.log(`Starting timestamp logger with ${intervalMs}ms interval`);\n    \n    // Schedule the recurring log function\n    this.timerId = setInterval(() => this.logCurrentTimestamp(), this.intervalMs);\n    \n    // Log immediately on start\n    this.logCurrentTimestamp();\n  }\n  \n  /**\n   * Stop the timestamp logging service\n   */\n  public stopLogging(): void {\n    if (!this.isLogging || !this.timerId) {\n      console.log('Timestamp logger is not running');\n      return;\n    }\n    \n    clearInterval(this.timerId);\n    this.timerId = null;\n    this.isLogging = false;\n    console.log('Timestamp logger stopped');\n  }\n  \n  /**\n   * Log the current sensor data to the timestamps folder\n   */\n  private async logCurrentTimestamp(): Promise<void> {\n    try {\n      // Get current timestamp\n      const timestamp = Date.now();\n      \n      // Create a new timestamp entry with timestamp as key\n      const timestampRef = ref(database, `timestamps/${timestamp}`);\n      \n      // Define the data to be logged\n      const sensorData: SensorData = {\n        temperature: 0, // Will be fetched from Firebase\n        humidity: 0,    // Will be fetched from Firebase\n        timestamp: timestamp\n      };\n      \n      // Fetch the current sensor data from Firebase\n      const temperatureRef = ref(database, 'sensorData/current/temperature');\n      const humidityRef = ref(database, 'sensorData/current/humidity');\n      const lightRef = ref(database, 'sensorData/current/Light'); // Capital L as in the API\n      const soilMoistureRef = ref(database, 'sensorData/current/soilMoister'); // 'soilMoister' as in the API\n      \n      // Get temperature\n      onValue(temperatureRef, (snapshot) => {\n        if (snapshot.exists()) {\n          sensorData.temperature = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Get humidity\n      onValue(humidityRef, (snapshot) => {\n        if (snapshot.exists()) {\n          sensorData.humidity = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Get light if available\n      onValue(lightRef, (snapshot) => {\n        if (snapshot.exists()) {\n          sensorData.light = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Get soil moisture if available\n      onValue(soilMoistureRef, (snapshot) => {\n        if (snapshot.exists()) {\n          sensorData.soilMoisture = snapshot.val();\n        }\n      }, { onlyOnce: true });\n      \n      // Wait a short time to make sure all data is fetched\n      setTimeout(() => {\n        // Set the data in the timestamps node\n        set(timestampRef, sensorData)\n          .then(() => {\n            console.log(`Logged timestamp data at ${new Date(timestamp).toLocaleTimeString()}:`, sensorData);\n          })\n          .catch((error) => {\n            console.error('Error logging timestamp data:', error);\n          });\n      }, 200);\n      \n    } catch (error) {\n      console.error('Error in timestamp logger:', error);\n    }\n  }\n  \n  /**\n   * Manually log timestamp once without starting the scheduled logging\n   */\n  public logOnce(): void {\n    this.logCurrentTimestamp();\n  }\n  \n  /**\n   * Check if the logger is currently running\n   */\n  public isRunning(): boolean {\n    return this.isLogging;\n  }\n  \n  /**\n   * Get the current logging interval\n   */\n  public getInterval(): number {\n    return this.intervalMs;\n  }\n  \n  /**\n   * Change the logging interval\n   * @param intervalMs - New interval in milliseconds\n   */\n  public setInterval(intervalMs: number): void {\n    if (intervalMs < 1000) {\n      console.warn('Logging interval should be at least 1000ms to avoid overloading the database');\n      intervalMs = 1000;\n    }\n    \n    this.intervalMs = intervalMs;\n    \n    // Restart the timer if already running\n    if (this.isLogging && this.timerId) {\n      clearInterval(this.timerId);\n      this.timerId = setInterval(() => this.logCurrentTimestamp(), this.intervalMs);\n      console.log(`Updated timestamp logging interval to ${intervalMs}ms`);\n    }\n  }\n}","size_bytes":5161},"client/src/lib/useTheme.ts":{"content":"// This file is deprecated. Use ThemeProvider.tsx instead.\nexport { useTheme, ThemeProvider } from './ThemeProvider';\n","size_bytes":118},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { AlertBanner } from \"@/components/AlertBanner\";\nimport { DataVisualization } from \"@/components/DataVisualization\";\nimport { PlantConfig, PlantConfigValues } from \"@/components/PlantConfig\";\nimport {\n  NotificationSettings,\n  NotificationSettingsValues,\n} from \"@/components/NotificationSettings\";\nimport { PlantControls } from \"@/components/PlantControls\";\nimport {\n  initializeFirebase,\n  subscribeSensorData,\n  getSensorHistory,\n  subscribePlantControls,\n  setUvLight,\n  setWateringActive,\n  SensorData,\n  SensorHistory,\n  PlantControls as PlantControlsType,\n} from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [sensorData, setSensorData] = useState<SensorData | null>(null);\n  const [historyData, setHistoryData] = useState<SensorHistory>({});\n  const [lastUpdate, setLastUpdate] = useState<string>(\"\");\n  const [plantConfig, setPlantConfig] = useState<PlantConfigValues>({\n    plantType: \"succulent\",\n    tempMin: 18,\n    tempMax: 26,\n    humidityMin: 40,\n    humidityMax: 60,\n    soilMoistureMin: 30,\n    soilMoistureMax: 50,\n  });\n  const [notificationSettings, setNotificationSettings] =\n    useState<NotificationSettingsValues>({\n      enableNotifications: true,\n      lowMoistureAlerts: true,\n      temperatureAlerts: false,\n      humidityAlerts: false,\n      email: \"\",\n    });\n  const [alert, setAlert] = useState<{\n    show: boolean;\n    message: string;\n    title: string;\n    type: \"critical\" | \"warning\" | \"info\";\n  }>({\n    show: false,\n    message: \"\",\n    title: \"\",\n    type: \"info\",\n  });\n\n  // Track plant controls state\n  const [plantControls, setPlantControls] = useState<PlantControlsType>({\n    uvLight: false,\n    wateringActive: false,\n  });\n\n  useEffect(() => {\n    // Make sure Firebase is initialized before subscribing to data\n    const isInitialized = initializeFirebase();\n\n    if (isInitialized) {\n      // Subscribe to real-time sensor data updates\n      const unsubscribeSensor = subscribeSensorData((data) => {\n        console.log(\"Received new sensor data:\", data);\n        setSensorData(data);\n        \n        // Update last update time\n        const now = new Date();\n        const formattedTime = now.toLocaleTimeString([], { \n          hour: '2-digit', \n          minute: '2-digit',\n          hour12: true \n        });\n        setLastUpdate(formattedTime);\n      });\n\n      // Get sensor history data (24h by default)\n      const unsubscribeHistory = getSensorHistory(1, (data) => {\n        console.log(\n          \"Received history data:\",\n          Object.keys(data).length,\n          \"entries\",\n        );\n        setHistoryData(data);\n      });\n\n      // Subscribe to plant controls\n      const unsubscribeControls = subscribePlantControls((controls) => {\n        console.log(\"Received plant controls:\", controls);\n        setPlantControls(controls);\n      });\n\n      // Cleanup subscriptions on component unmount\n      return () => {\n        unsubscribeSensor();\n        unsubscribeHistory();\n        unsubscribeControls();\n      };\n    } else {\n      console.error(\"Firebase could not be initialized\");\n    }\n  }, []);\n\n  // Check for alerts when sensor data or config changes\n  useEffect(() => {\n    checkForAlerts();\n  }, [sensorData, plantConfig]);\n\n  const checkForAlerts = () => {\n    // If we don't have sensor data yet, no alerts to check\n    if (!sensorData) {\n      return;\n    }\n\n    // Check temperature (highest priority)\n    const temp = sensorData.temperature;\n    if (temp < plantConfig.tempMin || temp > plantConfig.tempMax) {\n      setAlert({\n        show: true,\n        title: \"Temperature Alert\",\n        message: `Temperature is ${temp < plantConfig.tempMin ? \"below\" : \"above\"} the ideal range (${plantConfig.tempMin}°C - ${plantConfig.tempMax}°C).`,\n        type: \"warning\",\n      });\n      return;\n    }\n\n    // Check humidity - humidity is in raw percentage format directly from sensor\n    const humidity = sensorData.humidity;\n    // If humidity value is unrealistically high (like 330000), normalize it\n    const normalizedHumidity = humidity > 100 ? humidity / 1000 : humidity;\n    \n    if (\n      normalizedHumidity < plantConfig.humidityMin ||\n      normalizedHumidity > plantConfig.humidityMax\n    ) {\n      setAlert({\n        show: true,\n        title: \"Humidity Alert\",\n        message: `Humidity is ${normalizedHumidity < plantConfig.humidityMin ? \"below\" : \"above\"} the ideal range (${plantConfig.humidityMin}% - ${plantConfig.humidityMax}%).`,\n        type: \"warning\",\n      });\n      return;\n    }\n    \n    // Check soil moisture if available\n    if (sensorData.soilMoisture !== undefined) {\n      const soilMoisture = sensorData.soilMoisture;\n      if (\n        soilMoisture < plantConfig.soilMoistureMin ||\n        soilMoisture > plantConfig.soilMoistureMax\n      ) {\n        setAlert({\n          show: true,\n          title: \"Soil Moisture Alert\",\n          message: `Soil moisture is ${soilMoisture < plantConfig.soilMoistureMin ? \"below\" : \"above\"} the ideal range (${plantConfig.soilMoistureMin}% - ${plantConfig.soilMoistureMax}%).`,\n          type: \"warning\",\n        });\n        return;\n      }\n    }\n\n    // No alerts needed\n    setAlert({\n      show: false,\n      title: \"\",\n      message: \"\",\n      type: \"info\",\n    });\n  };\n\n  const handleSaveConfig = (config: PlantConfigValues) => {\n    setPlantConfig(config);\n    // In a real application, you would save this to Firebase\n    toast({\n      title: \"Configuration saved\",\n      description: \"Your plant configuration has been saved.\",\n    });\n  };\n\n  const handleSaveNotifications = (settings: NotificationSettingsValues) => {\n    setNotificationSettings(settings);\n    // In a real application, you would save this to Firebase\n    toast({\n      title: \"Notification settings saved\",\n      description: \"Your notification preferences have been updated.\",\n    });\n  };\n\n  // Handle plant control actions\n  const handlePlantControlAction = (action: string, state: boolean) => {\n    console.log(`Plant control action: ${action} = ${state}`);\n\n    if (action === \"uvLight\") {\n      setUvLight(state)\n        .then(() => {\n          toast({\n            title: state ? \"UV Light ON\" : \"UV Light OFF\",\n            description: state\n              ? \"Providing supplemental light to your plant.\"\n              : \"UV light has been turned off.\",\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error setting UV light state:\", error);\n          toast({\n            title: \"Control Error\",\n            description: \"Failed to control UV light. Please try again.\",\n            variant: \"destructive\",\n          });\n        });\n    } else if (action === \"watering\") {\n      setWateringActive(state)\n        .then(() => {\n          if (state) {\n            toast({\n              title: \"Watering System Activated\",\n              description: \"Water pump is running.\",\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error setting watering state:\", error);\n          toast({\n            title: \"Control Error\",\n            description: \"Failed to control watering system. Please try again.\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  };\n\n  return (\n    <div className=\"dark fitness-app-bg min-h-screen sf-pro\">\n      <header className=\"sticky top-0 z-50 backdrop-blur-lg bg-white/90 dark:bg-[#0c0f12]/90 border-b border-gray-200/50 dark:border-[#2C3038]/30\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <motion.div \n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ duration: 0.5 }}\n              className=\"bg-gradient-to-r from-green-500 to-emerald-500 rounded-full p-2 shadow-lg mr-3\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" className=\"text-white\">\n                <path d=\"M12 2L8 6H16L12 2Z\"></path>\n                <path d=\"M7 10.5C7 8.01472 9.01472 6 11.5 6C13.9853 6 16 8.01472 16 10.5C16 12.9853 13.9853 15 11.5 15C9.01472 15 7 12.9853 7 10.5Z\"></path>\n                <path d=\"M12 22C7.58172 22 4 18.4183 4 14C4 12.9391 4.20252 11.9217 4.57904 11C5.38373 11.2409 6.25953 11.5049 7.20108 11.7399C7.70742 12.7236 8.78721 13.5 10.5 13.5C10.6155 13.5 10.7296 13.4952 10.842 13.486C11.5301 14.4452 12.6542 15 14 15C16.7614 15 19 12.7614 19 10C19 8.76039 18.5252 7.62488 17.748 6.75255C19.4773 8.42702 20.5 10.8574 20.5 13.5C20.5 18.1944 16.6944 22 12 22Z\"></path>\n              </svg>\n            </motion.div>\n            <motion.h1 \n              initial={{ x: -20, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ duration: 0.5, delay: 0.1 }}\n              className=\"text-xl font-semibold text-gray-900 dark:text-white\"\n            >\n              Plant Care\n            </motion.h1>\n          </div>\n          \n          <motion.div \n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center\"\n          >\n            <div className=\"flex items-center mr-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse\"></div>\n              <span>Live</span>\n            </div>\n            <span>Updated {lastUpdate}</span>\n          </motion.div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 md:py-8 pb-24\">\n        {/* Alert Banner */}\n        {alert.show && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.3 }}\n            className=\"mb-4\"\n          >\n            <div className=\"fitness-metric-card overflow-hidden p-1\">\n              <AlertBanner\n                title={alert.title}\n                message={alert.message}\n                type={alert.type}\n              />\n            </div>\n          </motion.div>\n        )}\n\n        {/* Current Plant Status Summary */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"mb-6\"\n        >\n          <div className=\"fitness-metric-card p-6 shadow-md\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-2xl font-semibold tracking-tight text-gray-900 dark:text-white\">Plant Status</h2>\n              <div className=\"bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full text-sm text-gray-800 dark:text-gray-200\">\n                {sensorData ? new Date(sensorData.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : '--:--'}\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\n              {/* Temperature */}\n              <motion.div \n                className=\"sensor-stat group\"\n                whileHover={{ scale: 1.03 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n              >\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center mb-1\n                  ${sensorData?.temperature && sensorData.temperature > plantConfig.tempMax \n                    ? 'bg-red-500/30 text-red-500' \n                    : sensorData?.temperature && sensorData.temperature < plantConfig.tempMin \n                      ? 'bg-blue-500/30 text-blue-500' \n                      : 'bg-green-500/30 text-green-500'}`}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z\"></path>\n                  </svg>\n                </div>\n                <div className=\"text-2xl font-bold mt-2\">\n                  {sensorData ? `${sensorData.temperature.toFixed(1)}°` : '--°'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Temperature</div>\n                <div className={`mt-1 text-xs px-2 py-0.5 rounded-full \n                  ${sensorData?.temperature && sensorData.temperature > plantConfig.tempMax \n                    ? 'bg-red-500/20 text-red-500' \n                    : sensorData?.temperature && sensorData.temperature < plantConfig.tempMin \n                      ? 'bg-blue-500/20 text-blue-500' \n                      : 'bg-green-500/20 text-green-500'}`}\n                >\n                  {sensorData?.temperature && sensorData.temperature > plantConfig.tempMax \n                    ? 'Too Hot' \n                    : sensorData?.temperature && sensorData.temperature < plantConfig.tempMin \n                      ? 'Too Cold' \n                      : 'Optimal'}\n                </div>\n              </motion.div>\n              \n              {/* Humidity */}\n              <motion.div \n                className=\"sensor-stat group\"\n                whileHover={{ scale: 1.03 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n              >\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center mb-1\n                  ${sensorData?.humidity && \n                    (sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity) > plantConfig.humidityMax \n                    ? 'bg-blue-500/30 text-blue-500' \n                    : sensorData?.humidity && \n                      (sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity) < plantConfig.humidityMin \n                      ? 'bg-yellow-500/30 text-yellow-500' \n                      : 'bg-green-500/30 text-green-500'}`}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z\"></path>\n                  </svg>\n                </div>\n                <div className=\"text-2xl font-bold mt-2\">\n                  {sensorData ? `${(sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity).toFixed(0)}%` : '--%'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Humidity</div>\n                <div className={`mt-1 text-xs px-2 py-0.5 rounded-full \n                  ${sensorData?.humidity && \n                    (sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity) > plantConfig.humidityMax \n                    ? 'bg-blue-500/20 text-blue-500' \n                    : sensorData?.humidity && \n                      (sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity) < plantConfig.humidityMin \n                      ? 'bg-yellow-500/20 text-yellow-500' \n                      : 'bg-green-500/20 text-green-500'}`}\n                >\n                  {sensorData?.humidity && \n                    (sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity) > plantConfig.humidityMax \n                    ? 'Too Moist' \n                    : sensorData?.humidity && \n                      (sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity) < plantConfig.humidityMin \n                      ? 'Too Dry' \n                      : 'Optimal'}\n                </div>\n              </motion.div>\n              \n              {/* Light */}\n              <motion.div \n                className=\"sensor-stat group\"\n                whileHover={{ scale: 1.03 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n              >\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center mb-1\n                  ${sensorData?.light && sensorData.light > 50 \n                    ? 'bg-yellow-500/30 text-yellow-500' \n                    : sensorData?.light && sensorData.light < 20 \n                      ? 'bg-blue-500/30 text-blue-500' \n                      : 'bg-green-500/30 text-green-500'}`}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <circle cx=\"12\" cy=\"12\" r=\"5\"></circle>\n                    <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"></line>\n                    <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line>\n                    <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"></line>\n                    <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"></line>\n                    <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"></line>\n                    <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"></line>\n                    <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"></line>\n                    <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"></line>\n                  </svg>\n                </div>\n                <div className=\"text-2xl font-bold mt-2\">\n                  {sensorData?.light ? `${sensorData.light}%` : '--%'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Light</div>\n                <div className={`mt-1 text-xs px-2 py-0.5 rounded-full \n                  ${sensorData?.light && sensorData.light > 50 \n                    ? 'bg-yellow-500/20 text-yellow-500' \n                    : sensorData?.light && sensorData.light < 20\n                      ? 'bg-blue-500/20 text-blue-500' \n                      : 'bg-green-500/20 text-green-500'}`}\n                >\n                  {sensorData?.light && sensorData.light > 50 \n                    ? 'Bright' \n                    : sensorData?.light && sensorData.light < 20\n                      ? 'Too Dark' \n                      : 'Good'}\n                </div>\n              </motion.div>\n              \n              {/* Soil Moisture */}\n              <motion.div \n                className=\"sensor-stat group\"\n                whileHover={{ scale: 1.03 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n              >\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center mb-1\n                  ${sensorData?.soilMoisture && sensorData.soilMoisture > plantConfig.soilMoistureMax \n                    ? 'bg-blue-500/30 text-blue-500' \n                    : sensorData?.soilMoisture && sensorData.soilMoisture < plantConfig.soilMoistureMin \n                      ? 'bg-yellow-500/30 text-yellow-500' \n                      : 'bg-green-500/30 text-green-500'}`}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M8 16a4 4 0 0 1-4-4 7 7 0 0 1 7-7 8 8 0 0 0 5 2v-2a10 10 0 0 1-5-1.27A10 10 0 0 0 4 6a10 10 0 0 0 11 10c2 0 4-.5 5.5-1.5\"></path>\n                    <path d=\"M22 16a5 5 0 0 0-5-5 3 3 0 0 0-3 3c0 1.1.6 2 1.5 2.5\"></path>\n                  </svg>\n                </div>\n                <div className=\"text-2xl font-bold mt-2\">\n                  {sensorData?.soilMoisture ? `${sensorData.soilMoisture}%` : '--%'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Soil Moisture</div>\n                <div className={`mt-1 text-xs px-2 py-0.5 rounded-full \n                  ${sensorData?.soilMoisture && sensorData.soilMoisture > plantConfig.soilMoistureMax \n                    ? 'bg-blue-500/20 text-blue-500' \n                    : sensorData?.soilMoisture && sensorData.soilMoisture < plantConfig.soilMoistureMin \n                      ? 'bg-yellow-500/20 text-yellow-500' \n                      : 'bg-green-500/20 text-green-500'}`}\n                >\n                  {sensorData?.soilMoisture && sensorData.soilMoisture > plantConfig.soilMoistureMax \n                    ? 'Too Wet' \n                    : sensorData?.soilMoisture && sensorData.soilMoisture < plantConfig.soilMoistureMin \n                      ? 'Too Dry' \n                      : 'Optimal'}\n                </div>\n              </motion.div>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Plant Controls Widget */}\n        <div className=\"grid grid-cols-1 md:grid-cols-12 gap-6 mb-6\">\n          <motion.div\n            className=\"md:col-span-5\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n          >\n            <div className=\"fitness-metric-card h-full p-6\">\n              <h2 className=\"text-xl font-semibold tracking-tight mb-4 flex items-center text-gray-900 dark:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2 text-green-500\">\n                  <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n                  <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n                </svg>\n                Controls\n              </h2>\n              \n              <PlantControls\n                onAction={handlePlantControlAction}\n                sensorData={sensorData}\n              />\n            </div>\n          </motion.div>\n          \n          {/* Data Visualization Widget */}\n          <motion.div\n            className=\"md:col-span-7\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <div className=\"fitness-metric-card h-full p-6 bg-amber-50/40 dark:bg-[#151918]/70\">\n              <h2 className=\"text-xl font-semibold tracking-tight mb-4 flex items-center text-gray-900 dark:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2 text-primary\">\n                  <line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line>\n                  <line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line>\n                  <line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>\n                </svg>\n                Data Trends\n              </h2>\n              \n              <DataVisualization\n                historyData={historyData}\n                currentData={\n                  sensorData\n                    ? {\n                        temperature: sensorData.temperature,\n                        // Normalize humidity value if it's too large (like 330000)\n                        humidity: sensorData.humidity > 100 ? sensorData.humidity / 1000 : sensorData.humidity,\n                        light: sensorData.light,\n                        soilMoisture: sensorData.soilMoisture,\n                      }\n                    : undefined\n                }\n              />\n            </div>\n          </motion.div>\n        </div>\n        \n        {/* Bottom Widgets */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Plant SOS Widget */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.3 }}\n          >\n            <div className=\"fitness-metric-card p-6 bg-gradient-to-br from-amber-50/50 to-red-50/40 dark:from-red-900/30 dark:to-red-950/80\">\n              <h2 className=\"text-xl font-semibold tracking-tight mb-3 flex items-center text-gray-900 dark:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2 text-red-500\">\n                  <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\n                  <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\n                  <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n                </svg>\n                Plant Emergency SOS\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-4\">\n                Is your plant showing signs of distress? Get instant AI-powered\n                advice to help diagnose and treat common plant issues.\n              </p>\n\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"bg-red-600 hover:bg-red-700 text-white font-medium py-3 px-6 rounded-full flex items-center justify-center touch-button\"\n                onClick={() => {\n                  toast({\n                    title: \"Plant SOS Activated\",\n                    description:\n                      \"Taking you to the Plant Chat for emergency assistance.\",\n                  });\n                  // In a real implementation, this would take the user to the chat with a pre-filled emergency message\n                  window.location.href = \"/chat\";\n                }}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth={1.5}\n                  stroke=\"currentColor\"\n                  className=\"w-5 h-5 mr-2\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\"\n                  />\n                </svg>\n                SOS: Get Help Now\n              </motion.button>\n            </div>\n          </motion.div>\n          \n          {/* Plant Gallery Widget */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            <div className=\"fitness-metric-card p-6 bg-gradient-to-br from-amber-50/50 to-green-50/40 dark:from-green-900/30 dark:to-emerald-950/80\">\n              <h2 className=\"text-xl font-semibold tracking-tight mb-3 flex items-center text-gray-900 dark:text-white\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2 text-primary\">\n                  <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                  <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle>\n                  <polyline points=\"21 15 16 10 5 21\"></polyline>\n                </svg>\n                My Plant Gallery\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-300 text-sm mb-4\">\n                Track your plants' growth progress with photos and see how they've changed over time.\n              </p>\n\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-6 rounded-full flex items-center justify-center touch-button\"\n                onClick={() => {\n                  toast({\n                    title: \"Plant Gallery\",\n                    description: \"Taking you to your plant collection.\",\n                  });\n                  // In a real implementation, this would take the user to the My Plants page\n                  window.location.href = \"/plants\";\n                }}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"mr-2\">\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                  <polyline points=\"14 2 14 8 20 8\"></polyline>\n                  <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                  <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                  <polyline points=\"10 9 9 9 8 9\"></polyline>\n                </svg>\n                View My Plants\n              </motion.button>\n            </div>\n          </motion.div>\n        </div>\n      </main>\n\n      {/* Footer Removed */}\n    </div>\n  );\n}\n","size_bytes":29669},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useLocation } from 'wouter';\nimport { FaGoogle, FaEnvelope, FaLock, FaUser } from 'react-icons/fa';\nimport { \n  signInWithGoogle, \n  loginWithEmail,\n  registerWithEmail,\n  resetPassword,\n  updateExpertiseLevel, \n  EXPERTISE_LEVELS \n} from '@/lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/lib/AuthProvider';\nimport { useToast } from '@/hooks/use-toast';\nimport { Leaf, Loader2 } from 'lucide-react';\n\nexport default function Login() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user, loading, refreshProfile } = useAuth();\n  const [signingIn, setSigningIn] = useState(false);\n  const [selectedExpertise, setSelectedExpertise] = useState('');\n  const [showExpertiseSelection, setShowExpertiseSelection] = useState(false);\n  const [showEmailForm, setShowEmailForm] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [showResetPassword, setShowResetPassword] = useState(false);\n  \n  // Email form fields\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [displayName, setDisplayName] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  // Handle Google sign in\n  const handleGoogleSignIn = async () => {\n    setSigningIn(true);\n    try {\n      const profile = await signInWithGoogle();\n      \n      if (profile) {\n        // If the user is new or doesn't have an expertise level set\n        if (!profile.expertiseLevel) {\n          setShowExpertiseSelection(true);\n        } else {\n          // User already has expertise level, redirect to dashboard\n          toast({\n            title: \"Welcome back!\",\n            description: \"Successfully signed in\",\n          });\n          setLocation('/');\n        }\n      } else {\n        toast({\n          title: \"Sign in failed\",\n          description: \"Could not sign in with Google\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error signing in with Google:', error);\n      toast({\n        title: \"Sign in failed\",\n        description: \"An error occurred during sign in\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSigningIn(false);\n    }\n  };\n\n  // Handle expertise level selection\n  const handleExpertiseSubmit = async () => {\n    if (!selectedExpertise || !user) return;\n    \n    setSigningIn(true);\n    try {\n      const updated = await updateExpertiseLevel(user.uid, selectedExpertise);\n      \n      if (updated) {\n        await refreshProfile();\n        toast({\n          title: \"Profile updated\",\n          description: \"Your expertise level has been saved\",\n        });\n        setLocation('/');\n      } else {\n        toast({\n          title: \"Update failed\",\n          description: \"Could not save your expertise level\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error updating expertise level:', error);\n      toast({\n        title: \"Update failed\",\n        description: \"An error occurred while saving your expertise level\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSigningIn(false);\n    }\n  };\n  \n  // Handle email login\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !password) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter your email and password\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setSigningIn(true);\n    try {\n      const profile = await loginWithEmail(email, password);\n      \n      if (profile) {\n        // If the user is new or doesn't have an expertise level set\n        if (!profile.expertiseLevel) {\n          setShowExpertiseSelection(true);\n        } else {\n          // User already has expertise level, redirect to dashboard\n          toast({\n            title: \"Welcome back!\",\n            description: \"Successfully signed in\",\n          });\n          setLocation('/');\n        }\n      } else {\n        toast({\n          title: \"Sign in failed\",\n          description: \"Could not sign in with email/password\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error signing in with email:', error);\n      toast({\n        title: \"Sign in failed\",\n        description: \"Invalid email or password\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSigningIn(false);\n    }\n  };\n  \n  // Handle email registration\n  const handleEmailRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !password || !displayName) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        description: \"Please make sure your passwords match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    if (password.length < 6) {\n      toast({\n        title: \"Password too short\",\n        description: \"Password must be at least 6 characters\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setSigningIn(true);\n    try {\n      const profile = await registerWithEmail(email, password, displayName);\n      \n      if (profile) {\n        setShowExpertiseSelection(true);\n      } else {\n        toast({\n          title: \"Registration failed\",\n          description: \"Could not create your account\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error registering with email:', error);\n      toast({\n        title: \"Registration failed\",\n        description: \"This email may already be registered\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSigningIn(false);\n    }\n  };\n  \n  // State for the reset password result\n  const [newPassword, setNewPassword] = useState<string | null>(null);\n  \n  // Handle password reset\n  const handlePasswordReset = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      toast({\n        title: \"Missing email\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setSigningIn(true);\n    try {\n      const generatedPassword = await resetPassword(email);\n      setNewPassword(generatedPassword);\n      \n      // Auto-login with the new password\n      try {\n        // First show the password so the user can see it\n        toast({\n          title: \"Password reset successful\",\n          description: \"Logging you in automatically...\",\n          duration: 5000,\n        });\n        \n        // Then perform automatic login\n        await loginWithEmail(email, generatedPassword);\n        \n        // If we get here, login was successful, the redirect will happen automatically\n        // via the useEffect that checks for user && !loading\n      } catch (loginError: any) {\n        console.error('Auto-login failed after password reset:', loginError);\n        toast({\n          title: \"Auto-login failed\",\n          description: \"Your password was reset successfully, but we couldn't log you in automatically. Please use the new password to log in manually.\",\n          duration: 8000,\n        });\n      }\n    } catch (error: any) {\n      console.error('Error resetting password:', error);\n      toast({\n        title: \"Failed to reset password\",\n        description: error.message || \"Please check if the email is correct\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSigningIn(false);\n    }\n  };\n\n  // If already signed in and has expertise (or came from password reset), redirect to dashboard\n  if (user && !loading && (!showExpertiseSelection || newPassword)) {\n    setLocation('/');\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-green-50 to-blue-50 dark:from-slate-900 dark:to-slate-800\">\n      <motion.div \n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md\"\n      >\n        {!showExpertiseSelection ? (\n          <Card className=\"border-0 shadow-lg overflow-hidden bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-100/30 to-blue-100/20 dark:from-green-900/20 dark:to-blue-900/10\" />\n            \n            <CardHeader className=\"relative z-10 pb-6 text-center\">\n              <motion.div \n                className=\"mx-auto mb-4 h-16 w-16 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center\"\n                animate={{ \n                  scale: [1, 1.05, 1],\n                  rotate: [0, 5, 0, -5, 0],\n                }}\n                transition={{ duration: 3, repeat: Infinity }}\n              >\n                <Leaf className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n              </motion.div>\n              <CardTitle className=\"text-2xl font-bold\">Smart Plant Monitor</CardTitle>\n              <CardDescription>\n                Sign in to manage your plants and access personalized care recommendations\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"relative z-10 pt-2\">\n              {showResetPassword ? (\n                // Password Reset Form\n                <div className=\"space-y-4\">\n                  {newPassword ? (\n                    // Show the new password\n                    <div className=\"space-y-4\">\n                      <div className=\"p-4 bg-green-50 dark:bg-green-900/30 rounded-lg border border-green-200 dark:border-green-800\">\n                        <h3 className=\"font-medium text-green-800 dark:text-green-300 mb-2\">Password Reset Successful!</h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n                          Your new password is:\n                        </p>\n                        <div className=\"flex items-center justify-between p-3 bg-white dark:bg-slate-800 border border-gray-200 dark:border-gray-700 rounded\">\n                          <code className=\"font-mono text-base font-bold\">{newPassword}</code>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            className=\"h-8 px-2\"\n                            onClick={() => {\n                              navigator.clipboard.writeText(newPassword);\n                              toast({\n                                title: \"Copied to clipboard\",\n                                description: \"Password copied to clipboard\",\n                              });\n                            }}\n                          >\n                            Copy\n                          </Button>\n                        </div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-3\">\n                          Remember to use this password to log in. You can change it later in your profile settings.\n                        </p>\n                      </div>\n                      <div className=\"text-center\">\n                        <Button\n                          variant=\"default\"\n                          onClick={async () => {\n                            if (newPassword) {\n                              // Attempt to login automatically\n                              try {\n                                setSigningIn(true);\n                                await loginWithEmail(email, newPassword);\n                                // The useEffect will handle redirect on successful login\n                              } catch (loginError) {\n                                console.error('Error during auto-login from password reset:', loginError);\n                                // If auto-login fails, fall back to manual login\n                                toast({\n                                  title: \"Please log in manually\",\n                                  description: \"We'll fill in your password for you.\",\n                                });\n                                // Auto-fill the email and password fields\n                                setPassword(newPassword);\n                                // Go back to login screen\n                                setShowResetPassword(false);\n                                setShowEmailForm(true);\n                              } finally {\n                                setSigningIn(false);\n                              }\n                            } else {\n                              // Just go back to login without attempting auto-login\n                              setShowResetPassword(false);\n                              setShowEmailForm(true);\n                            }\n                          }}\n                          disabled={signingIn}\n                          className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12\"\n                        >\n                          {signingIn ? \n                            <>\n                              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              Logging in...\n                            </> : \n                            \"Sign In Now\"\n                          }\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    // Show the reset password form\n                    <form onSubmit={handlePasswordReset}>\n                      <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"reset-email\">Email</Label>\n                          <div className=\"relative\">\n                            <FaEnvelope className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                            <Input\n                              id=\"reset-email\"\n                              type=\"email\"\n                              placeholder=\"your.email@example.com\"\n                              value={email}\n                              onChange={(e) => setEmail(e.target.value)}\n                              className=\"pl-10\"\n                              required\n                            />\n                          </div>\n                        </div>\n                        \n                        <motion.div \n                          whileHover={{ scale: 1.02 }}\n                          whileTap={{ scale: 0.98 }}\n                        >\n                          <Button\n                            type=\"submit\"\n                            disabled={signingIn || !email}\n                            className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12\"\n                          >\n                            {signingIn ? (\n                              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                            ) : null}\n                            {signingIn ? \"Resetting Password...\" : \"Reset My Password\"}\n                          </Button>\n                        </motion.div>\n                        \n                        <div className=\"text-center\">\n                          <Button\n                            variant=\"link\"\n                            onClick={() => setShowResetPassword(false)}\n                            className=\"text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n                          >\n                            Back to Sign In\n                          </Button>\n                        </div>\n                      </div>\n                    </form>\n                  )}\n                </div>\n              ) : showEmailForm ? (\n                // Email Authentication Form (Login/Register)\n                <div className=\"space-y-4\">\n                  <Tabs defaultValue=\"login\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n                      <TabsTrigger \n                        value=\"login\" \n                        onClick={() => setIsRegistering(false)}\n                        className=\"text-sm\"\n                      >\n                        Sign In\n                      </TabsTrigger>\n                      <TabsTrigger \n                        value=\"register\" \n                        onClick={() => setIsRegistering(true)}\n                        className=\"text-sm\"\n                      >\n                        Register\n                      </TabsTrigger>\n                    </TabsList>\n                    \n                    <TabsContent value=\"login\" className=\"space-y-4\">\n                      <form onSubmit={handleEmailLogin}>\n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"email\">Email</Label>\n                            <div className=\"relative\">\n                              <FaEnvelope className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                id=\"email\"\n                                type=\"email\"\n                                placeholder=\"your.email@example.com\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                                className=\"pl-10\"\n                                required\n                              />\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between\">\n                              <Label htmlFor=\"password\">Password</Label>\n                              <Button \n                                type=\"button\" \n                                variant=\"link\" \n                                onClick={() => setShowResetPassword(true)}\n                                className=\"p-0 h-auto text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n                              >\n                                Forgot password?\n                              </Button>\n                            </div>\n                            <div className=\"relative\">\n                              <FaLock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                id=\"password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                className=\"pl-10\"\n                                required\n                              />\n                            </div>\n                          </div>\n                          \n                          <motion.div \n                            whileHover={{ scale: 1.02 }}\n                            whileTap={{ scale: 0.98 }}\n                          >\n                            <Button\n                              type=\"submit\"\n                              disabled={signingIn}\n                              className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12\"\n                            >\n                              {signingIn ? (\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              ) : null}\n                              {signingIn ? \"Signing in...\" : \"Sign In\"}\n                            </Button>\n                          </motion.div>\n                        </div>\n                      </form>\n                    </TabsContent>\n                    \n                    <TabsContent value=\"register\" className=\"space-y-4\">\n                      <form onSubmit={handleEmailRegister}>\n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-name\">Full Name</Label>\n                            <div className=\"relative\">\n                              <FaUser className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                id=\"register-name\"\n                                type=\"text\"\n                                placeholder=\"Jane Doe\"\n                                value={displayName}\n                                onChange={(e) => setDisplayName(e.target.value)}\n                                className=\"pl-10\"\n                                required\n                              />\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-email\">Email</Label>\n                            <div className=\"relative\">\n                              <FaEnvelope className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                id=\"register-email\"\n                                type=\"email\"\n                                placeholder=\"your.email@example.com\"\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                                className=\"pl-10\"\n                                required\n                              />\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-password\">Password</Label>\n                            <div className=\"relative\">\n                              <FaLock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                id=\"register-password\"\n                                type=\"password\"\n                                value={password}\n                                onChange={(e) => setPassword(e.target.value)}\n                                className=\"pl-10\"\n                                required\n                              />\n                            </div>\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              Must be at least 6 characters\n                            </p>\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-confirm\">Confirm Password</Label>\n                            <div className=\"relative\">\n                              <FaLock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                id=\"register-confirm\"\n                                type=\"password\"\n                                value={confirmPassword}\n                                onChange={(e) => setConfirmPassword(e.target.value)}\n                                className=\"pl-10\"\n                                required\n                              />\n                            </div>\n                          </div>\n                          \n                          <motion.div \n                            whileHover={{ scale: 1.02 }}\n                            whileTap={{ scale: 0.98 }}\n                          >\n                            <Button\n                              type=\"submit\"\n                              disabled={signingIn}\n                              className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12\"\n                            >\n                              {signingIn ? (\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              ) : null}\n                              {signingIn ? \"Creating Account...\" : \"Create Account\"}\n                            </Button>\n                          </motion.div>\n                        </div>\n                      </form>\n                    </TabsContent>\n                  </Tabs>\n\n                  <div className=\"relative flex items-center justify-center mt-6\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <div className=\"w-full border-t border-gray-300 dark:border-gray-700\"></div>\n                    </div>\n                    <div className=\"relative bg-white dark:bg-slate-800 px-4 text-sm text-gray-500 dark:text-gray-400\">\n                      or\n                    </div>\n                  </div>\n                  \n                  <motion.div \n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={handleGoogleSignIn}\n                      disabled={signingIn}\n                      className=\"w-full bg-white text-gray-700 hover:bg-gray-100 dark:bg-slate-700 dark:text-white dark:hover:bg-slate-600 border border-gray-300 dark:border-slate-600 h-12\"\n                      variant=\"outline\"\n                    >\n                      <FaGoogle className=\"mr-2 h-4 w-4 text-red-500\" />\n                      Sign in with Google\n                    </Button>\n                  </motion.div>\n                  \n                  <Button\n                    variant=\"link\"\n                    onClick={() => setShowEmailForm(false)}\n                    className=\"w-full text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n                  >\n                    Back\n                  </Button>\n                </div>\n              ) : (\n                // Main Login Options\n                <div className=\"space-y-4\">\n                  <motion.div \n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={() => setShowEmailForm(true)}\n                      disabled={signingIn}\n                      className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12\"\n                    >\n                      <FaEnvelope className=\"mr-2 h-4 w-4\" />\n                      Sign in with Email\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div \n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={handleGoogleSignIn}\n                      disabled={signingIn}\n                      className=\"w-full bg-white text-gray-700 hover:bg-gray-100 dark:bg-slate-700 dark:text-white dark:hover:bg-slate-600 border border-gray-300 dark:border-slate-600 h-12\"\n                      variant=\"outline\"\n                    >\n                      {signingIn ? (\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      ) : (\n                        <FaGoogle className=\"mr-2 h-4 w-4 text-red-500\" />\n                      )}\n                      {signingIn ? \"Signing in...\" : \"Sign in with Google\"}\n                    </Button>\n                  </motion.div>\n                  \n                  <div className=\"text-center text-sm text-gray-500 dark:text-gray-400 mt-6\">\n                    By signing in, you agree to our Terms of Service and Privacy Policy\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <Card className=\"border-0 shadow-lg overflow-hidden bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-100/30 to-blue-100/20 dark:from-green-900/20 dark:to-blue-900/10\" />\n            \n            <CardHeader className=\"relative z-10\">\n              <CardTitle>Tell us about your gardening skills</CardTitle>\n              <CardDescription>\n                This helps us tailor recommendations to your experience level\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"relative z-10 space-y-4\">\n              <div className=\"space-y-3\">\n                {EXPERTISE_LEVELS.map((level) => (\n                  <motion.div \n                    key={level.id}\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div\n                      onClick={() => setSelectedExpertise(level.id)}\n                      className={`p-4 rounded-xl cursor-pointer border-2 transition-all ${\n                        selectedExpertise === level.id\n                          ? 'border-green-500 bg-green-50 dark:bg-green-900/20'\n                          : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                      }`}\n                    >\n                      <div className=\"font-medium\">{level.name}</div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {level.description}\n                      </div>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n              \n              <div className=\"pt-4\">\n                <motion.div \n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Button\n                    onClick={handleExpertiseSubmit}\n                    disabled={!selectedExpertise || signingIn}\n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white h-12\"\n                  >\n                    {signingIn ? (\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    ) : null}\n                    {signingIn ? \"Saving...\" : \"Continue\"}\n                  </Button>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </motion.div>\n    </div>\n  );\n}","size_bytes":30792},"client/src/pages/MyPlants.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '@/lib/AuthProvider';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { addUserPlant, UserPlant } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\nimport { Leaf, Plus, Droplet, Calendar, AlertCircle, Check, Loader2, Camera, Upload, Image as ImageIcon, X, Trash2 } from 'lucide-react';\nimport { \n  uploadPlantPhoto, \n  updatePlantData, \n  subscribeSensorData, \n  setWateringActive,\n  SensorData \n} from '@/lib/firebase';\nimport { getDatabase, ref, set } from 'firebase/database';\nimport { analyzePlantPhoto, PlantAnalysisResult, fetchPlantImage } from '@/lib/gemini';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { PlantTypeSelector } from '@/components/PlantTypeSelector';\nimport { PlantTypeInfo } from '@/lib/plantDatabase';\nimport { PlantDetailsDialog } from '@/components/PlantDetailsDialog';\n\nexport default function MyPlants() {\n  const { user, profile, loading, refreshProfile } = useAuth();\n  const { toast } = useToast();\n  const [location, setLocation] = useLocation();\n  const [showAddPlant, setShowAddPlant] = useState(false);\n  const [showPlantTypeSelector, setShowPlantTypeSelector] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [photoDialogOpen, setPhotoDialogOpen] = useState(false);\n  const [plantDetailsOpen, setPlantDetailsOpen] = useState(false);\n  const [selectedPlant, setSelectedPlant] = useState<UserPlant | null>(null);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const [uploadingPhoto, setUploadingPhoto] = useState(false);\n  const [analyzingPhoto, setAnalyzingPhoto] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<PlantAnalysisResult | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const newPlantPhotoRef = useRef<HTMLInputElement>(null);\n  \n  // Add plant form state\n  const [newPlant, setNewPlant] = useState({\n    name: '',\n    species: '',\n    notes: ''\n  });\n  \n  // New plant photo state\n  const [newPlantPhoto, setNewPlantPhoto] = useState<File | null>(null);\n  const [newPlantPhotoPreview, setNewPlantPhotoPreview] = useState<string | null>(null);\n  const [newPlantAnalysisResult, setNewPlantAnalysisResult] = useState<PlantAnalysisResult | null>(null);\n  const [analyzingNewPlantPhoto, setAnalyzingNewPlantPhoto] = useState(false);\n  const [fetchingPlantImage, setFetchingPlantImage] = useState(false);\n  const [autoPlantImageUrl, setAutoPlantImageUrl] = useState<string | null>(null);\n  \n  // Selected plant type from selector\n  const [selectedPlantType, setSelectedPlantType] = useState<PlantTypeInfo | null>(null);\n  const [speciesReferenceImages, setSpeciesReferenceImages] = useState<Record<string, string>>({});\n  \n  // Sensor data from Firebase\n  const [sensorData, setSensorData] = useState<SensorData | null>(null);\n  const [wateringDisabled, setWateringDisabled] = useState(false);\n\n  // Handle authentication state\n  useEffect(() => {\n    // Don't redirect immediately, let the component render the login prompt\n    // This is intentional to provide a better user experience with a message\n  }, [user, loading, setLocation]);\n  \n  // Subscribe to sensor data from Firebase\n  useEffect(() => {\n    const unsubscribe = subscribeSensorData((data) => {\n      setSensorData(data);\n    });\n    \n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  \n  // Load reference images for plants when profile is loaded\n  useEffect(() => {\n    if (profile?.plants && typeof profile.plants === 'object') {\n      const loadSpeciesImages = async () => {\n        // Create array of unique species names from profile.plants (which is an object of plants)\n        const uniqueSpecies: string[] = [];\n        \n        // Safe access to plants with a separate if check to satisfy TypeScript\n        const plantsObj = profile.plants;\n        if (plantsObj) {\n          const plantsList = Object.values(plantsObj);\n          plantsList.forEach((plant: UserPlant) => {\n            if (plant.species && !uniqueSpecies.includes(plant.species)) {\n              uniqueSpecies.push(plant.species);\n            }\n          });\n        }\n        \n        const newReferenceImages: Record<string, string> = {};\n        \n        for (const species of uniqueSpecies) {\n          if (!speciesReferenceImages[species]) {\n            try {\n              const imageUrl = await fetchPlantImage(species);\n              if (imageUrl) {\n                newReferenceImages[species] = imageUrl;\n              }\n            } catch (error) {\n              console.warn(`Could not fetch image for ${species}:`, error);\n            }\n          }\n        }\n        \n        if (Object.keys(newReferenceImages).length > 0) {\n          setSpeciesReferenceImages(prev => ({\n            ...prev,\n            ...newReferenceImages\n          }));\n        }\n      };\n      \n      loadSpeciesImages();\n    }\n  }, [profile?.plants]);\n  \n  // Get days since last watered\n  const getDaysSinceWatered = (lastWatered?: number): string => {\n    if (!lastWatered) return 'Never';\n    \n    const now = Date.now();\n    const diffMs = now - lastWatered;\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) {\n      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n      if (diffHours === 0) {\n        return 'Just now';\n      }\n      return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else {\n      return `${diffDays} days ago`;\n    }\n  };\n  \n  // Get color for health badge\n  const getHealthColor = (health?: string): string => {\n    switch (health?.toLowerCase()) {\n      case 'excellent':\n        return 'bg-green-500 hover:bg-green-600';\n      case 'good':\n        return 'bg-green-400 hover:bg-green-500';\n      case 'fair':\n        return 'bg-yellow-400 hover:bg-yellow-500';\n      case 'poor':\n        return 'bg-red-400 hover:bg-red-500';\n      default:\n        return 'bg-gray-400 hover:bg-gray-500';\n    }\n  };\n  \n  // Handle photo upload\n  const handlePhotoUpload = async () => {\n    if (!photoFile || !selectedPlant || !user) return;\n    \n    setUploadingPhoto(true);\n    \n    try {\n      // Upload the photo to Firebase Storage\n      const downloadUrl = await uploadPlantPhoto(user.uid, selectedPlant.id, photoFile);\n      \n      // Update the plant data with the image URL\n      await updatePlantData(user.uid, selectedPlant.id, {\n        imageUrl: downloadUrl\n      });\n      \n      // Now analyze the photo with Gemini\n      setAnalyzingPhoto(true);\n      \n      // Convert the file to a base64 data URL for Gemini API\n      const reader = new FileReader();\n      reader.readAsDataURL(photoFile);\n      reader.onload = async () => {\n        try {\n          if (typeof reader.result === 'string') {\n            const analysis = await analyzePlantPhoto(reader.result);\n            setAnalysisResult(analysis);\n          }\n        } catch (error) {\n          console.error('Error analyzing plant photo:', error);\n          toast({\n            title: \"Analysis failed\",\n            description: \"We uploaded your photo but couldn't analyze it.\",\n            variant: \"destructive\"\n          });\n        } finally {\n          setAnalyzingPhoto(false);\n        }\n      };\n      \n      reader.onerror = () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to process the image for analysis\",\n          variant: \"destructive\"\n        });\n        setAnalyzingPhoto(false);\n      };\n      \n      // Refresh the profile to show updated data\n      await refreshProfile();\n      \n      toast({\n        title: \"Photo uploaded\",\n        description: \"Your plant photo has been uploaded.\"\n      });\n    } catch (error) {\n      console.error('Error uploading plant photo:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload your plant photo.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploadingPhoto(false);\n    }\n  };\n  \n  // User plants\n  const userPlants = (profile?.plants && typeof profile.plants === 'object')\n    ? Object.values(profile.plants)\n    : [];\n    \n  // Open plant details dialog\n  const openPlantDetails = (plant: UserPlant) => {\n    setSelectedPlant(plant);\n    setPlantDetailsOpen(true);\n  };\n\n  // Handle input change\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setNewPlant(prev => ({ ...prev, [name]: value }));\n  };\n  \n  // Handle plant type selection\n  const handlePlantTypeSelect = (plantType: PlantTypeInfo) => {\n    setSelectedPlantType(plantType);\n    setNewPlant(prev => ({\n      ...prev,\n      species: `${plantType.name} (${plantType.scientificName})`,\n      notes: prev.notes ? prev.notes : `Care instructions:\\n- Light: ${plantType.light} light\\n- Water: ${plantType.water} water needs\\n- Temperature: ${plantType.tempMin}°C to ${plantType.tempMax}°C\\n- Humidity: ${plantType.humidityMin}% to ${plantType.humidityMax}%\\n\\n${plantType.description}`\n    }));\n    \n    // Set auto plant image URL if available from plant type\n    if (plantType.imageUrl) {\n      setAutoPlantImageUrl(plantType.imageUrl);\n    }\n    \n    setShowPlantTypeSelector(false);\n  };\n\n  // Handle add plant\n  const handleAddPlant = async () => {\n    if (!user || !newPlant.name || !newPlant.species) return;\n    \n    setSaving(true);\n    try {\n      const plantId = `plant_${Date.now()}`;\n      const plant: UserPlant = {\n        id: plantId,\n        name: newPlant.name,\n        species: newPlant.species,\n        addedAt: Date.now(),\n        notes: newPlant.notes || undefined,\n        health: 'good'\n      };\n      \n      // First add the plant to the database\n      const success = await addUserPlant(user.uid, plant);\n      \n      if (success) {\n        // If we have a user-provided photo, upload it\n        if (newPlantPhoto) {\n          try {\n            const downloadUrl = await uploadPlantPhoto(user.uid, plantId, newPlantPhoto);\n            \n            // Update the plant with the image URL\n            await updatePlantData(user.uid, plantId, {\n              imageUrl: downloadUrl\n            });\n          } catch (uploadError) {\n            console.error('Error uploading plant photo:', uploadError);\n            // We don't fail the whole operation if just the photo upload fails\n            toast({\n              title: \"Photo upload failed\",\n              description: \"Your plant was added, but we couldn't upload the photo.\",\n              variant: \"destructive\"\n            });\n          }\n        } \n        // If we have an auto-generated image from the API, use that\n        else if (autoPlantImageUrl) {\n          try {\n            // Update the plant with the auto-fetched image URL\n            await updatePlantData(user.uid, plantId, {\n              imageUrl: autoPlantImageUrl\n            });\n          } catch (updateError) {\n            console.error('Error setting auto image URL:', updateError);\n            // We don't fail the operation if just the image setting fails\n          }\n        }\n        \n        await refreshProfile();\n        toast({\n          title: \"Plant added\",\n          description: `${newPlant.name} has been added to your collection`,\n        });\n        \n        // Reset everything\n        setNewPlant({ name: '', species: '', notes: '' });\n        setNewPlantPhoto(null);\n        setNewPlantPhotoPreview(null);\n        setNewPlantAnalysisResult(null);\n        setAutoPlantImageUrl(null);\n        setSelectedPlantType(null);\n        setShowAddPlant(false);\n      } else {\n        toast({\n          title: \"Failed to add plant\",\n          description: \"Please try again later\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      console.error('Error adding plant:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add plant\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n  // Open the photo upload dialog for a specific plant\n  const openPhotoDialog = (plant: UserPlant) => {\n    setSelectedPlant(plant);\n    setPhotoPreview(null);\n    setPhotoFile(null);\n    setAnalysisResult(null);\n    setPhotoDialogOpen(true);\n  };\n  \n  // Handle photo file selection\n  const handlePhotoSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    setPhotoFile(file);\n    \n    // Create a preview URL\n    const previewUrl = URL.createObjectURL(file);\n    setPhotoPreview(previewUrl);\n    \n    // Check if this was a direct capture/upload from the plant card\n    // If we have a selectedPlant, we should automatically process the photo\n    if (selectedPlant && !photoDialogOpen) {\n      try {\n        setUploadingPhoto(true);\n        \n        // Show a toast to indicate the upload is in progress\n        toast({\n          title: \"Uploading photo\",\n          description: \"Please wait while we upload and analyze your plant photo...\",\n        });\n        \n        // Upload the photo to Firebase Storage\n        const downloadUrl = await uploadPlantPhoto(user?.uid as string, selectedPlant.id, file);\n        \n        // Update the plant data with the image URL\n        await updatePlantData(user?.uid as string, selectedPlant.id, {\n          imageUrl: downloadUrl\n        });\n        \n        // Now analyze the photo with Gemini\n        setAnalyzingPhoto(true);\n        \n        // Convert the file to a base64 data URL for Gemini API\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = async () => {\n          try {\n            if (typeof reader.result === 'string') {\n              const analysis = await analyzePlantPhoto(reader.result);\n              \n              // If the confidence is medium or high, update the plant species\n              if (analysis.confidence !== 'low') {\n                await updatePlantData(user?.uid as string, selectedPlant.id, {\n                  species: analysis.species,\n                  notes: selectedPlant.notes \n                    ? `${selectedPlant.notes}\\n\\nAI Analysis: ${analysis.careInstructions}`\n                    : `AI Analysis: ${analysis.careInstructions}`,\n                  health: analysis.healthAssessment.toLowerCase().includes('good') \n                    ? 'good' \n                    : analysis.healthAssessment.toLowerCase().includes('excellent') \n                      ? 'excellent'\n                      : analysis.healthAssessment.toLowerCase().includes('poor')\n                        ? 'poor'\n                        : 'fair'\n                });\n                \n                toast({\n                  title: \"Plant identified\",\n                  description: `Your plant was identified as ${analysis.commonName} (${analysis.species})`,\n                });\n              } else {\n                toast({\n                  title: \"Plant analyzed\",\n                  description: \"We uploaded your photo but couldn't identify the plant with high confidence.\",\n                });\n              }\n              \n              // Refresh the profile to show updated data\n              await refreshProfile();\n            }\n          } catch (error) {\n            console.error('Error analyzing plant photo:', error);\n            toast({\n              title: \"Analysis failed\",\n              description: \"We uploaded your photo but couldn't analyze it. You can try again later.\",\n              variant: \"destructive\"\n            });\n          } finally {\n            setAnalyzingPhoto(false);\n            \n            // Reset file input so user can select the same file again if needed\n            if (fileInputRef.current) {\n              fileInputRef.current.value = '';\n            }\n          }\n        };\n        \n        reader.onerror = () => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to process the image for analysis\",\n            variant: \"destructive\"\n          });\n          setAnalyzingPhoto(false);\n        };\n        \n      } catch (error) {\n        console.error('Error uploading plant photo:', error);\n        toast({\n          title: \"Upload failed\",\n          description: \"Failed to upload your plant photo. Please try again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setUploadingPhoto(false);\n      }\n    }\n  };\n  \n  // Handle new plant photo selection during add plant flow\n  const handleNewPlantPhotoSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    setNewPlantPhoto(file);\n    \n    // Create a preview URL\n    const previewUrl = URL.createObjectURL(file);\n    setNewPlantPhotoPreview(previewUrl);\n    \n    // Analyze the photo to identify the plant\n    setAnalyzingNewPlantPhoto(true);\n    \n    try {\n      // Convert the file to a base64 data URL for Gemini API\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = async () => {\n        try {\n          if (typeof reader.result === 'string') {\n            const analysis = await analyzePlantPhoto(reader.result);\n            setNewPlantAnalysisResult(analysis);\n            \n            // If confidence is medium or high, suggest the species\n            if (analysis.confidence !== 'low') {\n              setNewPlant(prev => ({\n                ...prev,\n                species: analysis.species,\n                notes: prev.notes ? \n                  `${prev.notes}\\n\\nAI Analysis: ${analysis.careInstructions}` \n                  : `AI Analysis: ${analysis.careInstructions}`\n              }));\n              \n              // Try to fetch a real image of the identified plant\n              setFetchingPlantImage(true);\n              const imageUrl = await fetchPlantImage(analysis.commonName);\n              setFetchingPlantImage(false);\n              \n              if (imageUrl) {\n                setAutoPlantImageUrl(imageUrl);\n              }\n              \n              toast({\n                title: \"Plant identified\",\n                description: `Plant identified as ${analysis.commonName}`,\n              });\n            }\n          }\n        } catch (error) {\n          console.error('Error analyzing new plant photo:', error);\n          toast({\n            title: \"Analysis failed\",\n            description: \"We couldn't analyze your plant photo. Please try again.\",\n            variant: \"destructive\"\n          });\n        } finally {\n          setAnalyzingNewPlantPhoto(false);\n        }\n      };\n      \n      reader.onerror = () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to process the image for analysis\",\n          variant: \"destructive\"\n        });\n        setAnalyzingNewPlantPhoto(false);\n      };\n    } catch (error) {\n      console.error('Error analyzing plant photo:', error);\n      toast({\n        title: \"Analysis failed\",\n        description: \"We couldn't analyze your plant photo. Please try again.\",\n        variant: \"destructive\"\n      });\n      setAnalyzingNewPlantPhoto(false);\n    }\n  };\n\n  // Handle login prompt\n  const handleLoginPrompt = () => {\n    setLocation('/auth');\n  };\n\n  // If user is not logged in, show a prompt to log in\n  if (!loading && !user) {\n    return (\n      <div className=\"min-h-screen font-sans transition-colors duration-300 ease-out bg-gradient-to-br from-slate-50 to-white text-slate-900 dark:from-slate-900 dark:to-slate-800 dark:text-white flex items-center justify-center\">\n        <Card className=\"max-w-md w-full mx-4\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-bold\">Login Required</CardTitle>\n            <CardDescription>\n              You need to be logged in to view and manage your plants\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"h-24 w-24 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-4\">\n                  <Leaf className=\"h-12 w-12 text-green-500 dark:text-green-400\" />\n                </div>\n              </div>\n              <p className=\"text-center\">\n                Please log in to access your plant collection and monitoring tools\n              </p>\n              <Button \n                className=\"w-full bg-green-600 hover:bg-green-700 mt-4\"\n                onClick={handleLoginPrompt}\n              >\n                Go to Login\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen font-sans transition-colors duration-300 ease-out bg-black text-white\">\n      {/* Hidden file input for direct photo upload from plant cards */}\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        className=\"hidden\"\n        accept=\"image/*\"\n        capture=\"environment\"\n        onChange={handlePhotoSelect}\n      />\n      \n      <main className=\"container mx-auto px-4 py-6 md:py-10 pb-24\">\n        <motion.div\n          initial={{ opacity: 0, y: 15 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex flex-col justify-center items-center gap-4 mb-6\">\n            <motion.div \n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5 }}\n              className=\"text-center\"\n            >\n              <h1 className=\"text-3xl font-bold mb-2 text-white\">My Plants</h1>\n              <div className=\"h-1 w-16 bg-primary rounded-full mx-auto mt-2 mb-4\"></div>\n            </motion.div>\n            \n            <Dialog open={showAddPlant} onOpenChange={setShowAddPlant}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary hover:bg-primary/90 text-black font-medium\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Plant\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[425px]\">\n                <DialogHeader>\n                  <DialogTitle>Add a new plant</DialogTitle>\n                  <DialogDescription>\n                    Enter the details of your plant to add it to your collection\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"name\">Plant Name</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"E.g., Living Room Fern\"\n                      value={newPlant.name}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"species\">Plant Species</Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"species\"\n                        name=\"species\"\n                        placeholder=\"E.g., Boston Fern\"\n                        value={newPlant.species}\n                        onChange={handleInputChange}\n                        className=\"flex-1\"\n                      />\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setShowPlantTypeSelector(true)}\n                        className=\"whitespace-nowrap\"\n                      >\n                        Choose Type\n                      </Button>\n                    </div>\n                    {selectedPlantType && (\n                      <div className=\"text-sm text-gray-500 mt-1 flex items-center\">\n                        <Leaf className=\"h-3 w-3 mr-1 text-green-500\" />\n                        Selected: {selectedPlantType.name} ({selectedPlantType.scientificName})\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"photo\">Plant Photo</Label>\n                    {newPlantPhotoPreview ? (\n                      <div className=\"relative w-full h-48 rounded-md overflow-hidden\">\n                        <img \n                          src={newPlantPhotoPreview} \n                          alt=\"Plant preview\" \n                          className=\"w-full h-full object-cover\"\n                        />\n                        {newPlantAnalysisResult && (\n                          <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white p-2 text-sm\">\n                            <p>Detected: {newPlantAnalysisResult.commonName}</p>\n                          </div>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"absolute top-2 right-2 bg-white dark:bg-black bg-opacity-70 dark:bg-opacity-70\"\n                          onClick={() => {\n                            setNewPlantPhotoPreview(null);\n                            setNewPlantPhoto(null);\n                            setNewPlantAnalysisResult(null);\n                            if (newPlantPhotoRef.current) {\n                              newPlantPhotoRef.current.value = '';\n                            }\n                          }}\n                        >\n                          Change\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-4 text-center hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\">\n                        <div className=\"flex flex-col items-center justify-center space-y-2\">\n                          <div className=\"flex space-x-4\">\n                            <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => newPlantPhotoRef.current?.click()}>\n                              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-1\">\n                                <Upload className=\"h-6 w-6 text-green-500\" />\n                              </div>\n                              <span className=\"text-xs font-medium\">Upload</span>\n                            </div>\n                            \n                            <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => {\n                              if (newPlantPhotoRef.current) {\n                                newPlantPhotoRef.current.capture = \"environment\";\n                                newPlantPhotoRef.current.click();\n                              }\n                            }}>\n                              <div className=\"w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-1\">\n                                <Camera className=\"h-6 w-6 text-blue-500\" />\n                              </div>\n                              <span className=\"text-xs font-medium\">Camera</span>\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                            Upload or take a photo for AI identification\n                          </p>\n                        </div>\n                        <input\n                          type=\"file\"\n                          ref={newPlantPhotoRef}\n                          className=\"hidden\"\n                          accept=\"image/*\"\n                          capture=\"environment\"\n                          onChange={handleNewPlantPhotoSelect}\n                        />\n                      </div>\n                    )}\n                    {analyzingNewPlantPhoto && (\n                      <div className=\"flex items-center justify-center py-2 text-sm text-gray-500\">\n                        <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                        Analyzing photo...\n                      </div>\n                    )}\n                    {autoPlantImageUrl && (\n                      <div className=\"flex items-center justify-between mt-1 bg-green-50 dark:bg-green-900/20 px-2 py-1 rounded-md\">\n                        <span className=\"text-xs text-green-700 dark:text-green-400\">Reference image added from plant database</span>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\" \n                          onClick={() => setAutoPlantImageUrl(null)}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                    <Input\n                      id=\"notes\"\n                      name=\"notes\"\n                      placeholder=\"Any special care instructions?\"\n                      value={newPlant.notes}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setShowAddPlant(false)}>\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleAddPlant}\n                    disabled={!newPlant.name || !newPlant.species || saving}\n                    className=\"bg-primary hover:bg-primary/90 text-black font-medium\"\n                  >\n                    {saving ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                    {saving ? \"Saving...\" : \"Add Plant\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n          \n          {userPlants.length === 0 ? (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, ease: [0.23, 1, 0.32, 1] }}\n              className=\"w-full max-w-md mx-auto\"\n            >\n              <Card \n                className=\"fitness-card border-amber-100/40 dark:border-neutral-700 overflow-hidden bg-amber-50/40 dark:bg-[#151918]/70\"\n                style={{ \n                  boxShadow: \"0 10px 30px rgba(0, 0, 0, 0.4)\",\n                }}\n              >\n                <div className=\"h-1 bg-primary\" />\n                <CardContent className=\"p-10 flex flex-col items-center justify-center text-center\">\n                  <motion.div \n                    className=\"w-24 h-24 rounded-full bg-neutral-800 flex items-center justify-center mb-6 border border-neutral-700\"\n                    initial={{ scale: 0.5, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ delay: 0.2, duration: 0.5, type: \"spring\" }}\n                  >\n                    <Leaf className=\"h-12 w-12 text-primary\" />\n                  </motion.div>\n                  \n                  <motion.h3 \n                    className=\"text-2xl font-semibold mb-3 tracking-tight sf-pro-display\"\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.3, duration: 0.5 }}\n                  >\n                    Your Plant Collection\n                  </motion.h3>\n                  \n                  <motion.p \n                    className=\"text-gray-500 dark:text-gray-400 mb-6 max-w-sm leading-relaxed sf-pro-display\"\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.4, duration: 0.5 }}\n                  >\n                    Add your first plant to start monitoring its health and get personalized care recommendations through our AI-powered system.\n                  </motion.p>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ delay: 0.5, duration: 0.4 }}\n                  >\n                    <Button\n                      onClick={() => setShowAddPlant(true)}\n                      className=\"bg-primary hover:bg-primary/90 text-black border-0 shadow-lg px-6 py-6 h-auto transition-all duration-300\"\n                      size=\"lg\"\n                    >\n                      <Plus className=\"mr-2 h-5 w-5\" />\n                      <span className=\"font-medium\">Add Your First Plant</span>\n                    </Button>\n                  </motion.div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ) : (\n            <div className=\"flex justify-center\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-5xl mx-auto\">\n                {userPlants.map((plant) => (\n                  <motion.div\n                    key={plant.id}\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    whileHover={{ \n                      scale: 1.03,\n                      boxShadow: \"0 15px 35px rgba(0, 150, 136, 0.15), 0 5px 15px rgba(0, 0, 0, 0.05)\",\n                      y: -5\n                    }}\n                    transition={{ duration: 0.4, ease: [0.19, 1.0, 0.22, 1.0] }}\n                    className=\"w-full aspect-[0.8]\"\n                  >\n                    <Card \n                      className=\"overflow-hidden fitness-card cursor-pointer group w-full h-full flex flex-col border-amber-100/40 dark:border-neutral-700 shadow-lg bg-amber-50/40 dark:bg-[#151918]/80\"\n                      onClick={() => openPlantDetails(plant)}\n                    >\n                      {plant.imageUrl ? (\n                        <div className=\"w-full h-3/5 overflow-hidden relative\">\n                          <img \n                            src={plant.imageUrl} \n                            alt={plant.name} \n                            className=\"w-full h-full object-cover transition-all duration-700 group-hover:scale-110 transform-gpu\" \n                          />\n                          <div \n                            className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-50 group-hover:opacity-70 transition-opacity duration-300\"\n                          />\n                          <div className=\"absolute bottom-4 left-4 right-4\">\n                            <h3 className=\"font-bold text-xl text-white drop-shadow-md mb-1 truncate\">{plant.name}</h3>\n                            <p className=\"text-white/90 text-sm truncate drop-shadow-md\">{plant.species}</p>\n                          </div>\n                          <div className=\"absolute top-3 right-3 bg-white/85 dark:bg-slate-800/85 backdrop-blur-md px-3 py-1 rounded-full text-xs font-semibold shadow-md border border-white/10 dark:border-slate-700/10\">\n                            {plant.health === 'excellent' ? '⭐ Excellent' : \n                             plant.health === 'good' ? '✓ Good' : \n                             plant.health === 'fair' ? '⚠️ Fair' : '⚠️ Poor'}\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"w-full h-3/5 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 flex flex-col items-center justify-center relative overflow-hidden\">\n                          {speciesReferenceImages[plant.species] ? (\n                            <div className=\"relative w-full h-full\">\n                              <img \n                                src={speciesReferenceImages[plant.species]} \n                                alt={plant.species} \n                                className=\"w-full h-full object-cover opacity-70 transition-all duration-700 group-hover:scale-110 group-hover:opacity-75\"\n                              />\n                              <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 to-black/20 flex flex-col items-center justify-center backdrop-blur-[1px]\">\n                                <div className=\"px-3 py-1.5 bg-black/60 rounded-lg mb-2 backdrop-blur-sm text-center\">\n                                  <p className=\"text-white text-sm font-medium\">Reference Image</p>\n                                </div>\n                                <div className=\"px-3 py-1.5 bg-green-600/70 rounded-lg backdrop-blur-sm\">\n                                  <p className=\"text-white text-xs font-medium\">Upload your own photo</p>\n                                </div>\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"flex flex-col items-center justify-center text-center px-4 h-full\">\n                              <div className=\"w-16 h-16 rounded-full bg-gray-200/70 dark:bg-gray-700/70 backdrop-blur-sm flex items-center justify-center mb-3 shadow-inner\">\n                                <Camera className=\"h-8 w-8 text-gray-500 dark:text-gray-400\" />\n                              </div>\n                              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-300 mb-1\">No image yet</p>\n                              <p className=\"text-xs text-gray-500 dark:text-gray-400\">Upload a photo to track your plant's growth</p>\n                            </div>\n                          )}\n                          \n                          <div className=\"absolute bottom-3 left-0 right-0 flex justify-center gap-3\">\n                            <Button \n                              size=\"sm\"\n                              variant=\"outline\" \n                              className=\"bg-white/90 dark:bg-slate-800/90\"\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent opening details\n                                if (fileInputRef.current) {\n                                  setSelectedPlant(plant);\n                                  fileInputRef.current.removeAttribute('capture');\n                                  fileInputRef.current.click();\n                                }\n                              }}\n                            >\n                              <Upload className=\"h-3.5 w-3.5 mr-1\" />\n                              Gallery\n                            </Button>\n                            <Button \n                              size=\"sm\"\n                              variant=\"outline\" \n                              className=\"bg-white/90 dark:bg-slate-800/90\"\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent opening details\n                                if (fileInputRef.current) {\n                                  setSelectedPlant(plant);\n                                  fileInputRef.current.setAttribute('capture', 'environment');\n                                  fileInputRef.current.click();\n                                }\n                              }}\n                            >\n                              <Camera className=\"h-3.5 w-3.5 mr-1\" />\n                              Camera\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                      <CardHeader className=\"p-4 pb-2\">\n                        <div className=\"flex justify-between items-start\">\n                          <CardTitle className=\"text-xl font-semibold text-gray-800 dark:text-white\">{plant.name}</CardTitle>\n                          <Badge className={getHealthColor(plant.health)}>\n                            {plant.health || 'Unknown'}\n                          </Badge>\n                        </div>\n                        <CardDescription className=\"text-gray-600 dark:text-gray-300\">{plant.species}</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"p-4 pt-0\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center text-sm text-gray-700 dark:text-gray-300\">\n                            <Calendar className=\"h-4 w-4 mr-2 text-emerald-600 dark:text-emerald-400\" />\n                            <span>Added {new Date(plant.addedAt).toLocaleDateString()}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center text-sm text-gray-700 dark:text-gray-300\">\n                            <Droplet className=\"h-4 w-4 mr-2 text-blue-600 dark:text-blue-400\" />\n                            <span>Last watered: {getDaysSinceWatered(plant.lastWatered)}</span>\n                          </div>\n                          \n                          {plant.notes && (\n                            <div \n                              className=\"bg-amber-50/70 dark:bg-emerald-900/20 p-3 rounded-md text-sm mt-3 cursor-pointer relative overflow-hidden border border-amber-100/60 dark:border-emerald-800/30 shadow-sm\" \n                              style={{ maxHeight: '60px' }}\n                              onClick={(e) => {\n                                const target = e.currentTarget;\n                                if (target.style.maxHeight === '60px') {\n                                  target.style.maxHeight = '1000px';\n                                } else {\n                                  target.style.maxHeight = '60px';\n                                }\n                              }}\n                            >\n                              <div className=\"relative text-gray-700 dark:text-gray-200\">\n                                {plant.notes}\n                                <div className=\"absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-amber-50/70 to-transparent dark:from-emerald-900/20\"></div>\n                              </div>\n                              <div className=\"flex justify-center mt-1\">\n                                <span className=\"text-xs text-amber-600 dark:text-emerald-400 font-medium\">Click to expand</span>\n                              </div>\n                            </div>\n                          )}\n                          \n                          <div className=\"pt-2 flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"flex-1 bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100 hover:text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-800/50 dark:hover:bg-blue-800/50 shadow-sm\"\n                              disabled={wateringDisabled}\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent opening details modal\n                                \n                                // First, activate the watering system in Firebase\n                                if (user && plant) {\n                                  setWateringDisabled(true);\n                                  \n                                  // Activate the watering system\n                                  setWateringActive(true)\n                                    .then(() => {\n                                      toast({\n                                        title: \"Watering...\",\n                                        description: `Watering system activated for ${plant.name}.`\n                                      });\n                                      \n                                      // After 3 seconds, turn off the watering system\n                                      setTimeout(() => {\n                                        setWateringActive(false)\n                                          .then(() => {\n                                            console.log('Watering system deactivated');\n                                            \n                                            // Now update the plant's last watered timestamp\n                                            return updatePlantData(user.uid, plant.id, {\n                                              lastWatered: Date.now()\n                                            });\n                                          })\n                                          .then(() => {\n                                            refreshProfile();\n                                            toast({\n                                              title: \"Plant watered\",\n                                              description: `${plant.name} has been marked as watered.`\n                                            });\n                                            \n                                            // Add a cooldown to prevent button spamming\n                                            setTimeout(() => {\n                                              setWateringDisabled(false);\n                                            }, 5000);\n                                          })\n                                          .catch((error) => {\n                                            console.error('Error updating plant watering status:', error);\n                                            setWateringDisabled(false);\n                                          });\n                                      }, 3000);\n                                    })\n                                    .catch((error) => {\n                                      console.error('Error activating watering system:', error);\n                                      toast({\n                                        title: \"Error\",\n                                        description: \"Couldn't activate watering system. Please try again.\",\n                                        variant: \"destructive\"\n                                      });\n                                      setWateringDisabled(false);\n                                    });\n                                }\n                              }}\n                            >\n                              {wateringDisabled ? (\n                                <Loader2 className=\"h-3.5 w-3.5 mr-1 animate-spin\" />\n                              ) : (\n                                <Droplet className=\"h-3.5 w-3.5 mr-1\" />\n                              )}\n                              Water\n                            </Button>\n                            \n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"flex-1 bg-emerald-50 text-emerald-700 border-emerald-200 hover:bg-emerald-100 hover:text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300 dark:border-emerald-800/50 dark:hover:bg-emerald-800/50 shadow-sm\"\n                              onClick={(e) => {\n                                e.stopPropagation(); // Prevent opening details modal\n                                openPhotoDialog(plant);\n                              }}\n                            >\n                              <Camera className=\"h-3.5 w-3.5 mr-1\" />\n                              Photo\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n          )}\n        </motion.div>\n      </main>\n      \n      {/* Plant Type Selector Dialog */}\n      <Dialog open={showPlantTypeSelector} onOpenChange={setShowPlantTypeSelector}>\n        <DialogContent className=\"sm:max-w-[80vw] md:max-w-[700px] p-0\">\n          <PlantTypeSelector \n            onSelect={handlePlantTypeSelect}\n            onClose={() => setShowPlantTypeSelector(false)}\n          />\n        </DialogContent>\n      </Dialog>\n      \n      {/* Plant Photo Upload Dialog */}\n      <Dialog open={photoDialogOpen} onOpenChange={setPhotoDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Upload Plant Photo</DialogTitle>\n            <DialogDescription>\n              Upload a photo of your plant for identification and care advice\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Tabs defaultValue=\"upload\" className=\"mt-4\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"upload\">Upload Photo</TabsTrigger>\n              <TabsTrigger value=\"result\" disabled={!analysisResult}>Analysis Result</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"upload\" className=\"mt-4 space-y-4\">\n              {photoPreview ? (\n                <div className=\"relative w-full h-64 rounded-md overflow-hidden\">\n                  <img \n                    src={photoPreview} \n                    alt=\"Plant preview\" \n                    className=\"w-full h-full object-cover\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2 bg-white dark:bg-black bg-opacity-70 dark:bg-opacity-70\"\n                    onClick={() => {\n                      setPhotoPreview(null);\n                      setPhotoFile(null);\n                      if (fileInputRef.current) {\n                        fileInputRef.current.value = '';\n                      }\n                    }}\n                  >\n                    Change\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\">\n                  <div className=\"flex flex-col items-center justify-center space-y-3\">\n                    <div className=\"flex space-x-4\">\n                      <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => fileInputRef.current?.click()}>\n                        <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-2\">\n                          <Upload className=\"h-8 w-8 text-green-500\" />\n                        </div>\n                        <span className=\"text-sm font-medium\">Upload</span>\n                      </div>\n                      \n                      <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => {\n                        if (fileInputRef.current) {\n                          fileInputRef.current.capture = \"environment\";\n                          fileInputRef.current.click();\n                        }\n                      }}>\n                        <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-2\">\n                          <Camera className=\"h-8 w-8 text-blue-500\" />\n                        </div>\n                        <span className=\"text-sm font-medium\">Camera</span>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-4\">\n                      Upload or take a photo of your plant for AI analysis\n                    </p>\n                  </div>\n                  {/* File input is now located in the main component */}\n                </div>\n              )}\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setPhotoDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handlePhotoUpload}\n                  disabled={!photoFile || uploadingPhoto || analyzingPhoto}\n                  className=\"bg-green-600 hover:bg-green-700 relative\"\n                >\n                  {(uploadingPhoto || analyzingPhoto) && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  {uploadingPhoto \n                    ? \"Uploading...\" \n                    : analyzingPhoto \n                      ? \"Analyzing...\" \n                      : \"Upload & Analyze\"\n                  }\n                </Button>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"result\" className=\"mt-4 space-y-4\">\n              {analysisResult && (\n                <div className=\"space-y-4\">\n                  <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-md\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Badge className={\n                        analysisResult.confidence === 'high' \n                          ? 'bg-green-500' \n                          : analysisResult.confidence === 'medium' \n                            ? 'bg-yellow-500' \n                            : 'bg-red-500'\n                      }>\n                        {analysisResult.confidence.charAt(0).toUpperCase() + analysisResult.confidence.slice(1)} confidence\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid gap-3\">\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Species</h4>\n                        <p className=\"text-lg font-medium\">{analysisResult.species}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Common Name</h4>\n                        <p className=\"text-lg font-medium\">{analysisResult.commonName}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Health Assessment</h4>\n                        <p className=\"text-lg font-medium\">{analysisResult.healthAssessment}</p>\n                      </div>\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Care Instructions</h4>\n                        <p className=\"text-md\">{analysisResult.careInstructions}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setPhotoDialogOpen(false)}\n                    >\n                      Close\n                    </Button>\n                    {analysisResult.confidence !== 'low' && selectedPlant && (\n                      <Button\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        onClick={async () => {\n                          if (!user || !selectedPlant) return;\n                          \n                          try {\n                            await updatePlantData(user.uid, selectedPlant.id, {\n                              species: analysisResult.species,\n                              notes: selectedPlant.notes \n                                ? `${selectedPlant.notes}\\n\\nAI Analysis: ${analysisResult.careInstructions}` \n                                : `AI Analysis: ${analysisResult.careInstructions}`\n                            });\n                            \n                            toast({\n                              title: \"Plant updated\",\n                              description: \"Your plant information has been updated with the analysis results.\"\n                            });\n                            \n                            await refreshProfile();\n                            setPhotoDialogOpen(false);\n                          } catch (error) {\n                            console.error('Error updating plant:', error);\n                            toast({\n                              title: \"Update failed\",\n                              description: \"Failed to update plant information.\",\n                              variant: \"destructive\"\n                            });\n                          }\n                        }}\n                      >\n                        <Check className=\"mr-2 h-4 w-4\" />\n                        Apply Changes\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Plant Details Dialog with Growth Timeline */}\n      <PlantDetailsDialog \n        plant={selectedPlant} \n        open={plantDetailsOpen} \n        onOpenChange={setPlantDetailsOpen}\n        onDeletePlant={async (plantId) => {\n          if (!user) return false;\n          \n          try {\n            // Remove plant from user profile\n            const db = getDatabase();\n            const plantRef = ref(db, `users/${user.uid}/plants/${plantId}`);\n            await set(plantRef, null);\n            \n            // Refresh profile\n            await refreshProfile();\n            return true;\n          } catch (error) {\n            console.error('Error deleting plant:', error);\n            return false;\n          }\n        }}\n      />\n    </div>\n  );\n}","size_bytes":58734},"client/src/pages/PlantChat.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Loader2, Send, Flower2, Image as ImageIcon, Camera } from 'lucide-react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\nimport { PlantChatMessage } from '@/components/PlantChatMessage';\nimport { ChatMessage, sendMessage, startChatSession, analyzePlantPhoto } from '@/lib/gemini';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\nexport default function PlantChat() {\n  const { toast } = useToast();\n  const [userMessage, setUserMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [chatSession, setChatSession] = useState<{messages: ChatMessage[]} | null>(null);\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    { role: 'model', content: \"I'm ready to help with your plant care and gardening questions. What would you like to know about today?\" }\n  ]);\n  const [showPhotoDialog, setShowPhotoDialog] = useState(false);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const [analyzingPhoto, setAnalyzingPhoto] = useState(false);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // Initialize chat session\n  useEffect(() => {\n    async function initChat() {\n      try {\n        const session = await startChatSession();\n        setChatSession(session);\n      } catch (error) {\n        console.error('Error initializing chat:', error);\n        toast({\n          title: \"Connection Error\",\n          description: \"Couldn't connect to the plant advisor. Please check if your Gemini API key is set correctly.\",\n          variant: \"destructive\"\n        });\n      }\n    }\n    \n    initChat();\n  }, [toast]);\n  \n  // Scroll to bottom on new messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n  \n  // Handle photo selection\n  const handlePhotoSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) return;\n    \n    const file = e.target.files[0];\n    setPhotoFile(file);\n    \n    // Create a preview URL\n    const previewUrl = URL.createObjectURL(file);\n    setPhotoPreview(previewUrl);\n  };\n  \n  // Handle photo upload and analysis\n  const handlePhotoAnalysis = async () => {\n    if (!photoFile || !chatSession) return;\n    \n    setAnalyzingPhoto(true);\n    setShowPhotoDialog(false);\n    \n    // Add a message about the image analysis\n    const userImageMessage: ChatMessage = { \n      role: 'user', \n      content: 'I\\'m uploading a photo of my plant for analysis. Can you tell me what type of plant this is and provide care instructions?' \n    };\n    setMessages(prev => [...prev, userImageMessage]);\n    \n    // Show loading indicator\n    setIsLoading(true);\n    \n    try {\n      // Convert image to base64 for Gemini\n      const reader = new FileReader();\n      reader.readAsDataURL(photoFile);\n      \n      reader.onload = async () => {\n        if (typeof reader.result === 'string') {\n          // Analyze the photo\n          const analysis = await analyzePlantPhoto(reader.result);\n          \n          // Create response\n          const responseContent = `\nBased on the photo you shared, this appears to be a **${analysis.commonName}** (${analysis.species}).\n\n**Health Assessment**: ${analysis.healthAssessment}\n\n**Care Instructions**:\n${analysis.careInstructions}\n\nWould you like any specific information about this plant?\n          `.trim();\n          \n          // Add bot response\n          const botMessage: ChatMessage = { role: 'model', content: responseContent };\n          setMessages(prev => [...prev, botMessage]);\n          \n          // Clean up\n          URL.revokeObjectURL(photoPreview!);\n          setPhotoFile(null);\n          setPhotoPreview(null);\n        }\n      };\n      \n      reader.onerror = () => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to process your plant photo\",\n          variant: \"destructive\"\n        });\n        setIsLoading(false);\n        setAnalyzingPhoto(false);\n      };\n      \n    } catch (error) {\n      console.error('Error analyzing plant photo:', error);\n      toast({\n        title: \"Analysis failed\",\n        description: \"We couldn't analyze your plant photo. Please try again.\",\n        variant: \"destructive\"\n      });\n      setIsLoading(false);\n      setAnalyzingPhoto(false);\n    }\n  };\n  \n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!userMessage.trim() || isLoading || !chatSession) return;\n    \n    // Add user message to chat\n    const newUserMessage: ChatMessage = { role: 'user', content: userMessage };\n    setMessages(prev => [...prev, newUserMessage]);\n    \n    // Clear input and focus\n    setUserMessage('');\n    setTimeout(() => inputRef.current?.focus(), 0);\n    \n    // Add loading indicator\n    setIsLoading(true);\n    \n    try {\n      // Get response from Gemini\n      const response = await sendMessage(chatSession, userMessage);\n      \n      // Add bot response\n      const botMessage: ChatMessage = { role: 'model', content: response };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Failed to get response:', error);\n      toast({\n        title: \"Sorry, something went wrong\",\n        description: \"I couldn't process your request. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-white dark:from-slate-900 dark:to-slate-800 text-slate-900 dark:text-white font-sans transition-colors duration-200 ease-in-out\">\n        <main className=\"container px-4 py-10 md:py-16 mx-auto\">\n          <div className=\"flex justify-center\">\n            <div className=\"text-center mb-6\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Flower2 className=\"h-7 w-7 text-green-600\" />\n                <h1 className=\"text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-green-600 to-emerald-500 dark:from-green-400 dark:to-emerald-300\">Plant Care Assistant</h1>\n              </div>\n              <div className=\"h-1 w-16 bg-gradient-to-r from-green-500 to-emerald-400 rounded-full mx-auto mb-2\"></div>\n              <p className=\"text-gray-500 dark:text-gray-400 max-w-lg mx-auto\">\n                Your personal AI plant expert. Ask questions about plant care, gardening, and agricultural tips\n              </p>\n            </div>\n          </div>\n          \n          <Card className=\"mx-auto max-w-3xl border-0 shadow-lg bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm rounded-xl overflow-hidden\"\n                style={{\n                  boxShadow: \"0 10px 25px -5px rgba(0, 0, 0, 0.05), 0 8px 10px -6px rgba(0, 0, 0, 0.05)\"\n                }}>\n            \n            <CardContent className=\"p-0\">\n              {/* Chat Messages Area */}\n              <ScrollArea className=\"h-[450px] p-4\">\n                <div className=\"flex flex-col gap-4\">\n                  {messages.map((message, index) => (\n                    <PlantChatMessage \n                      key={index} \n                      message={message} \n                    />\n                  ))}\n                  \n                  {isLoading && (\n                    <PlantChatMessage \n                      message={{ role: 'model', content: '' }}\n                      isLoading={true}\n                    />\n                  )}\n                  \n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n              \n              {/* Input Area */}\n              <div className=\"border-t dark:border-slate-700 p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-gray-500 dark:text-gray-400 border-gray-200 dark:border-gray-700\"\n                    onClick={() => setShowPhotoDialog(true)}\n                    disabled={isLoading || !chatSession}\n                  >\n                    <ImageIcon className=\"h-4 w-4 mr-1\" />\n                    <span className=\"hidden sm:inline\">Upload</span> Photo\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"text-gray-500 dark:text-gray-400 border-gray-200 dark:border-gray-700\"\n                    onClick={() => {\n                      if (fileInputRef.current) {\n                        fileInputRef.current.capture = \"environment\";\n                        fileInputRef.current.click();\n                        setShowPhotoDialog(true);\n                      }\n                    }}\n                    disabled={isLoading || !chatSession}\n                  >\n                    <Camera className=\"h-4 w-4 mr-1\" />\n                    <span className=\"hidden sm:inline\">Take</span> Photo\n                  </Button>\n                  <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    className=\"hidden\"\n                    accept=\"image/*\"\n                    onChange={handlePhotoSelect}\n                  />\n                </div>\n                \n                <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n                  <Input\n                    ref={inputRef}\n                    value={userMessage}\n                    onChange={(e) => setUserMessage(e.target.value)}\n                    placeholder=\"Ask about plants, gardening, or crop management...\"\n                    disabled={isLoading || !chatSession}\n                    className=\"flex-1\"\n                    autoComplete=\"off\"\n                  />\n                  <Button \n                    type=\"submit\" \n                    disabled={isLoading || !userMessage.trim() || !chatSession}\n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    {isLoading ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      <Send className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </form>\n                {!import.meta.env.VITE_GEMINI_API_KEY && (\n                  <div className=\"mt-2 text-sm text-amber-600 dark:text-amber-400 flex items-center\">\n                    <div className=\"bg-amber-100 dark:bg-amber-900/30 rounded-md p-2 w-full text-center\">\n                      Please provide a Gemini API key to use the Plant Care Assistant.\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n        \n        <footer className=\"mt-8 border-t border-gray-200 dark:border-gray-700 py-4\">\n          <div className=\"container mx-auto px-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n            Smart Plant Monitoring System © {new Date().getFullYear()}\n          </div>\n        </footer>\n      </div>\n\n      {/* Photo Upload Dialog */}\n      <Dialog open={showPhotoDialog} onOpenChange={setShowPhotoDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Upload Plant Photo</DialogTitle>\n            <DialogDescription>\n              Upload a photo of your plant for identification and care advice\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 my-4\">\n            {photoPreview ? (\n              <div className=\"relative w-full h-64 rounded-md overflow-hidden\">\n                <img \n                  src={photoPreview || ''} \n                  alt=\"Plant preview\" \n                  className=\"w-full h-full object-cover\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"absolute top-2 right-2 bg-white dark:bg-black bg-opacity-70 dark:bg-opacity-70\"\n                  onClick={() => {\n                    setPhotoPreview(null);\n                    setPhotoFile(null);\n                    if (fileInputRef.current) {\n                      fileInputRef.current.value = '';\n                    }\n                  }}\n                >\n                  Change\n                </Button>\n              </div>\n            ) : (\n              <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\">\n                <div className=\"flex flex-col items-center justify-center space-y-3\">\n                  <div className=\"flex space-x-4\">\n                    <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => fileInputRef.current?.click()}>\n                      <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-2\">\n                        <ImageIcon className=\"h-8 w-8 text-green-500\" />\n                      </div>\n                      <span className=\"text-sm font-medium\">Gallery</span>\n                    </div>\n                    \n                    <div className=\"flex flex-col items-center cursor-pointer\" onClick={() => {\n                      if (fileInputRef.current) {\n                        fileInputRef.current.capture = \"environment\";\n                        fileInputRef.current.click();\n                      }\n                    }}>\n                      <div className=\"w-16 h-16 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center mb-2\">\n                        <Camera className=\"h-8 w-8 text-blue-500\" />\n                      </div>\n                      <span className=\"text-sm font-medium\">Camera</span>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-4\">\n                    Upload or take a photo of your plant for AI analysis\n                  </p>\n                </div>\n              </div>\n            )}\n            \n            <div className=\"flex justify-end gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowPhotoDialog(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handlePhotoAnalysis}\n                disabled={!photoFile || analyzingPhoto}\n                className=\"bg-green-600 hover:bg-green-700 relative\"\n              >\n                {analyzingPhoto && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                {analyzingPhoto ? \"Analyzing...\" : \"Analyze Plant\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":15417},"client/src/pages/Settings.tsx":{"content":"import { useState } from 'react';\nimport { Header } from '@/components/Header';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { PlantConfig, PlantConfigValues } from '@/components/PlantConfig';\nimport { NotificationSettings, NotificationSettingsValues } from '@/components/NotificationSettings';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, ArrowLeft, CloudUpload, Loader2 } from 'lucide-react';\nimport { useTheme } from '@/lib/ThemeProvider';\nimport { useLocation } from 'wouter';\nimport { motion } from 'framer-motion';\nimport { downloadPlantTypesImages } from '@/lib/firebase';\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { theme, toggleTheme } = useTheme();\n  const [location, setLocation] = useLocation();\n  const [caching, setCaching] = useState(false);\n  \n  // Handle plant config save\n  const handleSaveConfig = (config: PlantConfigValues) => {\n    toast({\n      title: \"Plant configuration saved\",\n      description: \"Your plant settings have been updated successfully\"\n    });\n  };\n  \n  // Handle notification settings save\n  const handleSaveNotifications = (settings: NotificationSettingsValues) => {\n    toast({\n      title: \"Notification settings saved\",\n      description: \"Your notification preferences have been updated\"\n    });\n  };\n  \n  // Handle caching plant images to Firebase Storage\n  const handleCacheImages = async () => {\n    try {\n      setCaching(true);\n      toast({\n        title: \"Caching plant images\",\n        description: \"Downloading plant images to Firebase Storage for faster loading...\",\n      });\n      \n      await downloadPlantTypesImages();\n      \n      toast({\n        title: \"Images cached successfully\",\n        description: \"Plant images have been stored in Firebase Storage for faster loading\",\n      });\n    } catch (error) {\n      console.error('Error caching plant images:', error);\n      toast({\n        title: \"Caching failed\",\n        description: \"There was a problem caching the plant images. Please try again later.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setCaching(false);\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900 text-slate-900 dark:text-white font-sans transition-colors duration-300 ease-out\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-6 md:py-10\">\n        <motion.div\n          initial={{ opacity: 0, y: 15 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center gap-3 mb-6\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              onClick={() => setLocation('/')}\n              className=\"h-9 w-9\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">Settings</h1>\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                Configure your plant monitoring system\n              </p>\n            </div>\n          </div>\n          \n          <Tabs defaultValue=\"appearance\">\n            <TabsList className=\"grid grid-cols-3 mb-6\">\n              <TabsTrigger value=\"appearance\">Appearance</TabsTrigger>\n              <TabsTrigger value=\"plant\">Plant Config</TabsTrigger>\n              <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"appearance\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Theme Settings</CardTitle>\n                  <CardDescription>\n                    Customize the appearance of your plant monitoring system\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col gap-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-medium\">Theme Mode</h3>\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          Switch between light and dark mode\n                        </p>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        onClick={toggleTheme}\n                        className={`shadow-sm ${theme === 'dark' \n                          ? 'bg-yellow-50 text-yellow-700 border-yellow-200 hover:bg-yellow-100 hover:text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300 dark:border-yellow-800/50 dark:hover:bg-yellow-800/50' \n                          : 'bg-purple-50 text-purple-700 border-purple-200 hover:bg-purple-100 hover:text-purple-800 dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-800/50 dark:hover:bg-purple-800/50'\n                        }`}\n                      >\n                        {theme === 'dark' ? (\n                          <>\n                            <Sun className=\"h-4 w-4 mr-2 text-yellow-600 dark:text-yellow-400\" />\n                            Light Mode\n                          </>\n                        ) : (\n                          <>\n                            <Moon className=\"h-4 w-4 mr-2 text-purple-600 dark:text-purple-400\" />\n                            Dark Mode\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between pt-4 border-t\">\n                      <div>\n                        <h3 className=\"font-medium\">Performance Settings</h3>\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          Optimize app performance and speed\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-medium\">Plant Image Caching</h3>\n                        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          Download plant images to Firebase for faster loading\n                        </p>\n                      </div>\n                      <Button \n                        variant=\"outline\"\n                        onClick={handleCacheImages}\n                        disabled={caching}\n                      >\n                        {caching ? (\n                          <>\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                            Caching...\n                          </>\n                        ) : (\n                          <>\n                            <CloudUpload className=\"h-4 w-4 mr-2\" />\n                            Cache Images\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"plant\">\n              <PlantConfig onSave={handleSaveConfig} />\n            </TabsContent>\n            \n            <TabsContent value=\"notifications\">\n              <NotificationSettings onSave={handleSaveNotifications} />\n            </TabsContent>\n          </Tabs>\n        </motion.div>\n      </main>\n    </div>\n  );\n}","size_bytes":7687},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145}}}